# command line applications and sections to delete after load
[cli]
apps = list: ${cli_config_default:apps}, show_config_cli, clear_cli, aapp, app, papp
app_removes = list: list_actions_cli
cleanups = list: ${cli_config_default:cleanups}, show_config_cli, override_cli_decorator, aapp, app, papp
usage_config = object({'param':
  {'doc': 'Clincial Domain Abstract Meaning Representation Graphs.'}}):
  zensols.cli.UsageConfig

[log_cli]
format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s
loggers = dict: {
  'penman.layout': 'err',
  'zensols.nlp.combine': 'info',
  'zensols.mednlp': 'info',
  'zensols.mimic': 'info',
  'zensols.amr.docparser': 'info',
  'zensols.amr.coref': 'info',
  'zensols.amrspring': 'warn',
  'zensols.cli.lib.support': 'info'}

[override_cli_decorator]
option_overrides = dict: {'override':
  {'doc': 'amr_default.parse_model=<gsii|t5> to set the model'}}

[clear_cli]
class_name = zensols.cli.CacheClearer
clearables = tuple: mimic_default:clearables, amr_default:clearables, clinicamr_default:clearables

[import]
config_files = list:
    resource(zensols.util): resources/default.conf,
    resource(zensols.util): resources/escape.conf,
    resource(zensols.util): resources/cli.conf,
    resource(zensols.util): resources/cli-config.conf,
    resource(zensols.util): resources/cleaner.conf

[config_cli]
expect = False

[config_import]
references = list: conf_esc, package, default
sections = list: app_imp_conf

[app_imp_conf]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list: 
  ^{override}, ^{config_path},
  resource(zensols.deeplearn): resources/default.conf,
  resource(zensols.deepnlp): resources/default.conf,
  resource(zensols.mednlp): resources/default.conf,
  resource(zensols.mimic): resources/default.conf,
  resource(zensols.mimicsid): resources/default.conf,
  resource(zensols.amr): resources/default.conf,
  resource(zensols.amrspring): resources/default.conf,
  resource(zensols.clinicamr): resources/default.conf,
  ^{config_path}, ^{override},
  resource(zensols.nlp): resources/obj.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/score.yml,
  resource(zensols.deeplearn): resources/obj.conf,
  resource(zensols.deepnlp): resources/obj.conf,
  resource(zensols.mednlp): resources/install.conf,
  resource(zensols.mednlp): resources/lang.conf,
  resource(zensols.mednlp): resources/filter-medical.conf,
  resource(zensols.mednlp): resources/entlink.conf,
  resource(zensols.mimic): resources/obj.conf,
  resource(zensols.mimic): resources/decorator.conf,
  resource(zensols.mimicsid): resources/anon.conf,
  resource(zensols.mimicsid): resources/obj.conf,
  resource(zensols.mimicsid): resources/lang.yml,
  resource(zensols.mimicsid): resources/adm.conf,
  resource(zensols.amr): resources/obj.conf,
  resource(zensols.amr): resources/annotate.conf,
  resource(zensols.amr): resources/align.yml,
  resource(zensols.amr): resources/coref.conf,
  resource(zensols.amr): resources/model/inference.conf,
  resource(zensols.amrspring): resources/obj.yml,
  resource(zensols.clinicamr): resources/adm-selection.conf,
  resource(zensols.clinicamr): resources/obj.yml,
  ^{config_path}, ^{override}

[aapp]
class_name = zensols.amr.Application
log_config = instance: log_cli
doc_parser = alias: clinicamr_default:doc_parser
anon_doc_stash = instance: amr_anon_feature_doc_stash
dumper = instance: amr_dumper

[aapp_decorator]
option_excludes = set: config_factory, doc_parser, anon_doc_stash, dumper
option_overrides = dict: {
  'input_file': {'long_name': 'input', 'metavar': '<FILE|DIR>'},
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'},
  'meta_keys': {'long_name': 'keep', 'short_name': 'k'}}
mnemonic_overrides = dict: {'write_metadata': 'meta'}
mnemonic_excludes = set: clear

[app]
class_name = zensols.clinicamr.app.Application
doc_parser = alias: clinicamr_default:doc_parser
adm_amr_stash = instance: camr_adm_amr_stash
dumper = ${aapp:dumper}

[app_decorator]
option_excludes = set: config_factory, doc_parser, adm_amr_stash, dumper
option_overrides = dict: {
  'output_dir': {'long_name': 'output', 'short_name': 'o', 'metavar': 'DIR'}}
mnemonic_overrides = dict: {
  'show_admission': 'adm'}

[papp]
class_name = zensols.clinicamr.app.PrototypeApplication
app = instance: app
