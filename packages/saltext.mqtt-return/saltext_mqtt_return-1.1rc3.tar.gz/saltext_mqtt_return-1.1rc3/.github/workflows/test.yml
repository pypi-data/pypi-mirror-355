
name: Testing

on: [push, pull_request]

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Set Cache Key
      run: echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - name: Install System Deps
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2 libxml2-dev libxslt-dev

  Linux:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 15

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
        salt-version:
          - "3005.1"

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      env:
        SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-3 --install-only

    - name: Test
      env:
        SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-3 -- -vv tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        set DATA=$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")
        echo "FLAGS=${DATA}" >> $GITHUB_OUTPUT

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}.log
        path: artifacts/runtests-*.log

  publish:
    runs-on: ubuntu-latest
    needs: Linux
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Build package
        run: |
          pip install build
          python -m build

      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
