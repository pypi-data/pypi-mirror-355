[project]
authors = [
  {name = "DataShades", email = "datashades@linkdigital.com.au"},
  {name = "Oleksandr Cherniavskiy", email = "mutantsan@gmail.com"},
  {name = "Yan Rudenko", email = "yan.rudenko@gmail.com"},
]
description = "A modern page builder extension for CKAN, powered by GrapesJS"
name = "ckanext-blocksmith"
readme = "README.md"
version = "0.3.0"

classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
license = {text = "AGPL"}

dependencies = [
  'beautifulsoup4>=4.8.2,<5.0.0'
]

keywords = ["CKAN"]

[project.optional-dependencies]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]"
]

[project.urls]
Homepage = "https://github.com/DataShades/ckanext-blocksmith"

[project.entry-points."ckan.plugins"]
blocksmith = "ckanext.blocksmith.plugin:BlocksmithPlugin"

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[tool.pytest.ini_options]
addopts = "--ckan-ini test.ini"
filterwarnings = [
  "ignore::sqlalchemy.exc.SADeprecationWarning",
  "ignore::sqlalchemy.exc.SAWarning",
  "ignore::DeprecationWarning",
]

[tool.isort]
known_ckan = "ckan"
known_ckanext = "ckanext"
known_self = "ckanext.blocksmith"
sections = "FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,CKAN,CKANEXT,SELF,LOCALFOLDER"
profile = "black"
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4
target-version = "py310"


[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
