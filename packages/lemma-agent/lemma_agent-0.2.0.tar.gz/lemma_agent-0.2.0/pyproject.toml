[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lemma_agent"
description = "The GitHub Copilot for AI Agent Development - Intelligent debugging for AI agents"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Lemma Team", email = "shinojcm01@gmail.com"},
]
maintainers = [
    {name = "Lemma Team", email = "shinojcm01@gmail.com"},
]
keywords = [
    "ai", "agents", "debugging", "llm", "langchain", "crewai", "autogen",
    "artificial-intelligence", "machine-learning", "development-tools",
    "productivity", "automation", "chatbots", "conversational-ai"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO",
]
dynamic = ["version"]

dependencies = [
    "typing-extensions>=4.0.0",
    "dataclasses-json>=0.5.7",
    "pydantic>=1.8.0",
    "structlog>=21.1.0",
    "msgpack>=1.0.0",
    "httpx>=0.24.0",
    "aiohttp>=3.8.0",
    "pyyaml>=6.0",
    "python-dotenv>=0.19.0",
    "psutil>=5.8.0",
    "tiktoken>=0.4.0",
]

[project.optional-dependencies]
langchain = [
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
]
crewai = [
    "crewai>=0.1.0",
]
autogen = [
    "pyautogen>=0.1.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
]
all = [
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "crewai>=0.1.0",
    "pyautogen>=0.1.0",
]
enterprise = [
    "cryptography>=3.4.0",
    "jwt>=1.3.0",
    "redis>=4.0.0",
]

[project.urls]
Homepage = "https://agentdebugger.pro"
Documentation = "https://docs.agentdebugger.pro"
Repository = "https://github.com/lemma-team/agentdebugger-pro"
Issues = "https://github.com/lemma-team/agentdebugger-pro/issues"
Changelog = "https://github.com/lemma-team/agentdebugger-pro/blob/main/CHANGELOG.md"
"Pitch Deck" = "https://agentdebugger.pro/pitch"
Demo = "https://agentdebugger.pro/demo"

[project.scripts]
lemma_agent = "lemma_agent.cli:main"
lemma-agent = "lemma_agent.cli:main"

[tool.setuptools]
packages = ["lemma_agent"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "lemma_agent.__version__"}

[tool.setuptools.package-data]
lemma_agent = ["py.typed", "config/*.yaml", "templates/*.json"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lemma_agent"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "crewai.*",
    "autogen.*",
    "msgpack.*",
    "tiktoken.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["lemma_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "lemma/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]