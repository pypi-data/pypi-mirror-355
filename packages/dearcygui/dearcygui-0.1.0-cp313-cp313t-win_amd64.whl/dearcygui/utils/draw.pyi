"""
This type stub file was generated by cyright.
"""

import dearcygui as dcg

class DragPoint(dcg.DrawingList):
    """A draggable point represented as a circle.
    
    This drawing element can be dragged by the user and will report its position.
    It provides hover and drag callbacks for interactive behavior.
    It can optionally be constrained to stay within plot boundaries when clamping
    is enabled.
    """
    def __init__(self, context: dcg.Context, *args, **kwargs) -> None:
        ...
    
    def setup_callbacks(self): # -> None:
        """Setup the handlers that respond to user interaction.
        
        Creates and attaches handlers for hover, drag, and cursor appearance.
        This is called during initialization before the element is attached
        to the parent tree.
        """
        ...
    
    @property
    def radius(self):
        """Radius of the draggable point.
        
        Controls both the visual circle size and the interactive hit area.
        """
        ...
    
    @radius.setter
    def radius(self, value): # -> None:
        ...
    
    @property
    def x(self):
        """X coordinate in screen space.
        
        The horizontal position of the point.
        """
        ...
    
    @x.setter
    def x(self, value): # -> None:
        ...
    
    @property
    def y(self):
        """Y coordinate in screen space.
        
        The vertical position of the point.
        """
        ...
    
    @y.setter
    def y(self, value): # -> None:
        ...
    
    @property
    def clamp_inside(self): # -> bool:
        """Controls whether the point is constrained to remain inside the plot area.
        
        When enabled, the point will be automatically repositioned if it would
        otherwise fall outside the plot's visible boundaries.
        """
        ...
    
    @clamp_inside.setter
    def clamp_inside(self, value): # -> None:
        ...
    
    @property
    def color(self): # -> Color:
        """Color of the displayed circle.
        
        The fill color for the draggable point, specified as an RGBA tuple.
        """
        ...
    
    @color.setter
    def color(self, value): # -> None:
        ...
    
    @property
    def on_hover(self): # -> Callback | None:
        """Callback triggered when the point is hovered by the cursor.
        
        This callback is invoked whenever the mouse cursor hovers over the
        draggable point.
        """
        ...
    
    @on_hover.setter
    def on_hover(self, value): # -> None:
        ...
    
    @property
    def on_dragging(self): # -> Callback | None:
        """Callback triggered during active dragging.
        
        This callback is continuously invoked while the user is dragging the
        point, allowing real-time tracking of position changes.
        """
        ...
    
    @on_dragging.setter
    def on_dragging(self, value): # -> None:
        ...
    
    @property
    def on_dragged(self): # -> Callback | None:
        """Callback triggered when a drag operation completes.
        
        This callback is invoked once when the user releases the point after
        dragging it, signaling the completion of a position change.
        """
        ...
    
    @on_dragged.setter
    def on_dragged(self, value): # -> None:
        ...
    
    def handler_dragging(self, _, __, drag_deltas): # -> None:
        ...
    
    def handler_dragged(self, _, __, drag_deltas): # -> None:
        ...
    
    def handler_hover(self): # -> None:
        ...
    
    def handler_visible_for_clamping(self, handler, plot: dcg.Plot): # -> None:
        ...
    
    @property
    def active(self): # -> bool:
        """Whether the point is in active state.
        
        Reflects whether the point is currently being interacted with.
        """
        ...
    
    @property
    def activated(self): # -> bool:
        """Whether the point was activated this frame.
        
        True if the point transitioned to active state in the current frame.
        """
        ...
    
    @property
    def clicked(self): # -> tuple:
        """Whether the point was clicked this frame.
        
        True if the point was clicked in the current frame.
        """
        ...
    
    @property
    def double_clicked(self): # -> list:
        """Whether the point was double clicked this frame.
        
        True if the point was double clicked in the current frame.
        """
        ...
    
    @property
    def deactivated(self): # -> bool:
        """Whether the point was deactivated this frame.
        
        True if the point transitioned from active to inactive in this frame.
        """
        ...
    
    @property
    def pos_to_viewport(self): # -> Coord:
        """The point's position relative to viewport coordinates.
        
        Provides the position converted to the viewport's coordinate system.
        """
        ...
    
    @property
    def pos_to_window(self): # -> Coord:
        """The point's position relative to window coordinates.
        
        Provides the position converted to the window's coordinate system.
        """
        ...
    
    @property
    def pos_to_parent(self): # -> Coord:
        """The point's position relative to parent coordinates.
        
        Provides the position converted to the parent's coordinate system.
        """
        ...
    
    @property
    def rect_size(self): # -> Coord:
        """The rectangular size of the point's interactive area.
        
        Gives the dimensions of the rectangular area that responds to
        mouse interactions.
        """
        ...
    
    @property
    def resized(self): # -> bool:
        """Whether the point's size changed this frame.
        
        True if the point was resized in the current frame.
        """
        ...
    
    @property
    def no_input(self): # -> bool:
        """Whether user input is disabled for the point.
        
        When set to True, the point will not respond to mouse interaction.
        """
        ...
    
    @no_input.setter
    def no_input(self, value): # -> None:
        ...
    
    @property
    def capture_mouse(self): # -> bool:
        """Whether the point captures mouse events.
        
        Controls how the point interacts with mouse events that occur
        within its bounds.
        """
        ...
    
    @capture_mouse.setter
    def capture_mouse(self, value): # -> None:
        ...
    
    @property
    def handlers(self): # -> list:
        """The event handlers attached to this point.
        
        Collection of handlers that process events for this draggable point.
        """
        ...
    
    @handlers.setter
    def handlers(self, value): # -> None:
        ...
    


class DrawStream(dcg.DrawingList):
    """A drawing element that draws its children in a FIFO time stream fashion.

    Each child is associated with an expiration time.
    When the expiration time is reached, the queue
    moves onto the next child.

    Only the first child in the queue is shown.

    if time_modulus is set, the time is taken modulo
    time_modulus, and the queue loops back once the end
    is reached.

    Usage:
    ```python
    stream = DrawStream(context)
    # Add drawing element that will expire after 2 seconds
    expiration_time = time.monotonic() + 2.0 
    stream.push(DrawCircle(context),
                expiration_time)
    ```
    """
    @property
    def time(self): # -> double:
        """Return the current time (monotonic clock mod time_modulus) in seconds"""
        ...
    
    @property
    def allow_no_children(self): # -> bint:
        """
        If True, if the expiration date of the last
        child expires, the item is allowed to have
        no child.

        If False (default), always keep at least one child.
        """
        ...
    
    @allow_no_children.setter
    def allow_no_children(self, value: bool): # -> None:
        ...
    
    @property
    def no_skip_children(self): # -> bint:
        """
        If True, will always show each child
        at least one frame, even if their
        expiration time is reached.
        """
        ...
    
    @no_skip_children.setter
    def no_skip_children(self, value: bool): # -> None:
        ...
    
    @property
    def time_modulus(self): # -> double:
        """
        If non-zero, the monotonic clock
        time will be applied this value as
        modulus, and the queue will loop back.
        """
        ...
    
    @time_modulus.setter
    def time_modulus(self, value: float): # -> None:
        ...
    
    def clear(self, only_outdated=...): # -> None:
        """Clear the drawing queue and detaches the children
        
        if only_updated is True, only items
        with past timestamps are removed
        """
        ...
    
    def push(self, child, expiry_time: float): # -> None:
        """Push a drawing item to the queue.

        The item will be attached as child if it isn't already.
        Only items associated with a push() will be
        displayed.

        An item is allowed to be several times in the queue
        (it will be attach as child only once, but will appear
         several times in the queue)

        Elements in the queue remain there unless the
        item is deleted, or clear() is called.

        Parameters:
            child: Drawing element to attach
            expiry_time: Time when child should expire and drawing
                should move on to the next one in the queue.
                The time clock corresponds to time.monotonic().
        """
        ...
    


