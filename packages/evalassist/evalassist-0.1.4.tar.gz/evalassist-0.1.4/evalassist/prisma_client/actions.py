# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class StoredTestCaseActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.StoredTestCase]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = StoredTestCase.prisma().query_raw(
            'SELECT * FROM StoredTestCase WHERE id = ?',
            1103527590,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.StoredTestCase
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = StoredTestCase.prisma().query_first(
            'SELECT * FROM StoredTestCase WHERE user_id = ?',
            377401575,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.StoredTestCaseCreateInput,
        include: Optional[types.StoredTestCaseInclude] = None
    ) -> _PrismaModelT:
        """Create a new StoredTestCase record.

        Parameters
        ----------
        data
            StoredTestCase record data
        include
            Specifies which relations should be loaded on the returned StoredTestCase model

        Returns
        -------
        prisma.models.StoredTestCase
            The created StoredTestCase record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a StoredTestCase record from just the required fields
        storedtestcase = StoredTestCase.prisma().create(
            data={
                # data to create a StoredTestCase record
                'user_id': 662824084,
                'content': 'bbehjachib',
                'name': 'cadfabfehe',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.StoredTestCaseCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple StoredTestCase records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of StoredTestCase record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = StoredTestCase.prisma().create_many(
            data=[
                {
                    # data to create a StoredTestCase record
                    'user_id': 368800899,
                    'content': 'bfaiacjjfc',
                    'name': 'eigcfgbif',
                },
                {
                    # data to create a StoredTestCase record
                    'user_id': 1062517886,
                    'content': 'cghideieh',
                    'name': 'biabhbdai',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.StoredTestCaseWhereUniqueInput,
        include: Optional[types.StoredTestCaseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single StoredTestCase record.

        Parameters
        ----------
        where
            StoredTestCase filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned StoredTestCase model

        Returns
        -------
        prisma.models.StoredTestCase
            The deleted StoredTestCase record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        storedtestcase = StoredTestCase.prisma().delete(
            where={
                'id': 836760821,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.StoredTestCaseWhereUniqueInput,
        include: Optional[types.StoredTestCaseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique StoredTestCase record.

        Parameters
        ----------
        where
            StoredTestCase filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned StoredTestCase model

        Returns
        -------
        prisma.models.StoredTestCase
            The found StoredTestCase record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        storedtestcase = StoredTestCase.prisma().find_unique(
            where={
                'id': 595337866,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.StoredTestCaseWhereUniqueInput,
        include: Optional[types.StoredTestCaseInclude] = None
    ) -> _PrismaModelT:
        """Find a unique StoredTestCase record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            StoredTestCase filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned StoredTestCase model

        Returns
        -------
        prisma.models.StoredTestCase
            The found StoredTestCase record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        storedtestcase = StoredTestCase.prisma().find_unique_or_raise(
            where={
                'id': 790425851,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoredTestCaseWhereInput] = None,
        cursor: Optional[types.StoredTestCaseWhereUniqueInput] = None,
        include: Optional[types.StoredTestCaseInclude] = None,
        order: Optional[Union[types.StoredTestCaseOrderByInput, List[types.StoredTestCaseOrderByInput]]] = None,
        distinct: Optional[List[types.StoredTestCaseScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple StoredTestCase records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of StoredTestCase records returned
        skip
            Ignore the first N results
        where
            StoredTestCase filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned StoredTestCase model
        order
            Order the returned StoredTestCase records by any field
        distinct
            Filter StoredTestCase records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.StoredTestCase]
            The list of all StoredTestCase records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 StoredTestCase records
        storedtestcases = StoredTestCase.prisma().find_many(take=10)

        # find the first 5 StoredTestCase records ordered by the content field
        storedtestcases = StoredTestCase.prisma().find_many(
            take=5,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StoredTestCaseWhereInput] = None,
        cursor: Optional[types.StoredTestCaseWhereUniqueInput] = None,
        include: Optional[types.StoredTestCaseInclude] = None,
        order: Optional[Union[types.StoredTestCaseOrderByInput, List[types.StoredTestCaseOrderByInput]]] = None,
        distinct: Optional[List[types.StoredTestCaseScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single StoredTestCase record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            StoredTestCase filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned StoredTestCase model
        order
            Order the returned StoredTestCase records by any field
        distinct
            Filter StoredTestCase records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.StoredTestCase
            The first StoredTestCase record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second StoredTestCase record ordered by the name field
        storedtestcase = StoredTestCase.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StoredTestCaseWhereInput] = None,
        cursor: Optional[types.StoredTestCaseWhereUniqueInput] = None,
        include: Optional[types.StoredTestCaseInclude] = None,
        order: Optional[Union[types.StoredTestCaseOrderByInput, List[types.StoredTestCaseOrderByInput]]] = None,
        distinct: Optional[List[types.StoredTestCaseScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single StoredTestCase record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            StoredTestCase filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned StoredTestCase model
        order
            Order the returned StoredTestCase records by any field
        distinct
            Filter StoredTestCase records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.StoredTestCase
            The first StoredTestCase record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second StoredTestCase record ordered by the id field
        storedtestcase = StoredTestCase.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.StoredTestCaseUpdateInput,
        where: types.StoredTestCaseWhereUniqueInput,
        include: Optional[types.StoredTestCaseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single StoredTestCase record.

        Parameters
        ----------
        data
            StoredTestCase record data specifying what to update
        where
            StoredTestCase filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned StoredTestCase model

        Returns
        -------
        prisma.models.StoredTestCase
            The updated StoredTestCase record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        storedtestcase = StoredTestCase.prisma().update(
            where={
                'id': 2111915288,
            },
            data={
                # data to update the StoredTestCase record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.StoredTestCaseWhereUniqueInput,
        data: types.StoredTestCaseUpsertInput,
        include: Optional[types.StoredTestCaseInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            StoredTestCase filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned StoredTestCase model

        Returns
        -------
        prisma.models.StoredTestCase
            The created or updated StoredTestCase record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        storedtestcase = StoredTestCase.prisma().upsert(
            where={
                'id': 1149758321,
            },
            data={
                'create': {
                    'id': 1149758321,
                    'user_id': 1062517886,
                    'content': 'cghideieh',
                    'name': 'biabhbdai',
                },
                'update': {
                    'user_id': 1062517886,
                    'content': 'cghideieh',
                    'name': 'biabhbdai',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.StoredTestCaseUpdateManyMutationInput,
        where: types.StoredTestCaseWhereInput,
    ) -> int:
        """Update multiple StoredTestCase records

        Parameters
        ----------
        data
            StoredTestCase data to update the selected StoredTestCase records to
        where
            Filter to select the StoredTestCase records to update

        Returns
        -------
        int
            The total number of StoredTestCase records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all StoredTestCase records
        total = StoredTestCase.prisma().update_many(
            data={
                'user_id': 1644289366
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoredTestCaseWhereInput] = None,
        cursor: Optional[types.StoredTestCaseWhereUniqueInput] = None,
    ) -> int:
        """Count the number of StoredTestCase records present in the database

        Parameters
        ----------
        select
            Select the StoredTestCase fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            StoredTestCase filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StoredTestCaseCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = StoredTestCase.prisma().count()

        # results: prisma.types.StoredTestCaseCountAggregateOutput
        results = StoredTestCase.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.StoredTestCaseCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoredTestCaseWhereInput] = None,
        cursor: Optional[types.StoredTestCaseWhereUniqueInput] = None,
    ) -> types.StoredTestCaseCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.StoredTestCaseCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoredTestCaseWhereInput] = None,
        cursor: Optional[types.StoredTestCaseWhereUniqueInput] = None,
    ) -> Union[int, types.StoredTestCaseCountAggregateOutput]:
        """Count the number of StoredTestCase records present in the database

        Parameters
        ----------
        select
            Select the StoredTestCase fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            StoredTestCase filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StoredTestCaseCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = StoredTestCase.prisma().count()

        # results: prisma.types.StoredTestCaseCountAggregateOutput
        results = StoredTestCase.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.StoredTestCaseCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.StoredTestCaseWhereInput] = None
    ) -> int:
        """Delete multiple StoredTestCase records.

        Parameters
        ----------
        where
            Optional StoredTestCase filter to find the records to be deleted

        Returns
        -------
        int
            The total number of StoredTestCase records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all StoredTestCase records
        total = StoredTestCase.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.StoredTestCaseScalarFieldKeys'],
        *,
        where: Optional['types.StoredTestCaseWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.StoredTestCaseAvgAggregateInput'] = None,
        sum: Optional['types.StoredTestCaseSumAggregateInput'] = None,
        min: Optional['types.StoredTestCaseMinAggregateInput'] = None,
        max: Optional['types.StoredTestCaseMaxAggregateInput'] = None,
        having: Optional['types.StoredTestCaseScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.StoredTestCaseCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.StoredTestCaseScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.StoredTestCaseScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.StoredTestCaseGroupByOutput']:
        """Group StoredTestCase records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar StoredTestCase fields to group records by
        where
            StoredTestCase filter to select records
        take
            Limit the maximum number of StoredTestCase records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.StoredTestCaseGroupByOutput]
            A list of dictionaries representing the StoredTestCase record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group StoredTestCase records by id values
        # and count how many records are in each group
        results = StoredTestCase.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AppUserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.AppUser]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = AppUser.prisma().query_raw(
            'SELECT * FROM AppUser WHERE id = ?',
            1388290519,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.AppUser
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = AppUser.prisma().query_first(
            'SELECT * FROM AppUser WHERE email = ?',
            'bgehebiafc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.AppUserCreateInput,
        include: Optional[types.AppUserInclude] = None
    ) -> _PrismaModelT:
        """Create a new AppUser record.

        Parameters
        ----------
        data
            AppUser record data
        include
            Specifies which relations should be loaded on the returned AppUser model

        Returns
        -------
        prisma.models.AppUser
            The created AppUser record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a AppUser record from just the required fields
        appuser = AppUser.prisma().create(
            data={
                # data to create a AppUser record
                'email': 'bghffegacj',
                'name': 'bhghchehcc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.AppUserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple AppUser records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of AppUser record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = AppUser.prisma().create_many(
            data=[
                {
                    # data to create a AppUser record
                    'email': 'dcgchcbbf',
                    'name': 'bdedcabahc',
                },
                {
                    # data to create a AppUser record
                    'email': 'ghfhiafcb',
                    'name': 'heejgedji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.AppUserWhereUniqueInput,
        include: Optional[types.AppUserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single AppUser record.

        Parameters
        ----------
        where
            AppUser filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned AppUser model

        Returns
        -------
        prisma.models.AppUser
            The deleted AppUser record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        appuser = AppUser.prisma().delete(
            where={
                'id': 1969681615,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.AppUserWhereUniqueInput,
        include: Optional[types.AppUserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique AppUser record.

        Parameters
        ----------
        where
            AppUser filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned AppUser model

        Returns
        -------
        prisma.models.AppUser
            The found AppUser record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        appuser = AppUser.prisma().find_unique(
            where={
                'id': 1116175964,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.AppUserWhereUniqueInput,
        include: Optional[types.AppUserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique AppUser record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            AppUser filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned AppUser model

        Returns
        -------
        prisma.models.AppUser
            The found AppUser record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        appuser = AppUser.prisma().find_unique_or_raise(
            where={
                'id': 861472101,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AppUserWhereInput] = None,
        cursor: Optional[types.AppUserWhereUniqueInput] = None,
        include: Optional[types.AppUserInclude] = None,
        order: Optional[Union[types.AppUserOrderByInput, List[types.AppUserOrderByInput]]] = None,
        distinct: Optional[List[types.AppUserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple AppUser records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of AppUser records returned
        skip
            Ignore the first N results
        where
            AppUser filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AppUser model
        order
            Order the returned AppUser records by any field
        distinct
            Filter AppUser records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.AppUser]
            The list of all AppUser records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 AppUser records
        appusers = AppUser.prisma().find_many(take=10)

        # find the first 5 AppUser records ordered by the name field
        appusers = AppUser.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AppUserWhereInput] = None,
        cursor: Optional[types.AppUserWhereUniqueInput] = None,
        include: Optional[types.AppUserInclude] = None,
        order: Optional[Union[types.AppUserOrderByInput, List[types.AppUserOrderByInput]]] = None,
        distinct: Optional[List[types.AppUserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single AppUser record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            AppUser filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AppUser model
        order
            Order the returned AppUser records by any field
        distinct
            Filter AppUser records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.AppUser
            The first AppUser record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second AppUser record ordered by the created_at field
        appuser = AppUser.prisma().find_first(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AppUserWhereInput] = None,
        cursor: Optional[types.AppUserWhereUniqueInput] = None,
        include: Optional[types.AppUserInclude] = None,
        order: Optional[Union[types.AppUserOrderByInput, List[types.AppUserOrderByInput]]] = None,
        distinct: Optional[List[types.AppUserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single AppUser record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            AppUser filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AppUser model
        order
            Order the returned AppUser records by any field
        distinct
            Filter AppUser records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.AppUser
            The first AppUser record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second AppUser record ordered by the id field
        appuser = AppUser.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.AppUserUpdateInput,
        where: types.AppUserWhereUniqueInput,
        include: Optional[types.AppUserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single AppUser record.

        Parameters
        ----------
        data
            AppUser record data specifying what to update
        where
            AppUser filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned AppUser model

        Returns
        -------
        prisma.models.AppUser
            The updated AppUser record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        appuser = AppUser.prisma().update(
            where={
                'id': 1303003706,
            },
            data={
                # data to update the AppUser record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.AppUserWhereUniqueInput,
        data: types.AppUserUpsertInput,
        include: Optional[types.AppUserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            AppUser filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned AppUser model

        Returns
        -------
        prisma.models.AppUser
            The created or updated AppUser record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        appuser = AppUser.prisma().upsert(
            where={
                'id': 1686638315,
            },
            data={
                'create': {
                    'id': 1686638315,
                    'email': 'ghfhiafcb',
                    'name': 'heejgedji',
                },
                'update': {
                    'email': 'ghfhiafcb',
                    'name': 'heejgedji',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.AppUserUpdateManyMutationInput,
        where: types.AppUserWhereInput,
    ) -> int:
        """Update multiple AppUser records

        Parameters
        ----------
        data
            AppUser data to update the selected AppUser records to
        where
            Filter to select the AppUser records to update

        Returns
        -------
        int
            The total number of AppUser records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all AppUser records
        total = AppUser.prisma().update_many(
            data={
                'email': 'caaaedabfc'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AppUserWhereInput] = None,
        cursor: Optional[types.AppUserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of AppUser records present in the database

        Parameters
        ----------
        select
            Select the AppUser fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            AppUser filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AppUserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = AppUser.prisma().count()

        # results: prisma.types.AppUserCountAggregateOutput
        results = AppUser.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.AppUserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AppUserWhereInput] = None,
        cursor: Optional[types.AppUserWhereUniqueInput] = None,
    ) -> types.AppUserCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.AppUserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AppUserWhereInput] = None,
        cursor: Optional[types.AppUserWhereUniqueInput] = None,
    ) -> Union[int, types.AppUserCountAggregateOutput]:
        """Count the number of AppUser records present in the database

        Parameters
        ----------
        select
            Select the AppUser fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            AppUser filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AppUserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = AppUser.prisma().count()

        # results: prisma.types.AppUserCountAggregateOutput
        results = AppUser.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AppUserCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.AppUserWhereInput] = None
    ) -> int:
        """Delete multiple AppUser records.

        Parameters
        ----------
        where
            Optional AppUser filter to find the records to be deleted

        Returns
        -------
        int
            The total number of AppUser records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all AppUser records
        total = AppUser.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.AppUserScalarFieldKeys'],
        *,
        where: Optional['types.AppUserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AppUserAvgAggregateInput'] = None,
        sum: Optional['types.AppUserSumAggregateInput'] = None,
        min: Optional['types.AppUserMinAggregateInput'] = None,
        max: Optional['types.AppUserMaxAggregateInput'] = None,
        having: Optional['types.AppUserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AppUserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AppUserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AppUserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AppUserGroupByOutput']:
        """Group AppUser records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar AppUser fields to group records by
        where
            AppUser filter to select records
        take
            Limit the maximum number of AppUser records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AppUserGroupByOutput]
            A list of dictionaries representing the AppUser record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group AppUser records by id values
        # and count how many records are in each group
        results = AppUser.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class LogRecordActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.LogRecord]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = LogRecord.prisma().query_raw(
            'SELECT * FROM LogRecord WHERE id = ?',
            1868141281,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.LogRecord
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = LogRecord.prisma().query_first(
            'SELECT * FROM LogRecord WHERE data = ?',
            'bigaiehgcc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.LogRecordCreateInput,
        include: Optional[types.LogRecordInclude] = None
    ) -> _PrismaModelT:
        """Create a new LogRecord record.

        Parameters
        ----------
        data
            LogRecord record data
        include
            Specifies which relations should be loaded on the returned LogRecord model

        Returns
        -------
        prisma.models.LogRecord
            The created LogRecord record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a LogRecord record from just the required fields
        logrecord = LogRecord.prisma().create(
            data={
                # data to create a LogRecord record
                'data': 'beeifcbebf',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.LogRecordCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple LogRecord records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of LogRecord record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = LogRecord.prisma().create_many(
            data=[
                {
                    # data to create a LogRecord record
                    'data': 'bgcigfahea',
                },
                {
                    # data to create a LogRecord record
                    'data': 'bcejgaggif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.LogRecordWhereUniqueInput,
        include: Optional[types.LogRecordInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single LogRecord record.

        Parameters
        ----------
        where
            LogRecord filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned LogRecord model

        Returns
        -------
        prisma.models.LogRecord
            The deleted LogRecord record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        logrecord = LogRecord.prisma().delete(
            where={
                'id': 835903122,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.LogRecordWhereUniqueInput,
        include: Optional[types.LogRecordInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique LogRecord record.

        Parameters
        ----------
        where
            LogRecord filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned LogRecord model

        Returns
        -------
        prisma.models.LogRecord
            The found LogRecord record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        logrecord = LogRecord.prisma().find_unique(
            where={
                'id': 763719779,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.LogRecordWhereUniqueInput,
        include: Optional[types.LogRecordInclude] = None
    ) -> _PrismaModelT:
        """Find a unique LogRecord record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            LogRecord filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned LogRecord model

        Returns
        -------
        prisma.models.LogRecord
            The found LogRecord record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        logrecord = LogRecord.prisma().find_unique_or_raise(
            where={
                'id': 429995104,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LogRecordWhereInput] = None,
        cursor: Optional[types.LogRecordWhereUniqueInput] = None,
        include: Optional[types.LogRecordInclude] = None,
        order: Optional[Union[types.LogRecordOrderByInput, List[types.LogRecordOrderByInput]]] = None,
        distinct: Optional[List[types.LogRecordScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple LogRecord records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of LogRecord records returned
        skip
            Ignore the first N results
        where
            LogRecord filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LogRecord model
        order
            Order the returned LogRecord records by any field
        distinct
            Filter LogRecord records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.LogRecord]
            The list of all LogRecord records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 LogRecord records
        logrecords = LogRecord.prisma().find_many(take=10)

        # find the first 5 LogRecord records ordered by the id field
        logrecords = LogRecord.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LogRecordWhereInput] = None,
        cursor: Optional[types.LogRecordWhereUniqueInput] = None,
        include: Optional[types.LogRecordInclude] = None,
        order: Optional[Union[types.LogRecordOrderByInput, List[types.LogRecordOrderByInput]]] = None,
        distinct: Optional[List[types.LogRecordScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single LogRecord record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            LogRecord filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LogRecord model
        order
            Order the returned LogRecord records by any field
        distinct
            Filter LogRecord records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.LogRecord
            The first LogRecord record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second LogRecord record ordered by the data field
        logrecord = LogRecord.prisma().find_first(
            skip=1,
            order={
                'data': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LogRecordWhereInput] = None,
        cursor: Optional[types.LogRecordWhereUniqueInput] = None,
        include: Optional[types.LogRecordInclude] = None,
        order: Optional[Union[types.LogRecordOrderByInput, List[types.LogRecordOrderByInput]]] = None,
        distinct: Optional[List[types.LogRecordScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single LogRecord record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            LogRecord filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LogRecord model
        order
            Order the returned LogRecord records by any field
        distinct
            Filter LogRecord records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.LogRecord
            The first LogRecord record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second LogRecord record ordered by the id field
        logrecord = LogRecord.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.LogRecordUpdateInput,
        where: types.LogRecordWhereUniqueInput,
        include: Optional[types.LogRecordInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single LogRecord record.

        Parameters
        ----------
        data
            LogRecord record data specifying what to update
        where
            LogRecord filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned LogRecord model

        Returns
        -------
        prisma.models.LogRecord
            The updated LogRecord record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        logrecord = LogRecord.prisma().update(
            where={
                'id': 1775811865,
            },
            data={
                # data to update the LogRecord record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.LogRecordWhereUniqueInput,
        data: types.LogRecordUpsertInput,
        include: Optional[types.LogRecordInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            LogRecord filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned LogRecord model

        Returns
        -------
        prisma.models.LogRecord
            The created or updated LogRecord record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        logrecord = LogRecord.prisma().upsert(
            where={
                'id': 893145566,
            },
            data={
                'create': {
                    'id': 893145566,
                    'data': 'bcejgaggif',
                },
                'update': {
                    'data': 'bcejgaggif',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.LogRecordUpdateManyMutationInput,
        where: types.LogRecordWhereInput,
    ) -> int:
        """Update multiple LogRecord records

        Parameters
        ----------
        data
            LogRecord data to update the selected LogRecord records to
        where
            Filter to select the LogRecord records to update

        Returns
        -------
        int
            The total number of LogRecord records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all LogRecord records
        total = LogRecord.prisma().update_many(
            data={
                'data': 'jjfeafhfj'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LogRecordWhereInput] = None,
        cursor: Optional[types.LogRecordWhereUniqueInput] = None,
    ) -> int:
        """Count the number of LogRecord records present in the database

        Parameters
        ----------
        select
            Select the LogRecord fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            LogRecord filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LogRecordCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = LogRecord.prisma().count()

        # results: prisma.types.LogRecordCountAggregateOutput
        results = LogRecord.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.LogRecordCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LogRecordWhereInput] = None,
        cursor: Optional[types.LogRecordWhereUniqueInput] = None,
    ) -> types.LogRecordCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.LogRecordCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LogRecordWhereInput] = None,
        cursor: Optional[types.LogRecordWhereUniqueInput] = None,
    ) -> Union[int, types.LogRecordCountAggregateOutput]:
        """Count the number of LogRecord records present in the database

        Parameters
        ----------
        select
            Select the LogRecord fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            LogRecord filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LogRecordCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = LogRecord.prisma().count()

        # results: prisma.types.LogRecordCountAggregateOutput
        results = LogRecord.prisma().count(
            select={
                '_all': True,
                'data': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.LogRecordCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.LogRecordWhereInput] = None
    ) -> int:
        """Delete multiple LogRecord records.

        Parameters
        ----------
        where
            Optional LogRecord filter to find the records to be deleted

        Returns
        -------
        int
            The total number of LogRecord records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all LogRecord records
        total = LogRecord.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.LogRecordScalarFieldKeys'],
        *,
        where: Optional['types.LogRecordWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.LogRecordAvgAggregateInput'] = None,
        sum: Optional['types.LogRecordSumAggregateInput'] = None,
        min: Optional['types.LogRecordMinAggregateInput'] = None,
        max: Optional['types.LogRecordMaxAggregateInput'] = None,
        having: Optional['types.LogRecordScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.LogRecordCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.LogRecordScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.LogRecordScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.LogRecordGroupByOutput']:
        """Group LogRecord records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar LogRecord fields to group records by
        where
            LogRecord filter to select records
        take
            Limit the maximum number of LogRecord records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.LogRecordGroupByOutput]
            A list of dictionaries representing the LogRecord record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group LogRecord records by id values
        # and count how many records are in each group
        results = LogRecord.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models