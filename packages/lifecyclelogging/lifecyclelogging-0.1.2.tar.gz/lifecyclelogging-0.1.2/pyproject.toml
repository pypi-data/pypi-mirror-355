[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lifecyclelogging"
dynamic = ["version"]
description = "A comprehensive logging utility for managing application lifecycle logs"
requires-python = ">=3.8"
license = { text = "MIT" }
readme = "README.md"
keywords = ["logging", "lifecycle", "debug"]
authors = [{ name = "Jon Bogaty", email = "jon@jonbogaty.com" }]
maintainers = [{ name = "Jon Bogaty", email = "jon@jonbogaty.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dependencies = [
    "rich>=13.0.0",
    "extended-data-types>=5.0.0",
    "typing-extensions>=4.0.0; python_version < '3.10'",
]

[project.urls]
Documentation = "https://github.com/jbcom/lifecyclelogging#readme"
Issues = "https://github.com/jbcom/lifecyclelogging/issues"
Source = "https://github.com/jbcom/lifecyclelogging"

[project.optional-dependencies]
tests = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.6.1",
    "coverage[toml]>=7.6.0",
    "hypothesis>=6.0.0",
]
docs = [
    "sphinx>=8.2,<8.3",
    "sphinxawesome-theme>=5.2.0",
    "sphinx-autodoc2>=0.5.0",
    "myst-parser>=3.0.1",
    "docutils>=0.17",
]
typing = [
    "mypy>=1.0.0",
]

[tool.hatch.version]
path = "src/lifecyclelogging/__init__.py"
pattern = "^__version__ = ['\"](?P<version>.+)['\"]$"

[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
testpaths = "tests"
xfail_strict = true
filterwarnings = []

[tool.coverage.paths]
source = [
    "src/lifecyclelogging",
    ".tox/*/lib/python*/site-packages/lifecyclelogging",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["lifecyclelogging"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 75
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == '__main__':",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise ImportError",
    "except ImportError:",
    "pass",
]

[tool.codespell]
skip = "*.js,*.css,*.inv,*.lock,*.toml,*.json,*.yml,*.yaml"
count = true

[tool.interrogate]
omit-covered-files = true
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]

[tool.black]
line-length = 88

[tool.ruff]
src = ["lifecyclelogging", "tests"]
exclude = ["docs"]
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN", # Type annotations checks are better handled by Mypy.
    "C901", # Ignore overly complex functions.
    "COM", # Black handles commas in formatting.
    "D205", # One blank line between the summary line and description.
    "D415", # First line should end with a period.
    "E501", # Line length is managed by Black.
    "TD", # TODO comments are acceptable.
    "FIX", # FIXME comments are acceptable.
    "FBT", # Boolean arguments are acceptable in certain contexts.
    "TCH", # TYPE_CHECKING blocks are essential for type hinting.
    "TRY", # Broad exception catches are acceptable in specific contexts.
]

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = [
    "D100", # Missing docstring in public module.
    "INP001", # Implicit namespace package acceptable for docs.
    "PTH100", # Path handling is fine for Sphinx conf.
]
"src/lifecyclelogging/logging.py" = [
    "A005", # Module can shadow stdlib.
    "SLF001", # Private member access required for stdlib logging.
    "PLR0913", # Many arguments are acceptable for logging interface.
    "FBT001", # Boolean args are acceptable for configuration.
    "FBT002", # Boolean defaults are acceptable for configuration.
    "C901", # Complex functions are acceptable in logging.
    "PLW2901", # Loop variable reassignment is intentional.
    "TRY003", # Long error messages are acceptable.
    "EM102", # f-strings in errors are acceptable.
]
"tests/*.py" = [
    "INP001", # Implicit namespace package acceptable in tests.
    "S101", # Assert statements are acceptable in pytest.
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2

[tool.mypy]
python_version = "3.8"
strict = true
pretty = true
show_error_codes = true
enable_error_code = ["ignore-without-code"]
ignore_missing_imports = true
warn_return_any = false

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.semantic_release]
branch = "main"
allow_zero_version = true
major_on_zero = false
version_variables = [
    "src/lifecyclelogging/__init__.py:__version__",
    "docs/conf.py:version",
]
