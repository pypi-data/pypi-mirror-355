[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "slicesight-next"
version = "0.2.0"
description = "Advanced Redis hotspot detection and analysis"
authors = [
    {name = "SliceSight Team", email = "slicesight@thirteenthstrike.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring",
]
keywords = [
    "redis",
    "cluster",
    "hotspot",
    "monitoring",
    "performance",
    "distributed-systems",
]
dependencies = [
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.0.0",
    "testcontainers>=3.0.0",
]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/oxygen-fragment/slicesight-next-next"
Documentation = "https://github.com/oxygen-fragment/slicesight-next-next"
Repository = "https://github.com/oxygen-fragment/slicesight-next-next.git"
Issues = "https://github.com/oxygen-fragment/slicesight-next-next/issues"

[project.scripts]
slicesight-hotshard = "slicesight_next.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["slicesight_next"]

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an except clause, raise exceptions with raise ... from err
    "B007",  # Loop control variable not used within loop body
    "F841",  # Local variable assigned but never used
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "TCH", "F821"]

[tool.ruff.lint.isort]
known-first-party = ["slicesight_next"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=slicesight_next",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
]

[tool.coverage.run]
source = ["slicesight_next"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test