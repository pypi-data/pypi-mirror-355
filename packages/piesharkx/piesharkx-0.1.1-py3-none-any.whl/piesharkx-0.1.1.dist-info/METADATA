Metadata-Version: 2.2
Name: piesharkx
Version: 0.1.1
Summary: Mini Framework for Human
Home-page: https://github.com/LcfherShell/piesharkxs
Author: LcfherShell
Author-email: lcfhershell@tutanota.com
License: MIT
Project-URL: Bug Tracker, https://github.com/LcfherShell/piesharkx/issues
Project-URL: Documentation, https://github.com/LcfherShell/piesharkx#readme
Keywords: web,framework,pieshark
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: webob>=1.8.7
Requires-Dist: parse>=1.19.0
Requires-Dist: colorama>=0.4.4
Requires-Dist: Werkzeug>=2.0.0
Requires-Dist: pycryptodome>=3.18.0
Requires-Dist: beautifulsoup4>=4.12.0
Requires-Dist: chardet>=5.1.0
Requires-Dist: requests-html
Requires-Dist: memoryawarestruct
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# ü¶à PieShark Framework
*A Lightweight, Powerful Python Web Framework*

---

## üöÄ Overview

**PieShark** is a modern, lightweight WSGI-based Python web framework designed for developers who want power without complexity. Built with performance and security in mind, it offers everything you need to create robust web applications and APIs.

### ‚ú® Key Features

- üõ£Ô∏è **Flexible Routing** - Path parameters, regex patterns, and RESTful endpoints
- üîê **Built-in Security** - Automatic session and cookie encryption
- üß© **Modular Design** - Blueprint system for organized code architecture
- ‚ö° **Async/Sync Support** - Native support for both synchronous and asynchronous handlers
- üé® **Simple Templating** - Lightweight template engine with Python variable injection
- üîß **Middleware Ready** - Custom middleware support for request/response processing
- üì¶ **Static File Serving** - Built-in static file handling

---

## üèÅ Quick Start

### Installation & Setup

```python
from PieShark.main import pieshark, request, form, session
from PieShark.blueprint import Blueprint
from PieShark.session import SESSION
from PieShark.cookie import Cookie
from PieShark.templates import Templates
from PieShark.pydejs import PY_deJS

# Initialize your application
app = pieshark(debug=True)

# Configure your app
app.config.update({
    'secret_key': 'your-super-secret-key-here',
    'session_permanent': True,
    'url_dbase': 'base://sqlite3:static',
    'limit_size_upload': 3089003  # ~3MB upload limit
})
```

### Your First Route

```python
@app.route("/")
async def home():
    session['user'] = 'Developer'
    return Templates(
        "<h1>Welcome to {{ framework }}!</h1>", 
        framework="PieShark"
    )

@app.route("/api/user/{user_id}")
async def get_user(user_id):
    return app.json_response({
        "user_id": user_id,
        "status": "active"
    })
```

---

## üõ£Ô∏è Advanced Routing

PieShark supports multiple routing patterns to fit your application's needs:

### Dynamic Parameters
```python
@app.route("/users/{user_id}/posts/{post_id}")
async def get_user_post(user_id, post_id):
    return f"User {user_id}, Post {post_id}"
```

### HTTP Methods
```python
@app.route("/api/data", methods=["GET", "POST", "PUT", "DELETE"])
async def handle_data():
    if request.method == "POST":
        # Handle POST data
        return app.json_response({"created": True})
    elif request.method == "GET":
        # Handle GET request
        return app.json_response({"data": "sample"})
```

---

## üîê Security Features

### Session Management
```python
@app.route("/login", methods=["POST"])
async def login():
    # Sessions are automatically encrypted
    session['user_id'] = 12345
    session['username'] = 'john_doe'
    session['roles'] = ['user', 'admin']
    return app.redirect("/dashboard")

@app.route("/dashboard")
async def dashboard():
    if not session.get('user_id'):
        return app.abort(401)
    return f"Welcome back, {session['username']}!"
```

### Encrypted Cookies
```python
# Initialize cookie handler with custom salt
cookie = Cookie(salt="your_custom_salt", app=app)

@app.route("/set-preference")
async def set_preference():
    # Cookies are automatically encrypted
    cookie.create("theme=dark&lang=en")
    return "Preferences saved!"

@app.route("/get-preference")
async def get_preference():
    # Decrypt and read cookie data
    theme = cookie.select.theme.decode()
    return f"Current theme: {theme}"
```

---

## üß© Modular Architecture with Blueprints

Organize your application into logical modules:

```python
# auth_blueprint.py
auth_bp = Blueprint('auth', url_prefix='/auth')

@auth_bp.route('/login', methods=['GET', 'POST'])
async def login():
    if request.method == 'POST':
        username = form.username.decode()
        password = form.password.decode()
        
        # Your authentication logic here
        if authenticate(username, password):
            session['user'] = username
            return app.redirect('/dashboard')
    
    return Templates("""
        <form method="post">
            <input name="username" type="text" placeholder="Username" required>
            <input name="password" type="password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
    """)

@auth_bp.route('/logout')
async def logout():
    session.clear()
    return app.redirect('/')

# Register blueprint in main app
app.register_blueprint(auth_bp)
```

---

## üé® Template System

### Inline Templates
```python
@app.route("/profile/{username}")
async def profile(username):
    user_data = get_user_data(username)  # Your data fetching logic
    
    return Templates("""
        <div class="profile">
            <h1>{{ user.name }}</h1>
            <p>Email: {{ user.email }}</p>
            <p>Joined: {{ user.join_date }}</p>
        </div>
    """, user=user_data)
```

### File-based Templates
```python
# For larger templates, use external files
@app.route("/complex-page")
async def complex_page():
    return Templates("complex_template.shark", 
                    title="My App",
                    data=fetch_page_data())
```

---

## üìÅ Static File Handling

```python
# Serve static files
app.static("static/", "/static/")
app.static("uploads/", "/files/")

# Now accessible at:
# /static/style.css -> static/style.css
# /files/document.pdf -> uploads/document.pdf
```

---

## üì§ Form Processing & File Uploads

```python
@app.route("/upload", methods=["GET", "POST"])
async def upload_file():
    if request.method == "POST":
        # Access form data (automatically encrypted)
        title = form.title.decode()
        description = form.description.decode()
        
        # Handle file uploads
        uploaded_file = form.file  # File object
        if uploaded_file:
            filename = secure_filename(uploaded_file.filename)
            ///Logic your saving file
        
        return app.json_response({
            "status": "success",
            "title": title,
            "filename": filename
        })
    
    return Templates("""
        <form method="post" enctype="multipart/form-data">
            <input name="title" type="text" placeholder="Title" required>
            <textarea name="description" placeholder="Description"></textarea>
            <input name="file" type="file" required>
            <button type="submit">Upload</button>
        </form>
    """)
```

---

## üîÑ Middleware & Hooks

### Request Lifecycle Hooks
```python
@app.before_request
def authenticate_user():
    """Run before every request"""
    if request.path.startswith('/admin/'):
        if not session.get('is_admin'):
            return app.abort(403)

@app.after_request
def add_security_headers(response):
    """Run after every request"""
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    return response
```

### Custom Middleware
```python
class RequestTimingMiddleware:
    def __init__(self, app):
        self.app = app
    
    def __call__(self, environ, start_response):
        start_time = time.time()
        response = self.app(environ, start_response)
        end_time = time.time()
        
        print(f"Request took {end_time - start_time:.2f}s")
        return response

# Apply middleware
app.wsgi_app = RequestTimingMiddleware(app.wsgi_app)
```

---

## üåê API Development

### RESTful API Example
```python
api_bp = Blueprint('api', url_prefix='/api/v1')

@api_bp.route('/users', methods=['GET'])
async def list_users():
    users = get_all_users()  # Your data logic
    return app.json_response({
        "users": users,
        "count": len(users)
    })

@api_bp.route('/users/{user_id}', methods=['GET', 'PUT', 'DELETE'])
async def handle_user(user_id):
    if request.method == 'GET':
        user = get_user_by_id(user_id)
        if not user:
            return app.json_response({"error": "User not found"}, status=404)
        return app.json_response(user)
    
    elif request.method == 'PUT':
        data = request.get_json()
        updated_user = update_user(user_id, data)
        return app.json_response(updated_user)
    
    elif request.method == 'DELETE':
        delete_user(user_id)
        return app.json_response({"message": "User deleted"})

app.register_blueprint(api_bp)
```

---

## üõ†Ô∏è Utilities & Helpers

### CDN Resource Fetcher (PyDeJS)
```python
deJS = PY_deJS()

# Search for JavaScript libraries
jquery_results = deJS.get(search="jquery", limit=1)
minified_jquery = deJS.select("min")

# Use in templates
@app.route("/")
async def home():
    return Templates("""
        <script src="{{ jquery_url }}"></script>
        <h1>jQuery Loaded!</h1>
    """, jquery_url=minified_jquery)
```

---

## üöÄ Deployment

### Development Server
```python
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000, debug=True)
```

### Production Deployment

#### Using Gunicorn
```bash
pip install gunicorn
gunicorn -w 4 -b 0.0.0.0:8000 app:app
```

#### Using Waitress
```bash
pip install waitress
waitress-serve --host=0.0.0.0 --port=8000 app:app
```

### Nginx Configuration Example
```nginx
server {
    listen 80;
    server_name yourdomain.com;
    
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    location /static/ {
        alias /path/to/your/static/files/;
        expires 30d;
    }
}
```

---

## üìã Best Practices

### Project Structure
```
your_project/
‚îÇ
‚îú‚îÄ‚îÄ app.py                 # Application entry point
‚îú‚îÄ‚îÄ config.py              # Configuration settings
‚îú‚îÄ‚îÄ requirements.txt       # Dependencies
‚îÇ
‚îú‚îÄ‚îÄ blueprints/            # Application modules
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ auth.py
‚îÇ   ‚îú‚îÄ‚îÄ api.py
‚îÇ   ‚îî‚îÄ‚îÄ admin.py
‚îÇ
‚îú‚îÄ‚îÄ static/                # Static assets
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îî‚îÄ‚îÄ images/
‚îÇ
‚îú‚îÄ‚îÄ templates/             # Template files
‚îÇ   ‚îú‚îÄ‚îÄ base.shark
‚îÇ   ‚îú‚îÄ‚îÄ home.shark
‚îÇ   ‚îî‚îÄ‚îÄ auth/
‚îÇ       ‚îú‚îÄ‚îÄ login.shark
‚îÇ       ‚îî‚îÄ‚îÄ register.shark
‚îÇ
‚îú‚îÄ‚îÄ utils/                 # Utility functions
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ auth.py
‚îÇ   ‚îî‚îÄ‚îÄ helpers.py
‚îÇ
‚îî‚îÄ‚îÄ tests/                 # Test files
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ test_auth.py
    ‚îî‚îÄ‚îÄ test_api.py
```

### Security Checklist
- ‚úÖ Use strong, unique `secret_key`
- ‚úÖ Store sensitive config in environment variables
- ‚úÖ Validate all user inputs
- ‚úÖ Use HTTPS in production
- ‚úÖ Implement proper error handling
- ‚úÖ Set appropriate file upload limits
- ‚úÖ Regular security updates

### Performance Tips
- Use async handlers for I/O-bound operations
- Implement caching for frequently accessed data
- Optimize database queries
- Use CDN for static assets
- Enable gzip compression
- Monitor application performance

---

## ü§ù Contributing

PieShark is designed to be lightweight yet powerful. Whether you're building a simple API, a complex web application, or a microservice, PieShark provides the tools you need without the bloat.

### Why Choose PieShark?

| Feature | PieShark | Other Frameworks |
|---------|----------|------------------|
| **Learning Curve** | Minimal | Steep |
| **Built-in Security** | ‚úÖ Encrypted sessions/cookies | ‚ùå Manual setup |
| **Async Support** | ‚úÖ Native | ‚ö†Ô∏è Plugin required |
| **File Size** | Lightweight | Heavy |
| **Flexibility** | High | Medium |

---

## üìö Next Steps

1. **Start Small** - Begin with a simple route and gradually add features
2. **Explore Blueprints** - Organize your code into logical modules
3. **Implement Security** - Leverage built-in encryption and session management
4. **Scale Up** - Use async handlers and proper deployment strategies
5. **Contribute** - Help make PieShark even better

---

*Ready to dive in? Start building your next web application with PieShark today! ü¶à‚ö°*
