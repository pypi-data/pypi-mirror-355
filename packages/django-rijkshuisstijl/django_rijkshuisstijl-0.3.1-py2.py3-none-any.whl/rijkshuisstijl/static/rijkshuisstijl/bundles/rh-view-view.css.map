{"version":3,"file":"rh-view-view.css","mappings":"AAoBA,WACE,oBAIA,kBADA,gBAFA,iEACA,kPAEA,CAGF,WACE,oBAIA,kBADA,gBAFA,8DACA,yOAEA,CAGF,WACE,oBAIA,kBADA,gBAFA,gEACA,+OAEA,CAGF,WACE,uBAIA,kBADA,gBAFA,8DACA,yOAEA,CAGF,WACE,uBAIA,kBADA,gBAFA,2DACA,gOAEA,CAGF,WACE,uBAIA,kBADA,gBAFA,6DACA,sOAEA,CAGF,WACI,2BACA,kBACA,gBACA,mJClEF,aADF,MAEI,0BAGF,YACE,SACA,kBAGF,6BCsBE,+BCGA,yBFzBF,6BCsBE,gCDjBF,4ECiBE,+BCGA,yBFpBF,4ECiBE,gCDZF,cACE,kBAIF,gDACE,8BGvBqC,CH0BvC,8BAGE,mBAFA,aACA,cACA,CAGF,kHIgJA,sBAjDA,eC9H0B,CJ4BxB,qCGiGF,UC7H0B,CH+BxB,4IEkGA,eCjIwB,ELsC1B,0GIyIA,sBArEA,cC3GwB,CD0GxB,UAsEA,CFhJE,0BFOF,0GI2EE,cClHsB,EL8CxB,0JAKE,SADA,cACA,CEnBA,yBFsBF,wDI0HA,sBHnJE,sCD+BF,mHIoHA,sBHnJE,qCDqCF,gEAEE,eAGF,wCACE,gBElCA,oCFqCF,cAEI,wCACA,OAIJ,iBE2HA,aAD8B,CAtK5B,yBF4CF,iBE6HE,c","sources":["webpack://django-rijkshuisstijl/./rijkshuisstijl/sass/settings/_typography.scss","webpack://django-rijkshuisstijl/./rijkshuisstijl/sass/components/view/view.scss","webpack://django-rijkshuisstijl/./node_modules/microscope-sass/lib/_util.scss","webpack://django-rijkshuisstijl/./node_modules/microscope-sass/lib/_responsive.scss","webpack://django-rijkshuisstijl/./rijkshuisstijl/sass/components/view/_constants.scss","webpack://django-rijkshuisstijl/./node_modules/microscope-sass/lib/_grid.scss","webpack://django-rijkshuisstijl/./rijkshuisstijl/sass/settings/_grid.scss"],"sourcesContent":["$fa-font-path: '../fonts/';\n\n/**\nWebfonts\n\nDe webfonts zijn versies van de rijkshuisstijl lettertypen, die speciaal gemaakt zijn voor een optimale weergave op het\nbeeldscherm. Zowel de Rijksoverheid Sans als de Serif zijn als webfont beschikbaar.\n */\n\n\n/**\nSans Web of Sans Serif?\n\nSans Web wordt toegepast voor langere (lees-)teksten. De Serif Web is vooral interessant voor de afwisseling in\nbijvoorbeeld digitale magazines, in combinatie met de Sans Web. De webfont versies kunnen als regular, italic of bold\nversie toegpast worden.\n\n- De Rijksoverheidswebfonts mogen, net als het rijkslogo, uitsluitend voor Rijksoverheidspublicaties ingezet worden.\n- Het is aan te bevelen ook een fall-back systeemfont te bepalen voor het geval het webfont niet getoond kan worden.\n */\n@font-face {\n  font-family: 'RO Sans';\n  src: url('/static/rijkshuisstijl/fonts/RO-SansWebText-Regular.eot');\n  src: url('/static/rijkshuisstijl/fonts/RO-SansWebText-Regular.eot?#iefix') format('eot'), url('/static/rijkshuisstijl/fonts/RO-SansWebText-Regular.ttf') format('truetype'), url('/static/rijkshuisstijl/fonts/RO-SansWebText-Regular.woff') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'RO Sans';\n  src: url('/static/rijkshuisstijl/fonts/RO-SansWebText-Bold.eot');\n  src: url('/static/rijkshuisstijl/fonts/RO-SansWebText-Bold.eot?#iefix') format('eot'), url('/static/rijkshuisstijl/fonts/RO-SansWebText-Bold.ttf') format('truetype'), url('/static/rijkshuisstijl/fonts/RO-SansWebText-Bold.woff') format('woff');\n  font-weight: bold;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'RO Sans';\n  src: url('/static/rijkshuisstijl/fonts/RO-SansWebText-Italic.eot');\n  src: url('/static/rijkshuisstijl/fonts/RO-SansWebText-Italic.eot?#iefix') format('eot'), url('/static/rijkshuisstijl/fonts/RO-SansWebText-Italic.ttf') format('truetype'), url('/static/rijkshuisstijl/fonts/RO-SansWebText-Italic.woff') format('woff');\n  font-weight: normal;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: 'RO Serif';\n  src: url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Regular.eot');\n  src: url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Regular.eot?#iefix') format('eot'), url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Regular.ttf') format('truetype'), url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Regular.woff') format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'RO Serif';\n  src: url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Bold.eot');\n  src: url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Bold.eot?#iefix') format('eot'), url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Bold.ttf') format('truetype'), url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Bold.woff') format('woff');\n  font-weight: bold;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'RO Serif';\n  src: url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Italic.eot');\n  src: url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Italic.eot?#iefix') format('eot'), url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Italic.ttf') format('truetype'), url('/static/rijkshuisstijl/fonts/RO-SerifWeb-Italic.woff') format('woff');\n  font-weight: normal;\n  font-style: italic;\n}\n\n@font-face {\n    font-family: \"ro-icons-1.11\";\n    font-style: normal;\n    font-weight: bold;\n    src: url(\"/static/rijkshuisstijl/fonts/ro-icons-1.11.woff\") format(\"opentype\"),url(\"/static/rijkshuisstijl/fonts/ro-icons-1.11.ttf\") format(\"truetype\")\n}\n\n$typography-default-hover-link: false!default;\n$typography-size-border: 2px!default;\n\n$typography-font-family-base: 'RO Sans', Calibri, sans-serif!default;\n\n$typography-font-size-text-mobile: 16/16*1rem!default;\n$typography-font-size-text-tablet: 16/16*1rem!default;\n$typography-font-size-text-laptop: 16/16*1rem!default;\n$typography-font-size-text-desktop: 18/16*1rem!default;\n\n$typography-font-size-text-big-mobile: 20/16*1rem!default;\n$typography-font-size-text-big-tablet: 21/16*1rem!default;\n$typography-font-size-text-big-laptop: 21/16*1rem!default;\n$typography-font-size-text-big-desktop: 24/16*1rem!default;\n\n$typography-font-size-text-small-mobile: 12/16*1rem!default;\n$typography-font-size-text-small-tablet: 12/16*1rem!default;\n$typography-font-size-text-small-laptop: 12/16*1rem!default;\n$typography-font-size-text-small-desktop: 14/16*1rem!default;\n\n$typography-font-size-h1-mobile: 26/16*1rem!default;\n$typography-font-size-h1-tablet: 28/16*1rem!default;\n$typography-font-size-h1-laptop: 28/16*1rem!default;\n$typography-font-size-h1-desktop: 32/16*1rem!default;\n\n$typography-font-size-h2-mobile: 21/16*1rem!default;\n$typography-font-size-h2-tablet: 21/16*1rem!default;\n$typography-font-size-h2-laptop: 21/16*1rem!default;\n$typography-font-size-h2-desktop: 24/16*1rem!default;\n\n$typography-font-size-h3-mobile: 18/16*1rem!default;\n$typography-font-size-h3-tablet: 18/16*1rem!default;\n$typography-font-size-h3-laptop: 18/16*1rem!default;\n$typography-font-size-h3-desktop: 20/16*1rem!default;\n\n$typography-font-size-h4-mobile: 16/16*1rem!default;\n$typography-font-size-h4-tablet: 16/16*1rem!default;\n$typography-font-size-h4-laptop: 16/16*1rem!default;\n$typography-font-size-h4-desktop: 18/16*1rem!default;\n\n$typography-font-size-h5-mobile: $typography-font-size-text-mobile!default;\n$typography-font-size-h5-tablet: $typography-font-size-text-tablet!default;\n$typography-font-size-h5-laptop: $typography-font-size-text-laptop!default;\n$typography-font-size-h5-desktop: $typography-font-size-text-desktop!default;\n\n$typography-font-size-h6-mobile: $typography-font-size-text-mobile!default;\n$typography-font-size-h6-tablet: $typography-font-size-text-tablet!default;\n$typography-font-size-h6-laptop: $typography-font-size-text-laptop!default;\n$typography-font-size-h6-desktop: $typography-font-size-text-desktop!default;\n\n\n$typography-font-weight-text: 400!default;\n$typography-font-weight-h: 700!default;\n\n\n$typography-line-height-text-mobile: 22/16!default;\n$typography-line-height-text-tablet: 22/16!default;\n$typography-line-height-text-laptop: 26/16!default;\n$typography-line-height-text-desktop: 29/19!default;\n\n$typography-line-height-text-big-mobile: 26/20!default;\n$typography-line-height-text-big-tablet: 32/21!default;\n$typography-line-height-text-big-laptop: 32/21!default;\n$typography-line-height-text-big-desktop: 36/24!default;\n\n$typography-line-height-h1-mobile: 30/26!default;\n$typography-line-height-h1-tablet: 32/28!default;\n$typography-line-height-h1-laptop: 32/28!default;\n$typography-line-height-h1-desktop: 36/32!default;\n\n$typography-line-height-h2-mobile: 26/21!default;\n$typography-line-height-h2-tablet: 26/21!default;\n$typography-line-height-h2-laptop: 26/21!default;\n$typography-line-height-h2-desktop: 29/24!default;\n\n$typography-line-height-h3-mobile: 26/18!default;\n$typography-line-height-h3-tablet: 26/18!default;\n$typography-line-height-h3-laptop: 26/18!default;\n$typography-line-height-h3-desktop: 29/20!default;\n\n$typography-line-height-h4-mobile: 26/16!default;\n$typography-line-height-h4-tablet: 26/16!default;\n$typography-line-height-h4-laptop: 26/16!default;\n$typography-line-height-h4-desktop: 29/18!default;\n\n\n$typography-margin-base: .8125rem!default;\n$typography-margin-h: 0!default;\n\n$typography-margin-h1-mobile: 0px 0px .7692em!default;\n$typography-margin-h1-tablet: 0px 0px .7692em!default;\n$typography-margin-h1-laptop: 0px 0px 1em!default;\n$typography-margin-h1-desktop: 0px 0px 1em!default;\n\n$typography-margin-h2-mobile: .952em 0 .2em!default;\n$typography-margin-h2-tablet: .952em 0 .2em!default;\n$typography-margin-h2-laptop: 2em 0 .2em!default;\n$typography-margin-h2-desktop: 2em 0 .2em!default;\n\n$typography-margin-h3-mobile: 0px 0px 0px!default;\n$typography-margin-h3-tablet: 0px 0px 0px!default;\n$typography-margin-h3-laptop: 0px 0px 0px!default;\n$typography-margin-h3-desktop: 0px 0px 0px!default;\n\n$typography-margin-h4-mobile: 0px 0px 60px!default;\n$typography-margin-h4-tablet: 0px 0px 60px!default;\n$typography-margin-h4-laptop: 0px 0px 60px!default;\n$typography-margin-h4-desktop: 0px 0px 60px!default;\n\n\n$typography-margin-property-h: margin!default;\n\n\n$typography-padding-table: 0!default;\n","@import '../../settings/all';\n@import '~microscope-sass/lib/responsive';\n@import '~microscope-sass/lib/grid';\n@import 'constants';\n\n.view {\n  @media print {\n    font-size: 10pt !important;\n  }\n\n  &__body {\n    margin: 0;\n    overflow-x: hidden;\n  }\n\n  &__content,\n  .layout {\n    @include responsive(min-height, $view-min-height-content-mobile, $view-min-height-content-tablet);\n  }\n\n  .header + &__content:last-child,\n  .header + &__content:last-child .layout {\n    @include responsive(min-height, $view-min-height-content-no-nav-no-footer-mobile, $view-min-height-content-no-nav-no-footer-tablet)\n  }\n\n  .layout {\n    position: relative;\n  }\n\n\n  .navigation-bar--compact + &__content .layout {\n    min-height: $view-min-height-content-tablet-compact;\n  }\n\n  &--vcenter &__content {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n  }\n\n  &--small .article__body,\n  &--small .layout,\n  &--small .login-bar__body,\n  &--small .navigation-bar__body {\n    @include container--small;\n  }\n\n  &--big .article__body,\n  &--big .layout,\n  &--big .login-bar__body,\n  &--big .navigation-bar__body {\n    @include container--big;\n  }\n\n  &--full-width .article__body,\n  &--full-width .layout:not(.layout--small),\n  &--full-width .login-bar__body,\n  &--full-width .navigation-bar__body {\n    max-width: 100%;\n    margin: 0;\n  }\n\n  &--full-width .navigation-bar--dropdown .menu .menu {\n    @include tablet {\n      @include container-padding;\n    }\n  }\n\n  &--full-width .layout > .form,\n  &--full-width .layout > .key-value-table,\n  &--full-width .layout > .title-header {\n    @include container-padding;\n  }\n\n  &--full-width .navigation-bar__body,\n  &--full-width .menu {\n    padding-left: 0;\n  }\n\n  &--full-width .navigation-bar__body {\n    padding-right: 0;\n  }\n\n  .header {\n    @include mobile-only(screen) {\n      position: sticky;\n      top: 0;\n    }\n  }\n\n  .login-bar {\n    @include hide-on-mobile;\n  }\n}\n","////\n/// Microscope(-sass) util library.\n/// @group util\n////\n\n/// @name Import util library.\n/// @example @import '~microscope-sass/lib/util';\n\n\n/// Adds outline to all elements (* selector on root).\n///\n/// @param {color} $color [#000] - Color of the outline.\n/// @param {number} $size [1px] - Size of the outline.\n/// @param {string} $style ['solid'] - Style of the outline.\n/// @see {mixin} outline.\n@mixin inspect($color: #000, $size: 1px, $style: 'solid') {\n  @at-root {\n    * {\n      outline: $size $style $color;\n    }\n  }\n}\n\n\n/// Applies `$value` to all `$properties`.\n///\n/// @param {list | string} $properties - One or more properties to set.\n/// @param {*} $value - Value to set.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin properties($properties, $value, $force: false) {\n  $important: if($force, !important, null);\n\n  @if type-of($properties) != list {\n    $properties: ($properties);\n  }\n\n  @each $property in $properties {\n    #{$property}: $value#{$important};\n  }\n}\n\n\n/// Replace `$search` with `$replace` in `$string`.\n/// @author Kitty Giraudel.\n/// @param {string} $string - Initial string.\n/// @param {string} $search - Substring to replace.\n/// @param {string} $replace ('') - New value.\n/// @return {string} - Updated string.\n@function str-replace($string, $search, $replace: '') {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n\n/// Remove the unit of a length.\n/// @author Kitty Giraudel.\n/// @param {numer} $number - Number to remove unit from.\n/// @return {number} - Unitless number.\n@function strip-unit($number) {\n  @if type-of($number) == 'number' and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n\n  @return $number;\n}\n","////\n/// Microscope(-sass) responsive library.\n/// @group responsive\n////\n\n/// @name Import responsive library.\n/// @example @import '~microscope-sass/lib/responsive';\n\n@import 'util';\n\n\n///\n$breakpoint-mobile-s: 320px !default;\n///\n$breakpoint-mobile-m: 375px !default;\n///\n$breakpoint-mobile-l: 425px !default;\n\n///\n$breakpoint-tablet: 768px !default;\n\n///\n$breakpoint-laptop: 992px !default;\n///\n$breakpoint-desktop: 1200px !default;\n\n///\n$responsive-default-media: all !default;\n\n\n/// Wraps content block in a media query based on `$min`, `$max` and `$media`.\n/// If either $min and/or $max is set to null (default) the specific expression is not set.\n///\n/// @param {number (with unit)} $min [null] - Minimal screen width.\n/// @param {number (with unit)} $max [null] - Maximum screen width.\n/// @param {string} $media [$responsive-default-media] - Media (e.g. all, screen or print).\n/// @content Rules to apply when screen size meets condition.\n@mixin breakpoint($min: null, $max: null, $media: $responsive-default-media) {\n\n  @if $min and not $max {\n    @media #{$media} and (min-width: $min) {\n      @content;\n    }\n  }\n\n  @if not $min and $max {\n    @media #{$media} and (max-width: $max) {\n      @content;\n    }\n  }\n\n  @if $min and $max {\n    @media #{$media} and (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  }\n}\n\n\n/// Applies specific value to all `$properties` based on active breakpoint.\n/// Requires at least, `$value-mobile` and `$value-tablet` to be set.\n/// If any value is the same as the previous, or set to null (default), no media query is generated and styling relies\n/// on inheritance of the previous breakpoint.\n///\n/// @param {list | string} $properties - One or more properties to set.\n/// @param {string} $value-mobile - The mobile value.\n/// @param {string} $value-tablet - The tablet value.\n/// @param {string} $value-laptop [null] - The laptop value.\n/// @param {string} $value-desktop [null] - The desktop value.\n/// @param {string} $media [$responsive-default-media] - Media (e.g. all, screen or print).\n@mixin responsive($properties, $value-mobile, $value-tablet, $value-laptop: null, $value-desktop: null, $media: $responsive-default-media) {\n  @include properties($properties, $value-mobile);\n\n  @if $value-tablet and $value-tablet != $value-mobile {\n    @include tablet {\n      @include properties($properties, $value-tablet);\n    }\n  }\n\n  @if $value-laptop and $value-laptop != $value-tablet {\n    @include laptop {\n      @include properties($properties, $value-laptop);\n    }\n  }\n\n  @if $value-desktop and $value-desktop != $value-laptop {\n    @include desktop {\n      @include properties($properties, $value-desktop);\n    }\n  }\n}\n\n\n/// Wraps content block in a media query matching screen sizes smaller than `$breakpoint-tablet` (mobile).\n///\n/// @param {string} $media [$responsive-default-media] - Media (e.g. all, screen or print).\n/// @content Rules to apply when screen size meets condition.\n@mixin mobile-only($media: $responsive-default-media) {\n  @include breakpoint($max: $breakpoint-tablet - 1px, $media: $media) {\n    @content;\n  }\n}\n\n\n/// Wraps content block in a media query matching screen sizes larger or equal than `$breakpoint-tablet`.\n///\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @param {string} $media [$responsive-default-media] - Media (e.g. all, screen or print).\n/// @content Rules to apply when screen size meets condition.\n@mixin tablet($only: false, $media: $responsive-default-media) {\n  @if $only == false {\n    @include breakpoint($breakpoint-tablet, $media: $media) {\n      @content;\n    }\n  } @else {\n    @include breakpoint($breakpoint-tablet, $breakpoint-laptop - 1px, $media: $media) {\n      @content;\n    }\n  }\n}\n\n\n/// Wraps content block in a media query matching screen sizes larger or equal than `$breakpoint-laptop`.\n///\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @param {string} $media [$responsive-default-media] - Media (e.g. all, screen or print).\n/// @content Rules to apply when screen size meets condition.\n@mixin laptop($only: false, $media: $responsive-default-media) {\n  @if $only == false {\n    @include breakpoint($breakpoint-laptop, $media: $media) {\n      @content;\n    }\n  } @else {\n    @include breakpoint($breakpoint-laptop, $breakpoint-desktop - 1px, $media: $media) {\n      @content;\n    }\n  }\n}\n\n\n/// Wraps content block in a media query matching screen sizes larger or equal than `$breakpoint-desktop`.\n///\n/// @param {string} $media [$responsive-default-media] - Media (e.g. all, screen or print).\n/// @content Rules to apply when screen size meets condition.\n@mixin desktop($media: $responsive-default-media) {\n  @include breakpoint($breakpoint-desktop, $media: $media) {\n    @content;\n  }\n}\n\n\n/// Hides element (`display: none;`) by default, only showing it on mobile screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @content Rules to apply when screen size meets condition.\n@mixin show-on-mobile($display: block) {\n  display: none;\n  @include mobile-only {\n    display: $display;\n  }\n}\n\n\n/// Hides element (`display: none;`) by default, only showing it on tablet screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @content Rules to apply when screen size meets condition.\n@mixin show-on-tablet($display: block, $only: false) {\n  display: none;\n\n  @include tablet($only) {\n    display: $display;\n  }\n}\n\n\n/// Hides element (`display: none;`) by default, only showing it on laptop screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @content Rules to apply when screen size meets condition.\n@mixin show-on-laptop($display: block, $only: false) {\n  display: none;\n\n  @include laptop($only) {\n    display: $display;\n  }\n}\n\n\n/// Hides element (`display: none;`) by default, only showing it on desktop screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @content Rules to apply when screen size meets condition.\n@mixin show-on-desktop($display: block) {\n  display: none;\n\n  @include desktop($only) {\n    display: $display;\n  }\n}\n\n\n/// Shows element by default, only hiding it (`display: none;`) on mobile screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @content Rules to apply when screen size meets condition.\n@mixin hide-on-mobile($display: block) {\n  display: $display;\n  @include mobile-only {\n    display: none;\n  }\n}\n\n\n/// Shows element by default, only hiding it (`display: none;`) on tablet screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @content Rules to apply when screen size meets condition.\n@mixin hide-on-tablet($display: block, $only: false) {\n  display: $display;\n\n  @include tablet($only) {\n    display: none;\n  }\n}\n\n\n/// Shows element by default, only hiding it (`display: none;`) on laptop screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @content Rules to apply when screen size meets condition.\n@mixin hide-on-laptop($display: block, $only: false) {\n  display: $display;\n\n  @include laptop($only) {\n    display: none;\n  }\n}\n\n\n/// Shows element by default, only hiding it (`display: none;`) on desktop screen sizes.\n///\n/// @param {string} $display [block] - Display mode used when visible.\n/// @param {boolean} $only [false] - If true, adds max-width expression to media query preventing inheritance by larger\n/// breakpoints.\n/// @content Rules to apply when screen size meets condition.\n@mixin hide-on-desktop($display: block) {\n  display: $display;\n\n  @include desktop($only) {\n    display: none;\n  }\n}\n","@import '../login-bar/constants';\n@import '../header/constants';\n@import '../navigation-bar/constants';\n@import '../footer/constants';\n\n\n$view-min-height-content-mobile: calc(100vh - #{$header-height-mobile + $footer-min-height});\n$view-min-height-content-tablet: calc(100vh - #{$login-bar-min-height + $header-height-tablet + $navigation-bar-min-height-tablet + $footer-min-height});\n$view-min-height-content-tablet-compact: calc(100vh - #{$login-bar-min-height + $header-height-tablet + $navigation-bar-min-height-tablet-compact + $footer-min-height});\n\n$view-min-height-content-no-nav-no-footer-mobile: calc(100vh - #{$header-height-mobile * 2});\n$view-min-height-content-no-nav-no-footer-tablet: calc(100vh - #{$header-height-tablet * 2});\n","////\n/// Microscope(-sass) grid library.\n/// @group grid\n////\n\n/// @name Import grid library.\n/// @example @import '~microscope-sass/lib/grid';\n\n@import 'responsive';\n@import 'util';\n\n\n///\n$grid-columns-mobile: 4 !default;\n///\n$grid-columns-tablet: 9 !default;\n///\n$grid-columns-laptop: 12 !default;\n///\n$grid-columns-desktop: 12 !default;\n\n///\n$grid-gutter-base: 30px !default;\n///\n$grid-gutter-mobile: $grid-gutter-base !default;\n///\n$grid-gutter-tablet: $grid-gutter-base !default;\n///\n$grid-gutter-laptop: $grid-gutter-base !default;\n///\n$grid-gutter-desktop: $grid-gutter-base !default;\n///\n$grid-row-height: 40px !default;\n\n///\n$grid-container-margin-base: $grid-gutter-base / 2 !default;\n///\n$grid-container-padding-base: 0px !default;\n\n///\n$grid-container-margin: $grid-container-margin-base !default;\n///\n$grid-container-margin-small: $grid-container-margin-base !default;\n///\n$grid-container-margin-big: $grid-container-margin-base !default;\n\n///\n$grid-container-padding: $grid-container-padding-base !default;\n///\n$grid-container-padding-small: $grid-container-padding-base !default;\n///\n$grid-container-padding-big: $grid-container-padding-base !default;\n///\n$grid-container-size: $breakpoint-desktop - 2 * $grid-container-margin !default;\n///\n$grid-container-size-small: 800px !default;\n///\n$grid-container-size-big: 1400px !default;\n\n///\n$grid-margin-0: 5px !default;\n///\n$grid-margin-1: 10px !default;\n///\n$grid-margin-2: 20px !default;\n///\n$grid-margin-3: 30px !default;\n///\n$grid-margin-4: 40px !default;\n///\n$grid-margin-5: 50px !default;\n///\n$grid-margin-6: 60px !default;\n///\n$grid-margin-7: 70px !default;\n///\n$grid-margin-8: 80px !default;\n///\n$grid-margin-9: 90px !default;\n///\n$grid-margin-10: 100px !default;\n\n\n/// Defines a (float/flexbox) container\n/// Note: recommended value for `$clearfix` is 'flex'.\n///\n/// @param {boolean | string} $clearfix [true] - If boolean: whether to use a clearfix, if 'flex': use flexbox.\n/// @param {boolean} $padding [true] - Whether to use container padding.\n@mixin container($clearfix: true, $padding: true) {\n  $max-width-mobile: calc(100% - #{2 * $grid-container-margin});\n  @include responsive(max-width, $max-width-mobile, $max-width-mobile, $max-width-mobile, $grid-container-size);\n  box-sizing: border-box;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n\n  @if $padding == true {\n    @include container-padding;\n  }\n\n  @if $clearfix == true {  // Clearfix.\n    @include clearfix;\n  } @else if $clearfix == 'flex' {  // Flex.\n    display: flex;\n  }\n}\n\n\n/// Can be used in conjunction with container to increase the container's size configuration to \"big\".\n/// Should be applied after container mixin.\n///\n/// @param {boolean} $padding [true] - Whether to use (big) container padding.\n/// @todo Create standalone alternative.\n@mixin container--big($padding: true) {\n  width: calc(100% - #{2 * $grid-container-margin-big});\n  max-width: $grid-container-size-big;\n\n  @if $padding == true {\n    @include container-padding(big);\n  }\n\n  @include desktop { // Override 'normal' container.\n    max-width: $grid-container-size-big;\n  }\n}\n\n\n/// Can be used in conjunction with container to decrease the container's size configuration to \"small\".\n/// Should be applied after container mixin.\n///\n/// @param {boolean} $padding [true] - Whether to use (small) container padding.\n/// @todo Create standalone alternative.\n@mixin container--small() {\n  @include container-padding('small');\n  width: calc(100% - #{2 * $grid-container-margin-small});\n  max-width: $grid-container-size-small;\n\n  @include desktop { // Override 'normal' container\n    max-width: $grid-container-size-small;\n  }\n}\n\n\n/// Adds a \"clearfix\", preventing floating issues.\n/// Note: consider using more modern alternatives to float (flex/grid).\n@mixin clearfix {\n  &:after {\n    clear: both;\n    content: '';\n    display: table;\n  }\n}\n\n\n/// Sets `$grid-container-margin`, `$grid-container-margin-big` or `$grid-container-margin-small` (based on `$size`) to\n/// `$properties`, adding a margin.\n///\n/// @param {string} $size ['normal'] - Container size preset.\n/// @param {list | string} $properties [('margin-left', 'margin-right')] - One or more properties to set.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin container-margin($size: 'normal', $properties: ('margin-left', 'margin-right'), $force: false) {\n  @if $size == big {\n    @if $grid-container-margin != $grid-container-margin-big {\n      @include properties($properties, $grid-container-margin-big, $force)\n    }\n  } @else if $size == small {\n    @if $grid-container-margin != $grid-container-margin-small {\n      @include properties($properties, $grid-container-margin-small, $force)\n    }\n  } @else if $size == normal {\n    @if $grid-container-margin > 0 {\n      @include properties($properties, $grid-container-margin, $force)\n    }\n  }\n}\n\n\n/// Sets `$grid-container-padding`, `$grid-container-padding-big` or `$grid-container-padding-small` (based on `$size`)\n/// to `$properties`, adding a margin.\n///\n/// @param {string} $size ['normal'] - Container size preset.\n/// @param {list | string} $properties [('padding-left', 'padding-right')] - One or more properties to set.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin container-padding($size: normal, $properties: ('padding-left', 'padding-right'), $force: false) {\n  box-sizing: border-box;\n\n  @if $size == big {\n    @if $grid-container-padding != $grid-container-padding-big {\n      @include properties($properties, $grid-container-padding-big, $force)\n    }\n  } @else if $size == small {\n    @if $grid-container-padding != $grid-container-padding-small {\n      @include properties($properties, $grid-container-padding-small, $force)\n\n    }\n  } @else if $size == normal {\n    @if $grid-container-padding > 0 {\n      @include properties($properties, $grid-container-padding, $force)\n    }\n  }\n}\n\n\n/// Compensates for the offset (margin) applied to the container (breaking out of the container).\n///\n/// @param {string} $size ['normal'] - Container size preset.\n/// @param {string} $offset-properties ['margin-left'] - One or more properties to use for offset compensation.\n/// @param {string} $size-properties ['width'] - One or more properties to use for size adjustment.\n/// @param {number} $size-base [100%] - Base size.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin breakout-margin($size: 'normal', $offset-properties: 'margin-left', $size-properties: 'width', $size-base: 100%, $force: false) {\n  @if $size == big {\n    @include breakout($grid-container-margin-big, $offset-properties, $size-properties, $size-base, $force);\n  } @else if $size == small {\n    @include breakout($grid-container-margin-small, $offset-properties, $size-properties, $size-base, $force);\n  } @else if $size == normal {\n    @include breakout($grid-container-margin, $offset-properties, $size-properties, $size-base, $force);\n  }\n}\n\n\n/// Compensates for the offset (padding) applied to the container (breaking out of the container).\n///\n/// @param {string} $size ['normal'] - Container size preset.\n/// @param {string} $offset-properties ['margin-left'] - One or more properties to use for offset compensation.\n/// @param {string} $size-properties ['width'] - One or more properties to use for size adjustment.\n/// @param {number} $size-base [100%] - Base size.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin breakout-padding($size: 'normal', $offset-properties: 'margin-left', $size-properties: 'width', $size-base: 100%, $force: false) {\n  @if $size == big {\n    @include breakout($grid-container-padding-big, $offset-properties, $size-properties, $size-base, $force);\n  } @else if $size == small {\n    @include breakout($grid-container-padding-small, $offset-properties, $size-properties, $size-base, $force);\n  } @else if $size == normal {\n    @include breakout($grid-container-padding, $offset-properties, $size-properties, $size-base, $force);\n  }\n}\n\n\n/// Compensates for the offset applied to the container (breaking out of the container).\n///\n/// @param {number} $amount\n/// @param {string} $offset-properties ['margin-left'] - One or more properties to use for offset compensation.\n/// @param {string} $size-properties ['width'] - One or more properties to use for size adjustment.\n/// @param {number} $size-base [100%] - Base size.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin breakout($amount, $offset-properties: 'margin-left', $size-properties: 'width', $size-base: 100%, $force: false) {\n  @include properties($offset-properties, -$amount, $force);\n  @include properties($size-properties, calc(#{$size-base} + #{2 * $amount}), $force);\n}\n\n\n/// Shorthand for columns-responsive and omega-smart.\n/// Sets columns \"span\" to element and automatically Sets margin-right to 0 if the element is expected to be the last\n/// within a row.\n///\n/// Element is expected to be last if the corresponding span times the \"nth-child\" equals the corresponding \"columns\"\n/// setting. This assumes all columns to have the same span.\n///\n/// Additionally, `clear: left;` is set to the first element after an element found to be the last within a row.\n///\n/// @param {number} $span-mobile - Mobile element span.\n/// @param {number} $span-tablet - Tablet element span.\n/// @param {number} $span-laptop - Laptop element span.\n/// @param {number} $span-desktop - Desktop element span.\n@mixin columns-smart($span-mobile, $span-tablet, $span-laptop, $span-desktop) {\n  @include columns-responsive($span-mobile, $span-tablet, $span-laptop, $span-desktop);\n  @include omega-smart($span-mobile, $span-tablet, $span-laptop, $span-desktop);\n}\n\n\n/// Sets the column span and gutter for each breakpoint preset at once.\n///\n/// @param {number} $span-mobile - Mobile column span.\n/// @param {number} $span-tablet - Tablet column span.\n/// @param {number} $span-laptop - Laptop column span.\n/// @param {number} $span-desktop - Desktop column span.\n/// @param {number} $correction-mobile [0px] - Mobile correction.\n/// @param {number} $correction-tablet [$correction-mobile] - Tablet correction.\n/// @param {number} $correction-laptop [$correction-tablet] - Laptop correction.\n/// @param {number} $correction-desktop [$correction-laptop] - Desktop correction.\n/// @param {list | string} $properties ['width'] - One or more properties to set.\n@mixin columns-responsive($span-mobile, $span-tablet, $span-laptop: $span-tablet, $span-desktop: $span-laptop, $correction-mobile: 0px, $correction-tablet: $correction-mobile, $correction-laptop: $correction-tablet, $correction-desktop: $correction-laptop, $properties: 'width') {\n  $width-mobile: columns($span-mobile, $grid-columns-mobile, $grid-gutter-mobile, $correction-mobile);\n  $width-tablet: columns($span-tablet, $grid-columns-tablet, $grid-gutter-tablet, $correction-tablet);\n  $width-laptop: columns($span-laptop, $grid-columns-laptop, $grid-gutter-laptop, $correction-laptop);\n  $width-desktop: columns($span-desktop, $grid-columns-desktop, $grid-gutter-desktop, $correction-desktop);\n  @include responsive($properties, $width-mobile, $width-tablet, $width-laptop, $width-desktop);\n\n  @include mobile-only {\n    @include columns-layout($grid-gutter-mobile)\n  }\n\n  @include tablet(true) {\n    @include columns-layout($grid-gutter-tablet)\n  }\n\n  @include laptop(true) {\n    @include columns-layout($grid-gutter-laptop)\n  }\n\n  @include desktop {\n    @include columns-layout($grid-gutter-desktop)\n  }\n}\n\n\n/// Sets the column `$span` and `$gutter` for the (mobile) breakpoint breakpoint preset.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $correction [0px] - Correction.\n/// @param {number} $gutter [$grid-gutter-mobile] - Gutter size.\n@mixin columns-mobile($span, $correction: 0px, $gutter: $grid-gutter-mobile) {\n  @include mobile-only {\n    @include columns($span, $grid-columns-mobile, $gutter, auto, width, $correction);\n  }\n}\n\n\n/// Sets the column `$span` and `$gutter` for the (tablet) breakpoint breakpoint preset.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $correction [0px] - Correction.\n/// @param {number} $gutter [$grid-gutter-mobile] - Gutter size.\n@mixin columns-tablet($span, $correction: 0px, $gutter: $grid-gutter-tablet) {\n  @include tablet(true) {\n    @include columns($span, $grid-columns-tablet, $gutter, auto, width, $correction);\n  }\n}\n\n\n/// Sets the column `$span` and `$gutter` for the (laptop) breakpoint breakpoint preset.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $correction [0px] - Correction.\n/// @param {number} $gutter [$grid-gutter-mobile] - Gutter size.\n@mixin columns-laptop($span, $correction: 0px, $gutter: $grid-gutter-laptop) {\n  @include laptop(true) {\n    @include columns($span, $grid-columns-laptop, $gutter, auto, width, $correction);\n  }\n}\n\n\n/// Sets the column `$span` and `$gutter` for the (desktop) breakpoint breakpoint preset.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $correction [0px] - Correction.\n/// @param {number} $gutter [$grid-gutter-mobile] - Gutter size.\n@mixin columns-desktop($span, $correction: 0px, $gutter: $grid-gutter-desktop) {\n  @include desktop() {\n    @include columns($span, $grid-columns-laptop, $gutter, auto, width, $correction);\n  }\n}\n\n\n/// Returns the value for a given (column) $span and $gutter.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $total - Total number of columns within a row.\n/// @param {number} $gutter - Gutter size.\n/// @param {number} $correction [0px] - Correction.\n/// @return {string} - Value calculation.\n@function columns($span, $total, $gutter, $correction: 0px) {\n  @if $span == $total {\n    @return 100%;\n  }\n\n  $gutters: $span - 1;\n  $total_gutters: $total - 1;\n  $total_gutter_width: $total_gutters * $gutter;\n  @return calc((100% - #{$total_gutter_width}) / #{$total / $span} + #{$gutters * $gutter + $correction});\n}\n\n\n/// Sets the column `$span` and `$gutter`.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $total - Total number of columns within a row.\n/// @param {number} $gutter - Gutter size.\n/// @param {string | boolean} $omega ['auto'] - Whether the element is the last column, \"auto\" checks using :last-child.\n/// @param {list | string} $properties ['width'] - One or more properties to set.\n/// @param {number} $correction [0px] - Correction.\n@mixin columns($span, $total, $gutter, $omega: 'auto', $properties: 'width', $correction: 0px) {\n  @include columns-layout($gutter, $omega);\n  @include properties($properties, columns($span, $total, $gutter, $correction));\n}\n\n\n/// Sets the properties required to make a column behave correctly within it's container.\n///\n/// @param {number} $gutter - Gutter size.\n/// @param {string | boolean} $omega ['auto'] - Whether the element is the last column, \"auto\" checks using :last-child.\n@mixin columns-layout($gutter, $omega: auto) {\n  box-sizing: border-box;\n  float: left;\n\n  @if $omega == true {\n    @include omega;\n  } @else if $omega == false {\n    margin-right: $gutter;\n  } @else if $omega == auto {\n    margin-right: $gutter;\n\n    &:last-child {\n      @include omega;\n    }\n  }\n}\n\n\n/// Adds a gutter (space between columns).\n///\n/// @param {list | string} $properties ['margin-right'] - One or more properties to set.\n/// @param {number} $multiplier [1] - The amount of times the gutter size is applied.\n@mixin gutter($properties: 'margin-right', $multiplier: 1) {\n  @include responsive($properties, $grid-gutter-mobile * $multiplier, $grid-gutter-tablet * $multiplier, $grid-gutter-laptop * $multiplier, $grid-gutter-desktop * $multiplier);\n}\n\n\n/// Sets all `$properties` to 0, typically used for clearing gutter margin.\n///\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n@mixin omega($force: false, $properties: 'margin-right') {\n  @include properties($properties, 0, $force);\n}\n\n\n/// Sets all `$properties` to 0 if the element is expected to be the last within a row.\n///\n/// Element is expected to be last if the corresponding \"span\" times the \"nth-child\" equals the corresponding \"columns\"\n/// setting. This assumes all columns to have the same span.\n///\n/// Additionally, `clear: left;` is set to the first element after an element found to be the last within a row.\n/// Adds !important if `$force` equals true.\n///\n/// @param {number} $span-mobile - Mobile element span.\n/// @param {number} $span-tablet - Tablet element span.\n/// @param {number} $span-laptop - Laptop element span.\n/// @param {number} $span-desktop - Desktop element span.\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n@mixin omega-smart($span-mobile, $span-tablet, $span-laptop, $span-desktop, $force: false, $properties: 'margin-right') {\n  @include mobile-only {\n    @include omega-smart-mobile($span-mobile, $force, $properties)\n  }\n  @include tablet(true) {\n    @include omega-smart-tablet($span-tablet, $force, $properties)\n  }\n  @include laptop(true) {\n    @include omega-smart-laptop($span-laptop, $force, $properties)\n  }\n  @include desktop {\n    @include omega-smart-desktop($span-desktop, $force, $properties)\n  }\n}\n\n\n/// Applies `omega-smart` to the (mobile) breakpoint.\n///\n/// @param {number} $span - Column span.\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n/// @see {mixin} omega-smart for usage.\n@mixin omega-smart-mobile($span, $force: false, $properties: 'margin-right') {\n  @include omega-nth($span, $grid-columns-mobile, $force, $properties);\n}\n\n\n/// Applies `omega-smart` to the (tablet) breakpoint.\n///\n/// @param {number} $span - Column span.\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n/// @see {mixin} omega-smart for usage.\n@mixin omega-smart-tablet($span, $force: false, $properties: 'margin-right') {\n  @include omega-nth($span, $grid-columns-tablet, $force, $properties);\n}\n\n\n/// Applies `omega-smart` to the (laptop) breakpoint.\n///\n/// @param {number} $span - Column span.\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n/// @see {mixin} omega-smart for usage.\n@mixin omega-smart-laptop($span, $force: false, $properties: 'margin-right') {\n  @include omega-nth($span, $grid-columns-laptop, $force, $properties);\n}\n\n\n/// Applies `omega-smart` to the (desktop) breakpoint.\n///\n/// @param {number} $span - Column span.\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n/// @see {mixin} omega-smart for usage.\n@mixin omega-smart-desktop($span, $force: false, $properties: 'margin-right') {\n  @include omega-nth($span, $grid-columns-desktop, $force, $properties);\n}\n\n\n/// Applies omega if column is expected to be the last within the row.\n/// Adds !important if `$force` equals true.\n///\n/// @param {number} $span - Column span.\n/// @param {number} $total - Total number of columns within a row.\n/// @param {boolean} $force [false] - Whether to use !important.\n/// @param {list | string} $properties [margin-right] - One or more properties to set.\n@mixin omega-nth($span, $total, $force: false, $properties: 'margin-right') {\n  @if $span == $total {\n    @include omega($force, $properties)\n  } @else {\n    $columns: floor($total / $span);\n\n    &:nth-child(#{$columns}n) {\n      @include omega($force, $properties);\n    }\n\n    &:nth-child(#{$columns}n+1) {\n      clear: left;\n    }\n  }\n}\n\n\n/// Applies row height by setting each value in `$properties` to `$span * $grid-row-height`.\n///\n/// @param {number} $span - Amount of rows.\n/// @param {list | string} $properties [height] - One or more properties to set.\n/// @param {boolean} $force [false] - Whether to use !important.\n@mixin rows($span, $properties: 'height', $force: false) {\n  @include properties($properties, $span * $grid-row-height, $force);\n}\n","$grid-gutter-base: 15px!default;\n\n$grid-row-height: 44px!default;\n\n$grid-container-margin-base: 0px!default;\n$grid-container-padding-base: 16px!default;\n$grid-container-padding-small: 20px!default;\n\n$grid-container-size-big: 100%!default;\n$grid-container-size-small: 770px!default;\n\n$grid-margin-0: 4px!default;\n$grid-margin-1: 8px!default;\n$grid-margin-2: 12px!default;\n$grid-margin-3: 16px!default;\n$grid-margin-4: 24px!default;\n$grid-margin-5: 28px!default;\n$grid-margin-6: 30px!default;  // Yes.\n$grid-margin-7: 36px!default;\n$grid-margin-8: 40px!default;\n$grid-margin-9: 44px!default;\n$grid-margin-10: 50px!default;  // Yes.\n\n"],"names":[],"sourceRoot":""}