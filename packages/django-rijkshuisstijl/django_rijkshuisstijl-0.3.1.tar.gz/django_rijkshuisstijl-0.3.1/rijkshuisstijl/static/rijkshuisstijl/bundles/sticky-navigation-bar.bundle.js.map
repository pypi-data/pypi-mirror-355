{"version":3,"file":"sticky-navigation-bar.bundle.js","mappings":"qcASG,I,EACGA,EAAAA,WAKF,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAEZC,KAAKC,a,QAmBR,O,EAdL,G,EAAA,yBACI,WACIC,OAAOC,iBAAiB,SAAUC,EAASJ,KAAKK,OAAOC,KAAKN,UAC/D,oBAED,WACI,IAAMO,EAAYP,KAAKD,KAAKS,MAAMC,KAAO,EACnCC,EAAMV,KAAKD,KAAKY,iBAAiB,GAAGF,KAAOF,EAC3CK,EAAQC,IAAAA,YAAgBb,KAAKD,KAAMe,EAAAA,IACzCD,IAAAA,eAAmBb,KAAKD,KAAMe,EAAAA,GAAgBJ,IAE1CE,GAASF,GACTR,OAAOa,SAAS,EAAG,S,oEAE1B,EA5BCjB,I,EAgCFkB,EAAAA,G,knBAAgBC,SAAQ,SAAAlB,GAAI,OAAI,IAAID,EAAaC,O,gBC5BrD,SAASK,EAASc,EAAMC,EAAMC,GAC5B,IAAIC,EAASC,EAAMC,EAASC,EAAWC,EAGvC,SAASC,IACP,IAAIC,EAAOC,KAAKC,MAAQL,EAEpBG,EAAOR,GAAQQ,GAAQ,EACzBN,EAAUS,WAAWJ,EAAOP,EAAOQ,IAEnCN,EAAU,KACLD,IACHK,EAASP,EAAKa,MAAMR,EAASD,GAC7BC,EAAUD,EAAO,OAXnB,MAAQH,IAAMA,EAAO,KAgBzB,IAAIa,EAAY,WACdT,EAAUvB,KACVsB,EAAOW,UACPT,EAAYI,KAAKC,MACjB,IAAIK,EAAUd,IAAcC,EAO5B,OANKA,IAASA,EAAUS,WAAWJ,EAAOP,IACtCe,IACFT,EAASP,EAAKa,MAAMR,EAASD,GAC7BC,EAAUD,EAAO,MAGZG,GAoBT,OAjBAO,EAAUG,MAAQ,WACZd,IACFe,aAAaf,GACbA,EAAU,OAIdW,EAAUK,MAAQ,WACZhB,IACFI,EAASP,EAAKa,MAAMR,EAASD,GAC7BC,EAAUD,EAAO,KAEjBc,aAAaf,GACbA,EAAU,OAIPW,EAIT5B,EAASA,SAAWA,EAEpBkC,EAAOC,QAAUnC","sources":["webpack://django-rijkshuisstijl/./rijkshuisstijl/js/components/sticky-detect/sticky-navigation-bar.js","webpack://django-rijkshuisstijl/./node_modules/debounce/index.js"],"sourcesContent":["import BEM from 'bem.js';\n\nimport {MODIFIER_STUCK, STICKY_DETECTS} from './constants';\nimport * as debounce from 'debounce';\n\n\n/**\n * Keeps track of sticky state.\n * @class\n */\nclass StickyDetect {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        window.addEventListener('scroll', debounce(this.update.bind(this)));\n    }\n\n    update() {\n        const threshold = this.node.style.top || 0;\n        const exp = this.node.getClientRects()[0].top <= threshold;\n        const state = BEM.hasModifier(this.node, MODIFIER_STUCK);\n        BEM.toggleModifier(this.node, MODIFIER_STUCK, exp);\n\n        if(!state && exp) {\n            window.scrollBy(0, 10);\n        }\n    }\n}\n\n// Start!\n[...STICKY_DETECTS].forEach(node => new StickyDetect(node));\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n"],"names":["StickyDetect","node","this","bindEvents","window","addEventListener","debounce","update","bind","threshold","style","top","exp","getClientRects","state","BEM","MODIFIER_STUCK","scrollBy","STICKY_DETECTS","forEach","func","wait","immediate","timeout","args","context","timestamp","result","later","last","Date","now","setTimeout","apply","debounced","arguments","callNow","clear","clearTimeout","flush","module","exports"],"sourceRoot":""}