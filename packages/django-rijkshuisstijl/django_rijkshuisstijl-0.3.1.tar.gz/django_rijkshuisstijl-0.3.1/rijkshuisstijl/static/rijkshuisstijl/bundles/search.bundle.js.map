{"version":3,"file":"search.bundle.js","mappings":"uMACaA,EAAe,S,0RCSrB,I,EAAMC,EAAb,WAKI,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAGZC,KAAKC,MAAQC,IAAAA,gBAAoBF,KAAKD,KAAMI,EAAAA,GAAcC,EAAAA,IAG1DJ,KAAKK,cAAgBH,IAAAA,gBAAoBF,KAAKD,KAAMF,GAAc,EDnB1C,WCsBxBG,KAAKM,gBAAkBJ,IAAAA,gBAAoBF,KAAKD,KAAMF,GAAc,EDnB1C,aCqB1BG,KAAKO,a,QAlBb,O,EAAA,G,EAAA,yBAwBI,WACIP,KAAKK,cAAcG,iBAAiB,QAASR,KAAKS,qBAAqBC,KAAKV,OAC5EA,KAAKM,gBAAgBE,iBAAiB,QAASR,KAAKW,uBAAuBD,KAAKV,OAChFA,KAAKC,MAAMO,iBAAiB,OAAQR,KAAKY,OAAOF,KAAKV,OACrDA,KAAKC,MAAMO,iBAAiB,WAAYR,KAAKa,aAAaH,KAAKV,SA5BvE,0BAmCI,SAAac,GAEO,KADAA,EAAEC,UAEdD,EAAEE,iBACEhB,KAAKC,MAAMgB,OACXjB,KAAKC,MAAMiB,KAAKC,YAxChC,kCAmDI,WACQjB,IAAAA,YAAgBF,KAAKD,KAAMqB,EAAAA,KACvBpB,KAAKC,MAAMgB,OACXjB,KAAKC,MAAMiB,KAAKC,SAEpBnB,KAAKC,MAAMoB,SAEXrB,KAAKC,MAAMqB,SA1DvB,oCAmEI,SAAuBR,GACnBA,EAAEE,iBACFhB,KAAKC,MAAMgB,MAAQ,GACnBjB,KAAKC,MAAMoB,UAtEnB,oBA8EI,SAAOP,GACEd,KAAKC,MAAMgB,OAAUH,EAAES,eACxBvB,KAAKwB,UAhFjB,mBAwFI,WACItB,IAAAA,eAAmBF,KAAKD,KAAMqB,EAAAA,S,oEAzFtC,M,EA+FIK,EAAAA,G,knBAAUC,SAAQ,SAAAC,GAAM,OAAI,IAAI7B,EAAO6B","sources":["webpack://django-rijkshuisstijl/./rijkshuisstijl/js/components/button/constants.js","webpack://django-rijkshuisstijl/./rijkshuisstijl/js/components/search/search.js"],"sourcesContent":["/** @const {string} */\nexport const BLOCK_BUTTON = 'button';\n\n/** @const {string} Modifier indicating a primary button. */\nexport const MODIFIER_PRIMARY = 'primary';\n\n/** @const {string} Modifier indicating a secondary button. */\nexport const MODIFIER_SECONDARY = 'secondary';\n","import BEM from 'bem.js';\nimport {BLOCK_BUTTON, MODIFIER_PRIMARY, MODIFIER_SECONDARY} from '../button/constants';\nimport {SEARCHES, BLOCK_SEARCH, ELEMENT_INPUT, MODIFIER_OPEN} from './constants';\n\n\n/**\n * Contains additional logic controlling search widget.\n * NOTE: Open/close behaviour controlled by button (ToggleButton).\n * @class\n */\nexport class Search {\n    /**\n     * Constructor method.\n     * @param {HTMLFormElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLFormElement} */\n        this.node = node;\n\n        /** @type {HTMLInputElement} */\n        this.input = BEM.getChildBEMNode(this.node, BLOCK_SEARCH, ELEMENT_INPUT);\n\n        /** @type {HTMLButtonElement} */\n        this.buttonPrimary = BEM.getChildBEMNode(this.node, BLOCK_BUTTON, false, MODIFIER_PRIMARY);\n\n        /** @type {HTMLButtonElement} */\n        this.buttonSecondary = BEM.getChildBEMNode(this.node, BLOCK_BUTTON, false, MODIFIER_SECONDARY);\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.buttonPrimary.addEventListener('click', this.onClickButtonPrimary.bind(this));\n        this.buttonSecondary.addEventListener('click', this.onClickButtonSecondary.bind(this));\n        this.input.addEventListener('blur', this.onBlur.bind(this));\n        this.input.addEventListener('keypress', this.onPressEnter.bind(this));\n    }\n\n    /**\n     * Callback for keypress event on focused input.\n     * Submits for if the user pressed enter and there is an input value.\n     */\n    onPressEnter(e) {\n        const keyCode = e.keyCode;\n        if (keyCode === 13) {\n            e.preventDefault();\n            if (this.input.value) {\n                this.input.form.submit();\n            }\n        }\n    }\n\n    /**\n     * Callback for click event on this.buttonPrimary.\n     * Submits form if input has value.\n     * Focuses this.input if MODIFIER_OPEN is set on this.node.\n     * Blurs this.input otherwise.\n     */\n    onClickButtonPrimary() {\n        if (BEM.hasModifier(this.node, MODIFIER_OPEN)) {\n            if (this.input.value) {\n                this.input.form.submit();\n            }\n            this.input.focus();\n        } else {\n            this.input.blur();\n        }\n    }\n\n    /**\n     * Callback for click event on this.buttonSecondary.\n     * Clears/focuses this.input.\n     * @param {Event} e\n     */\n    onClickButtonSecondary(e) {\n        e.preventDefault();\n        this.input.value = '';\n        this.input.focus();\n    }\n\n    /**\n     * Callback for blur event on this.input.\n     * Calls this.close() if input does not have value.\n     * @param {Event} e\n     */\n    onBlur(e) {\n        if (!this.input.value && !e.relatedTarget) {\n            this.close();\n        }\n    }\n\n    /**\n     * Additional control for removing MODIFIER_OPEN for this.node.\n     * NOTE: Open/close behaviour controlled by button (ToggleButton).\n     */\n    close() {\n        BEM.removeModifier(this.node, MODIFIER_OPEN);\n    }\n}\n\n\n// Start!\n[...SEARCHES].forEach(search => new Search(search));\n"],"names":["BLOCK_BUTTON","Search","node","this","input","BEM","BLOCK_SEARCH","ELEMENT_INPUT","buttonPrimary","buttonSecondary","bindEvents","addEventListener","onClickButtonPrimary","bind","onClickButtonSecondary","onBlur","onPressEnter","e","keyCode","preventDefault","value","form","submit","MODIFIER_OPEN","focus","blur","relatedTarget","close","SEARCHES","forEach","search"],"sourceRoot":""}