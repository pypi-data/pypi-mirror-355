"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .asninfo import AsnInfo, AsnInfoTypedDict
    from .countryinfo import CountryInfo, CountryInfoTypedDict
    from .errorresponse import ErrorResponse, ErrorResponseTypedDict
    from .geoipresponse import GeoIPResponse, GeoIPResponseTypedDict
    from .get_ip_dataop import (
        GetIPDataRequest,
        GetIPDataRequestTypedDict,
        ResponseGetJSONDataJSONGet,
        ResponseGetJSONDataJSONGetTypedDict,
    )
    from .locationinfo import LocationInfo, LocationInfoTypedDict
    from .validationerror import (
        Loc,
        LocTypedDict,
        ValidationError,
        ValidationErrorTypedDict,
    )

__all__ = [
    "AsnInfo",
    "AsnInfoTypedDict",
    "CountryInfo",
    "CountryInfoTypedDict",
    "ErrorResponse",
    "ErrorResponseTypedDict",
    "GeoIPResponse",
    "GeoIPResponseTypedDict",
    "GetIPDataRequest",
    "GetIPDataRequestTypedDict",
    "Loc",
    "LocTypedDict",
    "LocationInfo",
    "LocationInfoTypedDict",
    "ResponseGetJSONDataJSONGet",
    "ResponseGetJSONDataJSONGetTypedDict",
    "ValidationError",
    "ValidationErrorTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "AsnInfo": ".asninfo",
    "AsnInfoTypedDict": ".asninfo",
    "CountryInfo": ".countryinfo",
    "CountryInfoTypedDict": ".countryinfo",
    "ErrorResponse": ".errorresponse",
    "ErrorResponseTypedDict": ".errorresponse",
    "GeoIPResponse": ".geoipresponse",
    "GeoIPResponseTypedDict": ".geoipresponse",
    "GetIPDataRequest": ".get_ip_dataop",
    "GetIPDataRequestTypedDict": ".get_ip_dataop",
    "ResponseGetJSONDataJSONGet": ".get_ip_dataop",
    "ResponseGetJSONDataJSONGetTypedDict": ".get_ip_dataop",
    "LocationInfo": ".locationinfo",
    "LocationInfoTypedDict": ".locationinfo",
    "Loc": ".validationerror",
    "LocTypedDict": ".validationerror",
    "ValidationError": ".validationerror",
    "ValidationErrorTypedDict": ".validationerror",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
