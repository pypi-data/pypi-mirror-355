"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from geoipapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CountryInfoTypedDict(TypedDict):
    is_eu_member: NotRequired[Nullable[bool]]
    currency_code: NotRequired[Nullable[str]]
    continent: NotRequired[Nullable[str]]
    name: NotRequired[Nullable[str]]
    country_code: NotRequired[Nullable[str]]
    state: NotRequired[Nullable[str]]
    city: NotRequired[Nullable[str]]
    zip: NotRequired[Nullable[str]]
    timezone: NotRequired[Nullable[str]]


class CountryInfo(BaseModel):
    is_eu_member: OptionalNullable[bool] = UNSET

    currency_code: OptionalNullable[str] = UNSET

    continent: OptionalNullable[str] = UNSET

    name: OptionalNullable[str] = UNSET

    country_code: OptionalNullable[str] = UNSET

    state: OptionalNullable[str] = UNSET

    city: OptionalNullable[str] = UNSET

    zip: OptionalNullable[str] = UNSET

    timezone: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "is_eu_member",
            "currency_code",
            "continent",
            "name",
            "country_code",
            "state",
            "city",
            "zip",
            "timezone",
        ]
        nullable_fields = [
            "is_eu_member",
            "currency_code",
            "continent",
            "name",
            "country_code",
            "state",
            "city",
            "zip",
            "timezone",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
