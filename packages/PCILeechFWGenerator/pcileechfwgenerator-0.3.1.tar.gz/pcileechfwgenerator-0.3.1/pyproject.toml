[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pcileechfwgenerator"
dynamic = ["version"]
description = "Generate spoofed PCIe DMA firmware from real donor hardware"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Ramsey McGrath", email = "ramsey@voltcyclone.info"}
]
maintainers = [
    {name = "Ramsey McGrath", email = "ramsey@voltcyclone.info"}
]
keywords = [
    "pcie", "dma", "firmware", "fpga", "hardware", "security", 
    "penetration-testing", "red-team", "xilinx", "vivado"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Console :: Curses",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Hardware",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.9"
dependencies = [
    "psutil>=5.9.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
tui = [
    "textual>=0.45.0",
    "rich>=13.0.0",
    "watchdog>=3.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/ramseymcgrath/PCILeechFWGenerator"
Repository = "https://github.com/ramseymcgrath/PCILeechFWGenerator"
Documentation = "https://github.com/ramseymcgrath/PCILeechFWGenerator/blob/main/README.md"
"Bug Tracker" = "https://github.com/ramseymcgrath/PCILeechFWGenerator/issues"
Changelog = "https://github.com/ramseymcgrath/PCILeechFWGenerator/blob/main/CHANGELOG.md"

[project.scripts]
pcileech-generate = "src.generate_cli:main"
pcileech-tui = "src.tui_cli:main"
pcileech-build = "src.build_cli:main"

[tool.setuptools]
packages = ["src", "src.tui", "src.tui.core", "src.tui.models", "src.scripts"]

[tool.setuptools.dynamic]
version = {attr = "src.__version__.__version__"}

[tool.setuptools.package-data]
"src.tui" = ["styles/*.tcss"]
"src" = ["donor_dump/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | output
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "textual.*",
    "rich.*",
    "psutil.*",
    "watchdog.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
