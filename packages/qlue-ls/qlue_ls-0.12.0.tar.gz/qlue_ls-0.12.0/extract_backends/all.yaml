- name: IMDb
  slug: imdb
  sortKey: C.4
  baseUrl: https://qlever.cs.uni-freiburg.de/api/imdb
  apiToken: ''
  isDefault: 'False'
  isNoSlugMode: 'False'
  maxDefault: '100'
  filteredLanguage: en
  dynamicSuggestions: '2'
  defaultModeTimeout: '5.0'
  mixedModeTimeout: '1.0'
  suggestSubjects: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #

    %WARMUP_QUERY_1%

    # ELSE #

    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { %WARMUP_QUERY_2% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER (REGEX(?alias, "^\"%CURRENT_WORD%") || REGEX(?alias, "^<%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #
  suggestPredicates: |-
    %PREFIXES%
    # IF !CURRENT_SUBJECT_VARIABLE #

    SELECT ?qleverui_entity
                  (MIN(?name) as ?qleverui_name)
                  (MIN(?alias) as ?qleverui_alias)
                  (SAMPLE(?count_2) as ?qleverui_count)
                  ?qleverui_reversed WHERE {

      { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)
        WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }
        GROUP BY ?qleverui_entity }
      BIND (0 AS ?qleverui_reversed) }
      UNION
      { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)
        WHERE { ?qleverui_tmp ?qleverui_entity %CURRENT_SUBJECT%  }
        GROUP BY ?qleverui_entity }
        BIND (1 AS ?qleverui_reversed) }
      { %WARMUP_QUERY_5% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(?alias, "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)

    # ENDIF #
    # IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #

    SELECT ?qleverui_entity
                  (MIN(?name) as ?qleverui_name)
                  (MIN(?alias) as ?qleverui_alias)
                  (SAMPLE(?count_1) as ?qleverui_count) WHERE {
      { %WARMUP_QUERY_4% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(?alias, "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #

    # IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #

    SELECT ?qleverui_entity
                  (MIN(?name) as ?qleverui_name)
                  (MIN(?alias) as ?qleverui_alias)
                  (SAMPLE(?count_2) as ?qleverui_count) WHERE {
      { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count_2)
        WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity ?object }
        GROUP BY ?qleverui_entity }
      { %WARMUP_QUERY_5% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(?alias, "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #
  suggestObjects: |-
    %PREFIXES%
    SELECT ?qleverui_entity
                  (MIN(?name) AS ?qleverui_name)
                  (MIN(?alias) AS ?qleverui_alias)
                  (MAX(?count_1) AS ?qleverui_count) WHERE {
      {

        { SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
          { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1) WHERE {
            %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity .
          } GROUP BY ?qleverui_entity }
          { %WARMUP_QUERY_3% }
          # IF !CURRENT_WORD_EMPTY #
          FILTER (REGEX(?alias, "^\"%CURRENT_WORD%") || REGEX(?alias, "^<%CURRENT_WORD%"))
          # ENDIF #
        } }

      } UNION {

        { SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
          { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1) WHERE {
            %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity
          } GROUP BY ?qleverui_entity }
          %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(?alias, "^%CURRENT_WORD%")
          # ENDIF #
        } }

      }
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  subjectName: ''
  alternativeSubjectName: ''
  predicateName: ''
  alternativePredicateName: ''
  objectName: ''
  alternativeObjectName: ''
  replacePredicates: ''
  supportedKeywords: as,ask,base,bind,by,construct,contains-entity,contains-word,data,datatype,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with
  supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound
  supportedPredicateSuggestions: ''
  suggestPrefixnamesForPredicates: 'True'
  fillPrefixes: 'True'
  filterEntities: 'False'
  suggestedPrefixes: |-
    PREFIX imdb: <https://www.imdb.com/>
    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
  suggestionEntityVariable: ?qleverui_entity
  suggestionNameVariable: ?qleverui_name
  suggestionAltNameVariable: ?qleverui_alias
  suggestionReversedVariable: ?qleverui_reversed
  frequentPredicates: ''
  frequentPatternsWithoutOrder: ''
  entityNameAndAliasPattern: ?qleverui_entity imdb:title ?name . BIND(?name AS ?alias)
  entityScorePattern: ?qleverui_entity imdb:numVotes ?count .
  predicateNameAndAliasPatternWithoutContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  entityNameAndAliasPatternDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithoutContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  warmupQuery1: |-
    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN% }
      ORDER BY ?qleverui_entity }
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  warmupQuery2: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } ORDER BY ?alias
  warmupQuery3: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } ORDER BY ?qleverui_entity
  warmupQuery4: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT% .
        FILTER (?qleverui_entity != <QLever-internal-function/langtag>)
      } UNION {
        { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT% .
        FILTER (?qleverui_entity != <QLever-internal-function/langtag>)
      } }
  warmupQuery5: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT% .
        FILTER (?qleverui_entity != <QLever-internal-function/langtag>)
      } UNION {
        { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% .
        FILTER (?qleverui_entity != <QLever-internal-function/langtag>)
      } }
  suggestSubjectsContextInsensitive: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #

    %WARMUP_QUERY_1%

    # ELSE #

    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { %WARMUP_QUERY_2% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER (REGEX(?alias, "^\"%CURRENT_WORD%") || REGEX(?alias, "^<%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #
  suggestPredicatesContextInsensitive: |-
    %PREFIXES%

    SELECT ?qleverui_entity
                  (MIN(?name) as ?qleverui_name)
                  (MIN(?alias) as ?qleverui_alias)
                  (SAMPLE(?count_1) as ?qleverui_count) WHERE {
      { %WARMUP_QUERY_4% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(?alias, "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  suggestObjectsContextInsensitive: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #

    %WARMUP_QUERY_1%

    # ELSE #

    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { %WARMUP_QUERY_2% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER (REGEX(?alias, "^\"%CURRENT_WORD%") || REGEX(?alias, "^<%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #
  mapViewBaseURL: ''
- name: DBLP
  slug: dblp
  sortKey: C.1
  baseUrl: https://qlever.cs.uni-freiburg.de/api/dblp
  apiToken: ''
  isDefault: 'False'
  isNoSlugMode: 'False'
  maxDefault: '100'
  filteredLanguage: en
  dynamicSuggestions: '2'
  defaultModeTimeout: '5.0'
  mixedModeTimeout: '1.0'
  suggestSubjects: |-
    %PREFIXES%
    SELECT ?qui_entity (?qui_alias AS ?qui_name) ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity ?qui_alias ?qui_count WHERE {
        { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:publishedIn ?qui_entity } GROUP BY ?qui_entity } BIND(?qui_entity AS ?qui_alias) } UNION
        { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:authoredBy ?qui_entity } GROUP BY ?qui_entity } ?qui_entity rdfs:label ?qui_alias } UNION
        { { SELECT ?qui_entity (COUNT(?author) AS ?qui_count) WHERE { ?qui_entity dblp:authoredBy ?author } GROUP BY ?qui_entity } ?qui_entity dblp:title ?qui_alias }
      } INTERNAL SORT BY ?qui_alias }
      FILTER REGEX(STR(?qui_alias), "^%CURRENT_WORD%")
    } ORDER BY DESC(?qui_count)
  suggestPredicates: |-
    %PREFIXES%
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count ?qui_reversed WHERE {
      # IF !CURRENT_SUBJECT_VARIABLE #
      { { SELECT ?qui_entity (COUNT(?qui_object) AS ?qui_count)
        WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }
      UNION
      { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?qui_count)
        WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }
        GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }
      # ENDIF #
      # IF CURRENT_SUBJECT_VARIABLE AND CONNECTED_TRIPLES_EMPTY #
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)
      # ENDIF #
      # IF CURRENT_SUBJECT_VARIABLE AND !CONNECTED_TRIPLES_EMPTY #
      { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?qui_count)
        WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)
      # ENDIF #
      BIND (?qui_entity AS ?qui_name)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_name), "%CURRENT_WORD%", "i")
      # ENDIF #
    } ORDER BY DESC(?qui_count)
  suggestObjects: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {
        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdfs:label ?qui_alias }
      BIND (COALESCE(?qui_alias, ?qui_entity) AS ?qui_name)
    } ORDER BY DESC(?qui_count)
    # ELSE #
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {
        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdfs:label ?qui_alias }
      BIND (?qui_entity AS ?qui_name)
      FILTER (REGEX(STR(?qui_name), "^%CURRENT_WORD%") || REGEX(STR(?qui_alias), "^%CURRENT_WORD%"))
    } ORDER BY DESC(?qui_count)
    # ENDIF #
  subjectName: ''
  alternativeSubjectName: ''
  predicateName: ''
  alternativePredicateName: ''
  objectName: ''
  alternativeObjectName: ''
  replacePredicates: ''
  supportedKeywords: as,ask,base,bind,by,construct,contains-entity,contains-word,data,datatype,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with
  supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound
  supportedPredicateSuggestions: ''
  suggestPrefixnamesForPredicates: 'True'
  fillPrefixes: 'True'
  filterEntities: 'False'
  suggestedPrefixes: |-
    PREFIX dblps: <https://dblp.org/rdf/schema-2020-07-01#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX wdt: <http://www.wikidata.org/prop/direct/>
    PREFIX dblp: <https://dblp.org/rdf/schema#>
    PREFIX datacite: <http://purl.org/spar/datacite/>
    PREFIX literal: <http://purl.org/spar/literal/>
    PREFIX owl: <http://www.w3.org/2002/07/owl#>
    PREFIX terms: <http://purl.org/dc/terms/>
    PREFIX cito: <http://purl.org/spar/cito/>
    PREFIX bibtex: <http://purl.org/net/nknouf/ns/bibtex#>
    PREFIX wdt: <http://www.wikidata.org/prop/direct/>
    PREFIX wd: <http://www.wikidata.org/entity/>
    PREFIX wikibase: <http://wikiba.se/ontology#>
    PREFIX schema: <http://schema.org/>
    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
  suggestionEntityVariable: ?qui_entity
  suggestionNameVariable: ?qui_name
  suggestionAltNameVariable: ?qui_alias
  suggestionReversedVariable: ?qui_reversed
  frequentPredicates: rdfs:label dblp:authoredBy
  frequentPatternsWithoutOrder: ''
  entityNameAndAliasPattern: ?qui_entity rdfs:label ?alias
  entityScorePattern: '{ SELECT ?qui_entity ?name (COUNT(?qui_tmp) AS ?count) WHERE { ?qui_entity @en@rdfs:label ?name . ?qui_entity ?predicate ?qui_tmp } GROUP BY ?qui_entity ?name }'
  predicateNameAndAliasPatternWithoutContext: BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
  predicateNameAndAliasPatternWithContext: BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
  entityNameAndAliasPatternDefault: BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
  predicateNameAndAliasPatternWithoutContextDefault: BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
  predicateNameAndAliasPatternWithContextDefault: BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
  warmupQuery1: |-
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?predicate) AS ?qui_count) WHERE { ?qui_entity ?predicate ?qui_tmp } GROUP BY ?qui_entity }
      ?qui_entity rdfs:label ?qui_name .
      BIND (?qui_name AS ?qui_alias)
    } ORDER BY DESC(?qui_count)
  warmupQuery2: |-
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?predicate) AS ?qui_count) WHERE { ?qui_entity ?predicate ?qui_tmp } GROUP BY ?qui_entity }
      ?qui_entity rdfs:label ?qui_name .
      BIND (?qui_name AS ?qui_alias)
    } INTERNAL SORT BY ?qui_alias
  warmupQuery3: |-
    SELECT ?qui_entity (COALESCE(?qui_name_tmp, ?qui_entity) AS ?qui_name) (?qui_name AS ?qui_alias) ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(DISTINCT ?qui_tmp_1) AS ?qui_count) WHERE { ?qui_tmp_1 ?qui_entity ?qui_tmp_2 } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdfs:label ?qui_name_tmp }
    } ORDER BY DESC(?qui_count)
  warmupQuery4: |-
    SELECT ?qui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%
      } UNION {
      { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%
      } } }
  warmupQuery5: |-
    SELECT ?qui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%
      } UNION {
      { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%
      } } }
  suggestSubjectsContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity (?qui_alias AS ?qui_name) ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity ?qui_alias ?qui_count WHERE {
        { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:publishedIn ?qui_entity } GROUP BY ?qui_entity } BIND(?qui_entity AS ?qui_alias) } UNION
        { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:authoredBy ?qui_entity } GROUP BY ?qui_entity } ?qui_entity rdfs:label ?qui_alias } UNION
        { { SELECT ?qui_entity (COUNT(?author) AS ?qui_count) WHERE { ?qui_entity dblp:authoredBy ?author } GROUP BY ?qui_entity } ?qui_entity dblp:title ?qui_alias }
      } INTERNAL SORT BY ?qui_alias }
      FILTER REGEX(STR(?qui_alias), "^%CURRENT_WORD%")
    } ORDER BY DESC(?qui_count)
  suggestPredicatesContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)
      BIND (?qui_entity AS ?qui_name)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_name), "%CURRENT_WORD%", "i")
      # ENDIF #
    } ORDER BY DESC(?qui_count)
  suggestObjectsContextInsensitive: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {
        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdfs:label ?qui_alias }
      BIND (COALESCE(?qui_alias, ?qui_entity) AS ?qui_name)
    } ORDER BY DESC(?qui_count)
    # ELSE #
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {
        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdfs:label ?qui_alias }
      BIND (?qui_entity AS ?qui_name)
      FILTER (REGEX(STR(?qui_name), "^%CURRENT_WORD%") || REGEX(STR(?qui_alias), "^%CURRENT_WORD%"))
    } ORDER BY DESC(?qui_count)
    # ENDIF #
  mapViewBaseURL: ''
- name: PubChem
  slug: pubchem
  sortKey: B.5
  baseUrl: https://qlever.cs.uni-freiburg.de/api/pubchem
  apiToken: ''
  isDefault: 'False'
  isNoSlugMode: 'False'
  maxDefault: '100'
  filteredLanguage: en
  dynamicSuggestions: '2'
  defaultModeTimeout: '5.0'
  mixedModeTimeout: '3.0'
  suggestSubjects: |-
    %PREFIXES%
    # IF !CURRENT_WORD_EMPTY #

    SELECT ?qui_entity ?qui_name ?qui_alias WHERE {
      ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name ]
      BIND (?qui_name AS ?qui_alias)
      FILTER REGEX(STR(?qui_name), "^%CURRENT_WORD%")
    } ORDER BY ASC(?qui_name)

    # ENDIF #
  suggestPredicates: |-
    %PREFIXES%
    # IF !CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (SAMPLE(?qui_name_) AS ?qui_name) (SAMPLE(?qui_alias_) AS ?qui_alias) ?qui_count ?qui_reversed WHERE {
      { { SELECT ?qui_entity (COUNT(?qui_object) AS ?qui_count)
        WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }
      UNION
      { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?qui_count)
        WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }
        GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }
      OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }
      BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name_)
      BIND (?qui_name_ AS ?qui_alias_)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_alias_), "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qui_entity ?qui_count ?qui_reversed ORDER BY DESC(?qui_count)

    # ENDIF #
    # IF CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (SAMPLE(?qui_name_) AS ?qui_name) (SAMPLE(?qui_alias_) AS ?qui_alias) ?qui_count WHERE {
      # IF CONNECTED_TRIPLES_EMPTY #
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # ELSE #
      { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?qui_count)
        WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # ENDIF #
      OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }
      BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name_)
      BIND (?qui_name_ AS ?qui_alias_)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_alias_), "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qui_entity ?qui_count ORDER BY DESC(?qui_count)

    # ENDIF #
  suggestObjects: |-
    %PREFIXES%
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {
        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name_or_null ] }
      OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }
      BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)
      BIND (?qui_name AS ?qui_alias)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_name), "^%CURRENT_WORD%")
      # ENDIF #
    } ORDER BY DESC(?qui_count)
  subjectName: ?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .
  alternativeSubjectName: ''
  predicateName: ?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .
  alternativePredicateName: ''
  objectName: ?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .
  alternativeObjectName: ''
  replacePredicates: ''
  supportedKeywords: as,ask,base,bind,by,construct,contains-entity,contains-word,data,datatype,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with
  supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound, from, named, graph
  supportedPredicateSuggestions: ''
  suggestPrefixnamesForPredicates: 'True'
  fillPrefixes: 'True'
  filterEntities: 'False'
  suggestedPrefixes: |-
    @prefix bao: <http://www.bioassayontology.org/bao#> .
    @prefix bioassay: <http://rdf.ncbi.nlm.nih.gov/pubchem/bioassay/> .
    @prefix bp: <http://www.biopax.org/release/biopax-level3.owl#> .
    @prefix chemblchembl: <http://linkedchemistry.info/chembl/chemblid/> .
    @prefix chembl: <http://rdf.ebi.ac.uk/resource/chembl/molecule/> .
    @prefix cell: <http://rdf.ncbi.nlm.nih.gov/pubchem/cell/> .
    @prefix cito: <http://purl.org/spar/cito/> .
    @prefix compound: <http://rdf.ncbi.nlm.nih.gov/pubchem/compound/> .
    @prefix concept: <http://rdf.ncbi.nlm.nih.gov/pubchem/concept/> .
    @prefix conserveddomain: <http://rdf.ncbi.nlm.nih.gov/pubchem/conserveddomain/> .
    @prefix dcterms: <http://purl.org/dc/terms/> .
    @prefix descriptor: <http://rdf.ncbi.nlm.nih.gov/pubchem/descriptor/> .
    @prefix disease: <http://rdf.ncbi.nlm.nih.gov/pubchem/disease/> .
    @prefix endpoint: <http://rdf.ncbi.nlm.nih.gov/pubchem/endpoint/> .
    @prefix ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/> .
    @prefix fabio: <http://purl.org/spar/fabio/> .
    @prefix foaf: <http://xmlns.com/foaf/0.1/> .
    @prefix freq: <http://purl.org/cld/freq/> .
    @prefix gene: <http://rdf.ncbi.nlm.nih.gov/pubchem/gene/> .
    @prefix : <http://rdf.ncbi.nlm.nih.gov/pubchem/void.ttl#> .
    @prefix inchikey: <http://rdf.ncbi.nlm.nih.gov/pubchem/inchikey/> .
    @prefix measuregroup: <http://rdf.ncbi.nlm.nih.gov/pubchem/measuregroup/> .
    @prefix mesh: <http://id.nlm.nih.gov/mesh/> .
    @prefix nci: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#> .
    @prefix ns0: <http://data.epo.org/linked-data/def/patent/> .
    @prefix obo: <http://purl.obolibrary.org/obo/> .
    @prefix owl: <http://www.w3.org/2002/07/owl#> .
    @prefix patentcpc: <http://rdf.ncbi.nlm.nih.gov/pubchem/patentcpc/> .
    @prefix patent: <http://rdf.ncbi.nlm.nih.gov/pubchem/patent/> .
    @prefix patentipc: <http://rdf.ncbi.nlm.nih.gov/pubchem/patentipc/> .
    @prefix pathway: <http://rdf.ncbi.nlm.nih.gov/pubchem/pathway/> .
    @prefix pav: <http://purl.org/pav/> .
    @prefix pav: <http://purl.org/pav/2.0/> .
    @prefix pdbo: <http://rdf.wwpdb.org/schema/pdbx-v40.owl#> .
    @prefix protein: <http://rdf.ncbi.nlm.nih.gov/pubchem/protein/> .
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix reactome: <http://identifiers.org/reactome/> .
    @prefix reference: <http://rdf.ncbi.nlm.nih.gov/pubchem/reference/> .
    @prefix sio: <http://semanticscience.org/resource/> .
    @prefix skos: <http://www.w3.org/2004/02/skos/core#> .
    @prefix source: <http://rdf.ncbi.nlm.nih.gov/pubchem/source/> .
    @prefix substance: <http://rdf.ncbi.nlm.nih.gov/pubchem/substance/> .
    @prefix synonym: <http://rdf.ncbi.nlm.nih.gov/pubchem/synonym/> .
    @prefix taxonomy: <http://rdf.ncbi.nlm.nih.gov/pubchem/taxonomy> .
    @prefix uniprot: <http://purl.uniprot.org/uniprot/> .
    @prefix up: <http://purl.uniprot.org/core/> .
    @prefix vcard2006: <http://www.w3.org/2006/vcard/ns#> .
    @prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
    @prefix vocab: <http://rdf.ncbi.nlm.nih.gov/pubchem/vocabulary#> .
    @prefix void: <http://rdfs.org/ns/void#> .
    @prefix wikidata: <http://www.wikidata.org/entity/> .
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
  suggestionEntityVariable: ?qui_entity
  suggestionNameVariable: ?qui_name
  suggestionAltNameVariable: ?qui_alias
  suggestionReversedVariable: ?qui_reversed
  frequentPredicates: '#rdfs:label #dcterms:title'
  frequentPatternsWithoutOrder: ''
  entityNameAndAliasPattern: |-
    { { ?qleverui_entity rdf:type ?qleverui_type . ?qleverui_type obo:IAO_0000412 obo:chebi.owl . ?qleverui_type rdfs:label ?name } UNION { ?qleverui_entity rdfs:label ?name } BIND(?name AS ?alias) }
    UNION
    { { ?qleverui_entity rdf:type ?qleverui_type . ?qleverui_type obo:IAO_0000412 obo:chebi.owl . ?qleverui_type rdfs:label ?name } UNION { ?qleverui_entity rdfs:label ?name } ?qleverui_entity sio:SIO_000008 ?qleverui_synonym . ?qleverui_synonym rdf:type sio:CHEMINF_000339 . ?qleverui_synonym sio:SIO_000300 ?alias }
  entityScorePattern: |-
    { SELECT ?qleverui_entity (COUNT(?qleverui_synonym) AS ?count) WHERE {
      { ?qleverui_entity sio:SIO_000008 ?qleverui_synonym . ?qleverui_synonym rdf:type sio:CHEMINF_000339 }
      UNION
      { ?qleverui_entity rdfs:label ?qleverui_synonym }
    } GROUP BY ?qleverui_entity }
  predicateNameAndAliasPatternWithoutContext: ?qleverui_entity rdfs:label ?name . BIND(?name AS ?alias)
  predicateNameAndAliasPatternWithContext: ?qleverui_entity rdfs:label ?name . BIND(?name AS ?alias)
  entityNameAndAliasPatternDefault: BIND(STR(?qleverui_entity) AS ?name) BIND(?name AS ?alias)
  predicateNameAndAliasPatternWithoutContextDefault: BIND(?qleverui_entity AS ?name) BIND(?name AS ?alias)
  predicateNameAndAliasPatternWithContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  warmupQuery1: |-
    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN% }
      ORDER BY ?qleverui_entity }
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  warmupQuery2: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?alias
  warmupQuery3: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?qleverui_entity
  warmupQuery4: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
      OPTIONAL { %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT% }
      OPTIONAL {
        { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% }
    }
  warmupQuery5: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
      OPTIONAL { %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT% }
      OPTIONAL {
        { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% }
    }
  suggestSubjectsContextInsensitive: |-
    %PREFIXES%
    # IF !CURRENT_WORD_EMPTY #

    SELECT ?qui_entity ?qui_name ?qui_alias WHERE {
      ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name ]
      BIND (?qui_name AS ?qui_alias)
      FILTER REGEX(STR(?qui_name), "^%CURRENT_WORD%")
    } ORDER BY ASC(?qui_name)

    # ENDIF #
  suggestPredicatesContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }
      BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)
      BIND (?qui_name AS ?qui_alias)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_alias), "%CURRENT_WORD%", "i")
      # ENDIF #
    } ORDER BY DESC(?qui_count)
  suggestObjectsContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {
        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      OPTIONAL { ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name_or_null ] }
      OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }
      BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)
      BIND (?qui_name AS ?qui_alias)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_name), "^%CURRENT_WORD%")
      # ENDIF #
    } ORDER BY DESC(?qui_count)
  mapViewBaseURL: ''
- name: UniProt
  slug: uniprot
  sortKey: B.4
  baseUrl: https://qlever.cs.uni-freiburg.de/api/uniprot
  apiToken: aof4Ad
  isDefault: 'False'
  isNoSlugMode: 'False'
  maxDefault: '100'
  filteredLanguage: en
  dynamicSuggestions: '2'
  defaultModeTimeout: '30.0'
  mixedModeTimeout: '1.0'
  suggestSubjects: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #

    # ELSE #

    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { %WARMUP_QUERY_2% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #
  suggestPredicates: |-
    %PREFIXES%
    # IF !CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (MIN(?name) as ?qui_name) (MIN(?alias) as ?qui_alias) (SAMPLE(?count_2) as ?qui_count) ?qui_reversed WHERE {
      { { SELECT ?qui_entity (COUNT(?qui_tmp) AS ?count_2)
        WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_tmp  }
        GROUP BY ?qui_entity }
      BIND (0 AS ?qui_reversed) }
      UNION
      { { SELECT ?qui_entity (COUNT(?qui_tmp) AS ?count_2)
        WHERE { ?qui_tmp ?qui_entity %CURRENT_SUBJECT%  }
        GROUP BY ?qui_entity }
        BIND (1 AS ?qui_reversed) }
      { %WARMUP_QUERY_5% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_entity), "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)

    # ENDIF #
    # IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_entity), "%CURRENT_WORD%", "i")
      # ENDIF #
    } ORDER BY DESC(?qui_count)

    # ENDIF #

    # IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)
        WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_entity), "%CURRENT_WORD%", "i")
      # ENDIF #
    } ORDER BY DESC(?qui_count)

    # ENDIF #
  suggestObjects: |-
    %PREFIXES%
    SELECT ?qui_entity (MIN(?name) AS ?qui_name) (MIN(?alias) AS ?qui_alias) (MAX(?count) AS ?qui_count) WHERE {
      {
        { SELECT ?qui_entity ?name ?alias ?count WHERE {
          { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
            # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
            %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity
          } GROUP BY ?qui_entity }
          ?qui_entity rdfs:label ?name BIND(?name AS ?alias)
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
          # ENDIF #
        } }
      } UNION {
       { SELECT ?qui_entity ?name ?alias ?count WHERE {
          { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
            # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
            %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity
          } GROUP BY ?qui_entity }
          ?qui_entity up:scientificName ?name BIND(?name AS ?alias)
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
          # ENDIF #
        } }
      } UNION {
        { SELECT ?qui_entity ?name ?alias ?count WHERE {
          { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
            # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
            %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity
          } GROUP BY ?qui_entity }
          BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
          # ENDIF #
        } }
      }
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  subjectName: ?qleverui_entity up:scientificName ?qleverui_name
  alternativeSubjectName: ''
  predicateName: ''
  alternativePredicateName: ''
  objectName: ?qleverui_entity up:scientificName ?qleverui_name
  alternativeObjectName: ''
  replacePredicates: ''
  supportedKeywords: as,ask,base,bind,by,construct,contains-entity,contains-word,data,datatype,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with
  supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound
  supportedPredicateSuggestions: ''
  suggestPrefixnamesForPredicates: 'True'
  fillPrefixes: 'True'
  filterEntities: 'False'
  suggestedPrefixes: |-
    @prefix annotation: <http://purl.uniprot.org/annotation/> .
    @prefix bibo:  <http://purl.org/ontology/bibo/> .
    @prefix busco: <http://busco.ezlab.org/schema#> .
    @prefix chebi: <http://purl.obolibrary.org/obo/CHEBI_> .
    @prefix citation: <http://purl.uniprot.org/citations/> .
    @prefix cito:  <http://purl.org/spar/cito/> .
    @prefix dcat:  <http://www.w3.org/ns/dcat#> .
    @prefix dcmit: <http://purl.org/dc/dcmitype/> .
    @prefix dcterms: <http://purl.org/dc/terms/> .
    @prefix disease: <http://purl.uniprot.org/diseases/> .
    @prefix ECO:   <http://purl.obolibrary.org/obo/ECO_> .
    @prefix embl-cds: <http://purl.uniprot.org/embl-cds/> .
    @prefix ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/> .
    @prefix enzyme: <http://purl.uniprot.org/enzyme/> .
    @prefix faldo: <http://biohackathon.org/resource/faldo#> .
    @prefix foaf:  <http://xmlns.com/foaf/0.1/> .
    @prefix go:    <http://purl.obolibrary.org/obo/GO_> .
    @prefix hs:    <https://hamap.expasy.org/rdf/vocab#> .
    @prefix isoform: <http://purl.uniprot.org/isoforms/> .
    @prefix keywords: <http://purl.uniprot.org/keywords/> .
    @prefix location: <http://purl.uniprot.org/locations/> .
    @prefix obo:   <http://purl.obolibrary.org/obo/> .
    @prefix oboInOwl: <http://www.geneontology.org/formats/oboInOwl#> .
    @prefix owl:   <http://www.w3.org/2002/07/owl#> .
    @prefix patent: <http://purl.uniprot.org/EPO/> .
    @prefix pav:   <http://purl.org/pav/> .
    @prefix position: <http://purl.uniprot.org/position/> .
    @prefix prism: <http://prismstandard.org/namespaces/basic/2.0/> .
    @prefix pubmed: <http://purl.uniprot.org/pubmed/> .
    @prefix range: <http://purl.uniprot.org/range/> .
    @prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix rh:    <http://rdf.rhea-db.org/> .
    @prefix schema: <http://schema.org/> .
    @prefix sd:    <http://www.w3.org/ns/sparql-service-description#> .
    @prefix sh:    <http://www.w3.org/ns/shacl#> .
    @prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
    @prefix sp:    <http://spinrdf.org/sp#> .
    @prefix ssmRegion: <http://purl.uniprot.org/signatureSequenceMatch/> .
    @prefix stato: <http://purl.obolibrary.org/obo/STATO_> .
    @prefix taxon: <http://purl.uniprot.org/taxonomy/> .
    @prefix tissue: <http://purl.uniprot.org/tissues/> .
    @prefix uniparc: <http://purl.uniprot.org/uniparc/> .
    @prefix uniprot: <http://purl.uniprot.org/uniprot/> .
    @prefix up:    <http://purl.uniprot.org/core/> .
    @prefix voag:  <http://voag.linkedmodel.org/schema/voag#> .
    @prefix void:  <http://rdfs.org/ns/void#> .
    @prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
  suggestionEntityVariable: ?qui_entity
  suggestionNameVariable: ?qui_name
  suggestionAltNameVariable: ?qui_alias
  suggestionReversedVariable: ?qui_reversed
  frequentPredicates: ''
  frequentPatternsWithoutOrder: rdfs:label
  entityNameAndAliasPattern: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  entityScorePattern: '{ SELECT ?qleverui_entity (COUNT(?predicate) AS ?count) WHERE { ?qleverui_entity ?predicate ?object } GROUP BY ?qleverui_entity }'
  predicateNameAndAliasPatternWithoutContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  entityNameAndAliasPatternDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithoutContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  warmupQuery1: |-
    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN% }
      ORDER BY ?qleverui_entity }
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  warmupQuery2: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?alias
  warmupQuery3: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?qleverui_entity
  warmupQuery4: |-
    SELECT ?qui_entity ?name ?alias ?count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }
      BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
    }
  warmupQuery5: |-
    SELECT ?qui_entity ?name ?alias ?count WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }
      BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
    }
  suggestSubjectsContextInsensitive: |-
    %PREFIXES%
    # IF CURRENT_WORD_EMPTY #

    # ELSE #

    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { %WARMUP_QUERY_2% }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
      # ENDIF #
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

    # ENDIF #
  suggestPredicatesContextInsensitive: |-
    %PREFIXES%

    SELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?qui_entity), "%CURRENT_WORD%", "i")
      # ENDIF #
    } ORDER BY DESC(?qleverui_count)
  suggestObjectsContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity (MIN(?name) AS ?qui_name) (MIN(?alias) AS ?qui_alias) (MAX(?count) AS ?qui_count) WHERE {
      {
        { SELECT ?qui_entity ?name ?alias ?count WHERE {
          { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
            %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity
          } GROUP BY ?qui_entity }
          ?qui_entity rdfs:label ?name BIND(?name AS ?alias)
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
          # ENDIF #
        } }
      } UNION {
       { SELECT ?qui_entity ?name ?alias ?count WHERE {
          { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
            %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity
          } GROUP BY ?qui_entity }
          ?qui_entity up:scientificName ?name BIND(?name AS ?alias)
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
          # ENDIF #
        } }
      } UNION {
        { SELECT ?qui_entity ?name ?alias ?count WHERE {
          { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
            %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity
          } GROUP BY ?qui_entity }
          BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)
          # IF !CURRENT_WORD_EMPTY #
          FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
          # ENDIF #
        } }
      }
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  mapViewBaseURL: ''
- name: OSM Planet
  slug: osm-planet
  sortKey: B.2
  baseUrl: https://qlever.cs.uni-freiburg.de/api/osm-planet
  apiToken: aof4Ad
  isDefault: 'False'
  isNoSlugMode: 'False'
  maxDefault: '100'
  filteredLanguage: en
  dynamicSuggestions: '2'
  defaultModeTimeout: '10.0'
  mixedModeTimeout: '3.0'
  suggestSubjects: |-
    %PREFIXES%
    # IF !CURRENT_WORD_EMPTY #
    SELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?count) AS ?qui_count) WHERE {
      { { SELECT ?qui_entity ?name ?alias WHERE {
          { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), "^%CURRENT_WORD%") } UNION
          { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), "^%CURRENT_WORD%") } } }
        ?qui_entity rdf:type osm:relation . ?qui_entity osm2rdf:area ?count }
        UNION
        { { SELECT ?qui_entity ?name ?alias WHERE {
          { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), "^%CURRENT_WORD%") } UNION
          { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), "^%CURRENT_WORD%") } } }
        { SELECT ?qui_entity (10 * SUM(?length) AS ?count)
          WHERE { ?qui_entity osmkey:waterway "river" .
                         ?qui_entity osmrel:member/osm2rdfmember:id/osm2rdf:length ?length } GROUP BY ?qui_entity } }
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
    # ENDIF #
  suggestPredicates: |-
    %PREFIXES%
    # IF !CURRENT_SUBJECT_VARIABLE #
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed WHERE {
      { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)
        WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }
      UNION
      { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?count)
        WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }
        GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }
      BIND (?qui_entity AS ?name)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?name), "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)
    # ENDIF #
    # IF CURRENT_SUBJECT_VARIABLE #
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      # IF CONNECTED_TRIPLES_EMPTY #
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # ELSE #
      { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)
        WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # ENDIF #
      BIND (?qui_entity AS ?name)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?name), "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
    # ENDIF #
  suggestObjects: |-
    %PREFIXES%
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      # IF CURRENT_WORD_EMPTY #
      OPTIONAL { ?qui_entity osmkey:name ?name }
      BIND (?qui_entity AS ?alias)
      # ELSE #
      OPTIONAL { ?qui_entity osmkey:name ?name }
      OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias }
      BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)
      FILTER (REGEX(STR(?name), "^%CURRENT_WORD%") || REGEX(STR(?alias), "^%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  subjectName: ?qleverui_entity <https://www.openstreetmap.org/wiki/Key:name> ?qleverui_name .
  alternativeSubjectName: ''
  predicateName: ''
  alternativePredicateName: ''
  objectName: ?qleverui_entity <https://www.openstreetmap.org/wiki/Key:name> ?qleverui_name .
  alternativeObjectName: ''
  replacePredicates: ''
  supportedKeywords: as,ask,base,bind,by,construct,contains-entity,contains-word,data,datatype,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with
  supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound
  supportedPredicateSuggestions: ''
  suggestPrefixnamesForPredicates: 'False'
  fillPrefixes: 'True'
  filterEntities: 'False'
  suggestedPrefixes: |-
    @prefix osmmeta: <https://www.openstreetmap.org/meta/> .
    @prefix osmway: <https://www.openstreetmap.org/way/> .
    @prefix osmkey: <https://www.openstreetmap.org/wiki/Key:> .
    @prefix osmrel: <https://www.openstreetmap.org/relation/> .
    @prefix osmnode: <https://www.openstreetmap.org/node/> .
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix osm: <https://www.openstreetmap.org/> .
    @prefix ogc: <http://www.opengis.net/rdf#> .
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
    @prefix wd: <http://www.wikidata.org/entity/> .
    @prefix wdt: <http://www.wikidata.org/prop/direct/> .
    @prefix p: <http://www.wikidata.org/prop/> .
    @prefix ps: <http://www.wikidata.org/prop/statement/> .
    @prefix pq: <http://www.wikidata.org/prop/qualifier/> .
    @prefix geo: <http://www.opengis.net/ont/geosparql#> .
    @prefix geof: <http://www.opengis.net/def/function/geosparql/> .
    @prefix osm2rdf: <https://osm2rdf.cs.uni-freiburg.de/rdf#> .
    @prefix osm2rdfkey: <https://osm2rdf.cs.uni-freiburg.de/rdf/key#> .
    @prefix osm2rdfgeom: <https://osm2rdf.cs.uni-freiburg.de/rdf/geom#> .
    @prefix osm2rdfmember: <https://osm2rdf.cs.uni-freiburg.de/rdf/member#> .
    @prefix qlss: <https://qlever.cs.uni-freiburg.de/spatialSearch/> .
  suggestionEntityVariable: ?qui_entity
  suggestionNameVariable: ?qui_name
  suggestionAltNameVariable: ?qui_alias
  suggestionReversedVariable: ?qui_reversed
  frequentPredicates: ''
  frequentPatternsWithoutOrder: geo:hasGeometry/geo:asWKT osmkey:highway osmkey:name
  entityNameAndAliasPattern: ?qleverui_entity osmkey:name ?name . ?qleverui_entity osmkey:name|osmkey:alt_name|osmkey:name:en|osmkey:name:de ?alias
  entityScorePattern: '{ SELECT ?qleverui_entity ?count WHERE { ?qleverui_entity rdf:type osm:relation { ?qleverui_entity osm2rdf:area ?count } UNION { ?qleverui_entity osmkey:waterway "river" { SELECT ?qleverui_entity (10 * SUM(?length) AS ?count) WHERE { ?qleverui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY ?qleverui_entity } } } }'
  predicateNameAndAliasPatternWithoutContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  entityNameAndAliasPatternDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithoutContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  warmupQuery1: |-
    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN% }
      ORDER BY ?qleverui_entity }
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  warmupQuery2: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?alias
  warmupQuery3: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?qleverui_entity
  warmupQuery4: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%
      } UNION {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%
      } } }
  warmupQuery5: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%
      } UNION {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%
      } } }
  suggestSubjectsContextInsensitive: |-
    %PREFIXES%
    # IF !CURRENT_WORD_EMPTY #
    SELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?count) AS ?qui_count) WHERE {
      { { SELECT ?qui_entity ?name ?alias WHERE {
          { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), "^%CURRENT_WORD%") } UNION
          { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), "^%CURRENT_WORD%") } } }
        ?qui_entity rdf:type osm:relation . ?qui_entity osm2rdf:area ?count }
        UNION
        { { SELECT ?qui_entity ?name ?alias WHERE {
          { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), "^%CURRENT_WORD%") } UNION
          { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), "^%CURRENT_WORD%") } } }
        ?qui_entity osmkey:waterway "river"
        { SELECT ?qui_entity (10 * SUM(?length) AS ?count)
          WHERE { ?qui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY ?qui_entity } }
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
    # ENDIF #
  suggestPredicatesContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      BIND (?qui_entity AS ?name)
      # IF !CURRENT_WORD_EMPTY #
      FILTER REGEX(STR(?name), "%CURRENT_WORD%", "i")
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  suggestObjectsContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      # IF CURRENT_WORD_EMPTY #
      OPTIONAL { ?qui_entity osmkey:name ?name }
      BIND (?qui_entity AS ?alias)
      # ELSE #
      OPTIONAL { ?qui_entity osmkey:name ?name }
      OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias }
      BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)
      FILTER (REGEX(STR(?name), "^%CURRENT_WORD%") || REGEX(STR(?alias), "^%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  mapViewBaseURL: https://qlever.cs.uni-freiburg.de/petrimaps
- name: Wikidata
  slug: wikidata
  sortKey: A.1
  baseUrl: https://qlever.cs.uni-freiburg.de/api/wikidata
  apiToken: aof4Ad
  isDefault: 'True'
  isNoSlugMode: 'False'
  maxDefault: '100'
  filteredLanguage: en
  dynamicSuggestions: '2'
  defaultModeTimeout: '5.0'
  mixedModeTimeout: '1.0'
  suggestSubjects: |-
    %PREFIXES%
    # IF !CURRENT_WORD_EMPTY #

    SELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?sitelinks) AS ?qui_count) WHERE {
      { SELECT ?qui_entity ?name ?alias WHERE {
          ?qui_entity @en@rdfs:label ?name .
          ?qui_entity @en@skos:altLabel ?alias .
          FILTER (REGEX(STR(?name), "^%CURRENT_WORD%") || REGEX(STR(?alias), "^%CURRENT_WORD%")) } }
      ?qui_entity ^schema:about ?m . ?m wikibase:sitelinks ?sitelinks
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)

    # ENDIF #
  suggestPredicates: |-
    %PREFIXES%
    # IF !CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed WHERE {
      { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)
        WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }
        GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }
      UNION
      { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?count)
        WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }
        GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }
      # IF CURRENT_WORD_EMPTY #
      ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .
      ?qui_tmp_1 @en@rdfs:label ?name .
      BIND (?name AS ?alias)
      # ELSE #
      ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .
      ?qui_tmp_1 @en@rdfs:label ?name .
      OPTIONAL { ?qui_tmp_1 @en@skos:altLabel ?alias }
      FILTER (REGEX(STR(?name), "%CURRENT_WORD%", "i") || REGEX(STR(?alias), "%CURRENT_WORD%", "i"))
      # ENDIF #
    } GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)

    # ENDIF #
    # IF CURRENT_SUBJECT_VARIABLE #

    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      # IF CONNECTED_TRIPLES_EMPTY #
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # ELSE #
      { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)
        WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # ENDIF #
      # IF CURRENT_WORD_EMPTY #
      ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .
      ?qui_tmp_1 @en@rdfs:label ?name .
      BIND (?name AS ?alias)
      # ELSE #
      ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .
      ?qui_tmp_1 @en@rdfs:label ?name .
      OPTIONAL { ?qui_tmp_1 @en@skos:altLabel ?alias }
      FILTER (REGEX(STR(?name), "%CURRENT_WORD%", "i") || REGEX(STR(?alias), "%CURRENT_WORD%", "i"))
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)

    # ENDIF #
  suggestObjects: |-
    %PREFIXES%
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      # IF CURRENT_WORD_EMPTY #
      OPTIONAL { ?qui_entity @en@rdfs:label ?name }
      BIND (?qui_entity AS ?alias)
      # ELSE #
      OPTIONAL { ?qui_entity @en@rdfs:label ?name }
      OPTIONAL { ?qui_entity @en@skos:altLabel ?optional_alias }
      BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)
      FILTER (REGEX(STR(?name), "^%CURRENT_WORD%") || REGEX(STR(?alias), "^%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  subjectName: ?qleverui_entity @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .
  alternativeSubjectName: ?qleverui_entity @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname .
  predicateName: |-
    { { { ?qleverui_claim <http://wikiba.se/ontology#directClaim> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } UNION
    { ?qleverui_claim <http://wikiba.se/ontology#claim> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } } UNION
    { ?qleverui_claim <http://wikiba.se/ontology#statementProperty> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } } UNION
    { ?qleverui_claim <http://wikiba.se/ontology#qualifier> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } .
  alternativePredicateName: |-
    { { { ?qleverui_claim <http://wikiba.se/ontology#directClaim> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } UNION
    { ?qleverui_claim <http://wikiba.se/ontology#claim> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } } UNION
    { ?qleverui_claim <http://wikiba.se/ontology#statementProperty> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } } UNION
    { ?qleverui_claim <http://wikiba.se/ontology#qualifier> ?qleverui_entity .
    ?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } .
  objectName: ?qleverui_entity @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .
  alternativeObjectName: ?qleverui_entity @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname .
  replacePredicates: |-
    <http://www.w3.org/2000/01/rdf-schema#label> @en@<http://www.w3.org/2000/01/rdf-schema#label>
    <http://schema.org/name> @en@<http://schema.org/name>
    <http://wikiba.se/ontology#label> @en@<http://wikiba.se/ontology#label>
  supportedKeywords: as,ask,base,bind,by,construct,contains-entity,contains-word,data,datatype,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with
  supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound, uri, iri, lcase, ucase, exists
  supportedPredicateSuggestions: ''
  suggestPrefixnamesForPredicates: 'False'
  fillPrefixes: 'True'
  filterEntities: 'False'
  suggestedPrefixes: |-
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
    @prefix ontolex: <http://www.w3.org/ns/lemon/ontolex#> .
    @prefix dct: <http://purl.org/dc/terms/> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix owl: <http://www.w3.org/2002/07/owl#> .
    @prefix wikibase: <http://wikiba.se/ontology#> .
    @prefix skos: <http://www.w3.org/2004/02/skos/core#> .
    @prefix schema: <http://schema.org/> .
    @prefix cc: <http://creativecommons.org/ns#> .
    @prefix geo: <http://www.opengis.net/ont/geosparql#> .
    @prefix geof: <http://www.opengis.net/def/function/geosparql/> .
    @prefix prov: <http://www.w3.org/ns/prov#> .
    @prefix wd: <http://www.wikidata.org/entity/> .
    @prefix data: <https://www.wikidata.org/wiki/Special:EntityData/> .
    @prefix s: <http://www.wikidata.org/entity/statement/> .
    @prefix ref: <http://www.wikidata.org/reference/> .
    @prefix v: <http://www.wikidata.org/value/> .
    @prefix wdt: <http://www.wikidata.org/prop/direct/> .
    @prefix wdtn: <http://www.wikidata.org/prop/direct-normalized/> .
    @prefix p: <http://www.wikidata.org/prop/> .
    @prefix ps: <http://www.wikidata.org/prop/statement/> .
    @prefix psv: <http://www.wikidata.org/prop/statement/value/> .
    @prefix psn: <http://www.wikidata.org/prop/statement/value-normalized/> .
    @prefix pq: <http://www.wikidata.org/prop/qualifier/> .
    @prefix pqv: <http://www.wikidata.org/prop/qualifier/value/> .
    @prefix pqn: <http://www.wikidata.org/prop/qualifier/value-normalized/> .
    @prefix pr: <http://www.wikidata.org/prop/reference/> .
    @prefix prv: <http://www.wikidata.org/prop/reference/value/> .
    @prefix prn: <http://www.wikidata.org/prop/reference/value-normalized/> .
    @prefix wdno: <http://www.wikidata.org/prop/novalue/> .
    @prefix imdb: <https://www.imdb.com/> .
    @prefix qfn: <http://qlever.cs.uni-freiburg.de/function#> .
    @prefix ql: <http://qlever.cs.uni-freiburg.de/builtin-functions/> .
    @prefix qlss: <https://qlever.cs.uni-freiburg.de/spatialSearch/> .
    @prefix math: <http://www.w3.org/2005/xpath-functions/math#> .
  suggestionEntityVariable: ?qui_entity
  suggestionNameVariable: ?qui_name
  suggestionAltNameVariable: ?qui_alias
  suggestionReversedVariable: ?qui_reversed
  frequentPredicates: 'wdt:P31 wdt:P279 #wdt:P279+ #schema:about #wikibase:sitelinks #@en@rdfs:label'
  frequentPatternsWithoutOrder: '#wdt:P31 #wdt:P279 #wdt:P279+ ^schema:about/wikibase:sitelinks'
  entityNameAndAliasPattern: ?qleverui_entity @en@rdfs:label ?name . ?qleverui_entity @en@rdfs:label|@en@skos:altLabel ?alias .
  entityScorePattern: '{ SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count) WHERE { ?qleverui_tmp schema:about ?qleverui_entity } GROUP BY ?qleverui_entity }'
  predicateNameAndAliasPatternWithoutContext: ?entity wikibase:directClaim ?qleverui_entity . ?entity @en@rdfs:label ?name . ?entity @en@rdfs:label|@en@skos:altLabel ?alias
  predicateNameAndAliasPatternWithContext: ?entity ?qleverui_tmp ?qleverui_entity . ?entity @en@rdfs:label ?name . ?entity @en@rdfs:label|@en@skos:altLabel ?alias
  entityNameAndAliasPatternDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithoutContextDefault: |-
    # VALUES ?qleverui_entity { schema:about_TEMPORARILY_DISABLED }
    BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  predicateNameAndAliasPatternWithContextDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)
  warmupQuery1: |-
    SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
      { SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN% }
      ORDER BY ?qleverui_entity }
    } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
  warmupQuery2: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?alias
  warmupQuery3: |-
    SELECT ?qleverui_entity ?name ?alias ?count WHERE {
      %ENTITY_SCORE_PATTERN%
      %ENTITY_NAME_AND_ALIAS_PATTERN%
    } INTERNAL SORT BY ?qleverui_entity
  warmupQuery4: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%
      } UNION {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%
      } } }
  warmupQuery5: |-
    SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%
      } UNION {
      { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
        %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%
      } } }
  suggestSubjectsContextInsensitive: |-
    %PREFIXES%
    # IF !CURRENT_WORD_EMPTY #

    SELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?sitelinks) AS ?qui_count) WHERE {
      { SELECT ?qui_entity ?name ?alias WHERE {
          ?qui_entity @en@rdfs:label ?name .
          ?qui_entity @en@skos:altLabel ?alias .
          FILTER (REGEX(STR(?name), "^%CURRENT_WORD%") || REGEX(STR(?alias), "^%CURRENT_WORD%")) } }
      ?qui_entity ^schema:about ?m . ?m wikibase:sitelinks ?sitelinks
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)

    # ENDIF #
  suggestPredicatesContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)
        WHERE { ?qui_subject ?qui_entity ?qui_object }
        GROUP BY ?qui_entity }
      # IF CURRENT_WORD_EMPTY #
      ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .
      ?qui_tmp_1 @en@rdfs:label ?name .
      BIND (?name AS ?alias)
      # ELSE #
      ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .
      ?qui_tmp_1 @en@rdfs:label ?name .
      ?qui_tmp_1 @en@skos:altLabel ?alias .
      FILTER (REGEX(STR(?name), "%CURRENT_WORD%", "i") || REGEX(STR(?alias), "%CURRENT_WORD%", "i"))
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  suggestObjectsContextInsensitive: |-
    %PREFIXES%
    SELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {
      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {
        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .
      } GROUP BY ?qui_entity }
      # IF CURRENT_WORD_EMPTY #
      OPTIONAL { ?qui_entity @en@rdfs:label ?name }
      BIND (?qui_entity AS ?alias)
      # ELSE #
      OPTIONAL { ?qui_entity @en@rdfs:label ?name }
      OPTIONAL { ?qui_entity @en@skos:altLabel ?optional_alias }
      BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)
      FILTER (REGEX(STR(?name), "^%CURRENT_WORD%") || REGEX(STR(?alias), "^%CURRENT_WORD%"))
      # ENDIF #
    } GROUP BY ?qui_entity ORDER BY DESC(?qui_count)
  mapViewBaseURL: https://qlever.cs.uni-freiburg.de/petrimaps
