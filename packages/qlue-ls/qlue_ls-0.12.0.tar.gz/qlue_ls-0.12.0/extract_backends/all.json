[
  {
    "id": "55",
    "name": "IMDb",
    "slug": "imdb",
    "sortKey": "C.4",
    "baseUrl": "https://qlever.cs.uni-freiburg.de/api/imdb",
    "apiToken": "",
    "isDefault": "False",
    "isNoSlugMode": "False",
    "maxDefault": "100",
    "filteredLanguage": "en",
    "dynamicSuggestions": "2",
    "defaultModeTimeout": "5.0",
    "mixedModeTimeout": "1.0",
    "suggestSubjects": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
    "suggestPredicates": "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as ?qleverui_count)\n              ?qleverui_reversed WHERE {\n\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }\n    GROUP BY ?qleverui_entity }\n  BIND (0 AS ?qleverui_reversed) }\n  UNION\n  { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)\n    WHERE { ?qleverui_tmp ?qleverui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qleverui_entity }\n    BIND (1 AS ?qleverui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)\n\n# ENDIF #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_2) as ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count_2)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity ?object }\n    GROUP BY ?qleverui_entity }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
    "suggestObjects": "%PREFIXES%\nSELECT ?qleverui_entity\n              (MIN(?name) AS ?qleverui_name)\n              (MIN(?alias) AS ?qleverui_alias)\n              (MAX(?count_1) AS ?qleverui_count) WHERE {\n  {\n\n    { SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity .\n      } GROUP BY ?qleverui_entity }\n      { %WARMUP_QUERY_3% }\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n      # ENDIF #\n    } }\n\n  } UNION {\n\n    { SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n      { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1) WHERE {\n        %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity\n      } GROUP BY ?qleverui_entity }\n      %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(?alias, \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n\n  }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "subjectName": "",
    "alternativeSubjectName": "",
    "predicateName": "",
    "alternativePredicateName": "",
    "objectName": "",
    "alternativeObjectName": "",
    "replacePredicates": "",
    "supportedKeywords": "as,ask,base,bind,by,construct,contains-entity,contains-word,data,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with",
    "supportedFunctions": "asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound",
    "supportedPredicateSuggestions": "",
    "suggestPrefixnamesForPredicates": "True",
    "fillPrefixes": "True",
    "filterEntities": "False",
    "suggestedPrefixes": "PREFIX imdb: <https://www.imdb.com/>",
    "suggestionEntityVariable": "?qleverui_entity",
    "suggestionNameVariable": "?qleverui_name",
    "suggestionAltNameVariable": "?qleverui_alias",
    "suggestionReversedVariable": "?qleverui_reversed",
    "frequentPredicates": "",
    "frequentPatternsWithoutOrder": "",
    "entityNameAndAliasPattern": "?qleverui_entity imdb:title ?name . BIND(?name AS ?alias)",
    "entityScorePattern": "?qleverui_entity imdb:numVotes ?count .",
    "predicateNameAndAliasPatternWithoutContext": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContext": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "entityNameAndAliasPatternDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithoutContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "warmupQuery1": "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n    %ENTITY_SCORE_PATTERN%\n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\n  ORDER BY ?qleverui_entity }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "warmupQuery2": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} ORDER BY ?alias",
    "warmupQuery3": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} ORDER BY ?qleverui_entity",
    "warmupQuery4": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT% .\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\n  } UNION {\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT% .\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\n  } }",
    "warmupQuery5": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT% .\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\n  } UNION {\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% .\n    FILTER (?qleverui_entity != <QLever-internal-function/langtag>)\n  } }",
    "suggestSubjectsContextInsensitive": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
    "suggestPredicatesContextInsensitive": "%PREFIXES%\n\nSELECT ?qleverui_entity\n              (MIN(?name) as ?qleverui_name)\n              (MIN(?alias) as ?qleverui_alias)\n              (SAMPLE(?count_1) as ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_4% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(?alias, \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "suggestObjectsContextInsensitive": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n%WARMUP_QUERY_1%\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER (REGEX(?alias, \"^\\\"%CURRENT_WORD%\") || REGEX(?alias, \"^<%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
    "mapViewBaseURL": ""
  },
  {
    "id": "15",
    "name": "DBLP",
    "slug": "dblp",
    "sortKey": "C.1",
    "baseUrl": "https://qlever.cs.uni-freiburg.de/api/dblp",
    "apiToken": "",
    "isDefault": "False",
    "isNoSlugMode": "False",
    "maxDefault": "100",
    "filteredLanguage": "en",
    "dynamicSuggestions": "2",
    "defaultModeTimeout": "5.0",
    "mixedModeTimeout": "1.0",
    "suggestSubjects": "%PREFIXES%\nSELECT ?qui_entity (?qui_alias AS ?qui_name) ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity ?qui_alias ?qui_count WHERE {\n    { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:publishedIn ?qui_entity } GROUP BY ?qui_entity } BIND(?qui_entity AS ?qui_alias) } UNION\n    { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:authoredBy ?qui_entity } GROUP BY ?qui_entity } ?qui_entity rdfs:label ?qui_alias } UNION\n    { { SELECT ?qui_entity (COUNT(?author) AS ?qui_count) WHERE { ?qui_entity dblp:authoredBy ?author } GROUP BY ?qui_entity } ?qui_entity dblp:title ?qui_alias }\n  } INTERNAL SORT BY ?qui_alias }\n  FILTER REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\")\n} ORDER BY DESC(?qui_count)",
    "suggestPredicates": "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count ?qui_reversed WHERE {\n  # IF !CURRENT_SUBJECT_VARIABLE #\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?qui_count)\n    WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }\n  # ENDIF #\n  # IF CURRENT_SUBJECT_VARIABLE AND CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\n  # ENDIF #\n  # IF CURRENT_SUBJECT_VARIABLE AND !CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?qui_count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\n  # ENDIF #\n  BIND (?qui_entity AS ?qui_name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)",
    "suggestObjects": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_alias }\n  BIND (COALESCE(?qui_alias, ?qui_entity) AS ?qui_name)\n} ORDER BY DESC(?qui_count)\n# ELSE #\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_alias }\n  BIND (?qui_entity AS ?qui_name)\n  FILTER (REGEX(STR(?qui_name), \"^%CURRENT_WORD%\") || REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\"))\n} ORDER BY DESC(?qui_count)\n# ENDIF #",
    "subjectName": "",
    "alternativeSubjectName": "",
    "predicateName": "",
    "alternativePredicateName": "",
    "objectName": "",
    "alternativeObjectName": "",
    "replacePredicates": "",
    "supportedKeywords": "as,ask,base,bind,by,construct,contains-entity,contains-word,data,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with",
    "supportedFunctions": "asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound",
    "supportedPredicateSuggestions": "",
    "suggestPrefixnamesForPredicates": "True",
    "fillPrefixes": "True",
    "filterEntities": "False",
    "suggestedPrefixes": "PREFIX dblps: <https://dblp.org/rdf/schema-2020-07-01#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX dblp: <https://dblp.org/rdf/schema#>\nPREFIX datacite: <http://purl.org/spar/datacite/>\nPREFIX literal: <http://purl.org/spar/literal/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX terms: <http://purl.org/dc/terms/>\nPREFIX cito: <http://purl.org/spar/cito/>\nPREFIX bibtex: <http://purl.org/net/nknouf/ns/bibtex#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX schema: <http://schema.org/>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>",
    "suggestionEntityVariable": "?qui_entity",
    "suggestionNameVariable": "?qui_name",
    "suggestionAltNameVariable": "?qui_alias",
    "suggestionReversedVariable": "?qui_reversed",
    "frequentPredicates": "rdfs:label dblp:authoredBy",
    "frequentPatternsWithoutOrder": "",
    "entityNameAndAliasPattern": "?qui_entity rdfs:label ?alias",
    "entityScorePattern": "{ SELECT ?qui_entity ?name (COUNT(?qui_tmp) AS ?count) WHERE { ?qui_entity @en@rdfs:label ?name . ?qui_entity ?predicate ?qui_tmp } GROUP BY ?qui_entity ?name }",
    "predicateNameAndAliasPatternWithoutContext": "BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContext": "BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)",
    "entityNameAndAliasPatternDefault": "BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithoutContextDefault": "BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContextDefault": "BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)",
    "warmupQuery1": "SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?predicate) AS ?qui_count) WHERE { ?qui_entity ?predicate ?qui_tmp } GROUP BY ?qui_entity }\n  ?qui_entity rdfs:label ?qui_name .\n  BIND (?qui_name AS ?qui_alias)\n} ORDER BY DESC(?qui_count)",
    "warmupQuery2": "SELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?predicate) AS ?qui_count) WHERE { ?qui_entity ?predicate ?qui_tmp } GROUP BY ?qui_entity }\n  ?qui_entity rdfs:label ?qui_name .\n  BIND (?qui_name AS ?qui_alias)\n} INTERNAL SORT BY ?qui_alias",
    "warmupQuery3": "SELECT ?qui_entity (COALESCE(?qui_name_tmp, ?qui_entity) AS ?qui_name) (?qui_name AS ?qui_alias) ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(DISTINCT ?qui_tmp_1) AS ?qui_count) WHERE { ?qui_tmp_1 ?qui_entity ?qui_tmp_2 } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_tmp }\n} ORDER BY DESC(?qui_count)",
    "warmupQuery4": "SELECT ?qui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\n  } UNION {\n  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\n  } } }",
    "warmupQuery5": "SELECT ?qui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\n  } UNION {\n  { { SELECT ?qui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qui_entity ?object } GROUP BY ?qui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\n  } } }",
    "suggestSubjectsContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity (?qui_alias AS ?qui_name) ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity ?qui_alias ?qui_count WHERE {\n    { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:publishedIn ?qui_entity } GROUP BY ?qui_entity } BIND(?qui_entity AS ?qui_alias) } UNION\n    { { SELECT ?qui_entity (COUNT(?paper) AS ?qui_count) WHERE { ?paper dblp:authoredBy ?qui_entity } GROUP BY ?qui_entity } ?qui_entity rdfs:label ?qui_alias } UNION\n    { { SELECT ?qui_entity (COUNT(?author) AS ?qui_count) WHERE { ?qui_entity dblp:authoredBy ?author } GROUP BY ?qui_entity } ?qui_entity dblp:title ?qui_alias }\n  } INTERNAL SORT BY ?qui_alias }\n  FILTER REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\")\n} ORDER BY DESC(?qui_count)",
    "suggestPredicatesContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed)\n  BIND (?qui_entity AS ?qui_name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)",
    "suggestObjectsContextInsensitive": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_alias }\n  BIND (COALESCE(?qui_alias, ?qui_entity) AS ?qui_name)\n} ORDER BY DESC(?qui_count)\n# ELSE #\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_alias }\n  BIND (?qui_entity AS ?qui_name)\n  FILTER (REGEX(STR(?qui_name), \"^%CURRENT_WORD%\") || REGEX(STR(?qui_alias), \"^%CURRENT_WORD%\"))\n} ORDER BY DESC(?qui_count)\n# ENDIF #",
    "mapViewBaseURL": ""
  },
  {
    "id": "31",
    "name": "PubChem",
    "slug": "pubchem",
    "sortKey": "B.5",
    "baseUrl": "https://qlever.cs.uni-freiburg.de/api/pubchem",
    "apiToken": "",
    "isDefault": "False",
    "isNoSlugMode": "False",
    "maxDefault": "100",
    "filteredLanguage": "en",
    "dynamicSuggestions": "2",
    "defaultModeTimeout": "5.0",
    "mixedModeTimeout": "3.0",
    "suggestSubjects": "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\n\nSELECT ?qui_entity ?qui_name ?qui_alias WHERE {\n  ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name ]\n  BIND (?qui_name AS ?qui_alias)\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\")\n} ORDER BY ASC(?qui_name)\n\n# ENDIF #",
    "suggestPredicates": "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?qui_name_) AS ?qui_name) (SAMPLE(?qui_alias_) AS ?qui_alias) ?qui_count ?qui_reversed WHERE {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?qui_count)\n    WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name_)\n  BIND (?qui_name_ AS ?qui_alias_)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_alias_), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity ?qui_count ?qui_reversed ORDER BY DESC(?qui_count)\n\n# ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?qui_name_) AS ?qui_name) (SAMPLE(?qui_alias_) AS ?qui_alias) ?qui_count WHERE {\n  # IF CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ELSE #\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?qui_count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ENDIF #\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name_)\n  BIND (?qui_name_ AS ?qui_alias_)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_alias_), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity ?qui_count ORDER BY DESC(?qui_count)\n\n# ENDIF #",
    "suggestObjects": "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name_or_null ] }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)\n  BIND (?qui_name AS ?qui_alias)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)",
    "subjectName": "?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .",
    "alternativeSubjectName": "",
    "predicateName": "?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .",
    "alternativePredicateName": "",
    "objectName": "?qleverui_entity <http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .",
    "alternativeObjectName": "",
    "replacePredicates": "",
    "supportedKeywords": "as,ask,base,bind,by,construct,contains-entity,contains-word,data,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with",
    "supportedFunctions": "asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound, from, named, graph",
    "supportedPredicateSuggestions": "",
    "suggestPrefixnamesForPredicates": "True",
    "fillPrefixes": "True",
    "filterEntities": "False",
    "suggestedPrefixes": "@prefix bao: <http://www.bioassayontology.org/bao#> .\n@prefix bioassay: <http://rdf.ncbi.nlm.nih.gov/pubchem/bioassay/> .\n@prefix bp: <http://www.biopax.org/release/biopax-level3.owl#> .\n@prefix chemblchembl: <http://linkedchemistry.info/chembl/chemblid/> .\n@prefix chembl: <http://rdf.ebi.ac.uk/resource/chembl/molecule/> .\n@prefix cell: <http://rdf.ncbi.nlm.nih.gov/pubchem/cell/> .\n@prefix cito: <http://purl.org/spar/cito/> .\n@prefix compound: <http://rdf.ncbi.nlm.nih.gov/pubchem/compound/> .\n@prefix concept: <http://rdf.ncbi.nlm.nih.gov/pubchem/concept/> .\n@prefix conserveddomain: <http://rdf.ncbi.nlm.nih.gov/pubchem/conserveddomain/> .\n@prefix dcterms: <http://purl.org/dc/terms/> .\n@prefix descriptor: <http://rdf.ncbi.nlm.nih.gov/pubchem/descriptor/> .\n@prefix disease: <http://rdf.ncbi.nlm.nih.gov/pubchem/disease/> .\n@prefix endpoint: <http://rdf.ncbi.nlm.nih.gov/pubchem/endpoint/> .\n@prefix ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/> .\n@prefix fabio: <http://purl.org/spar/fabio/> .\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n@prefix freq: <http://purl.org/cld/freq/> .\n@prefix gene: <http://rdf.ncbi.nlm.nih.gov/pubchem/gene/> .\n@prefix : <http://rdf.ncbi.nlm.nih.gov/pubchem/void.ttl#> .\n@prefix inchikey: <http://rdf.ncbi.nlm.nih.gov/pubchem/inchikey/> .\n@prefix measuregroup: <http://rdf.ncbi.nlm.nih.gov/pubchem/measuregroup/> .\n@prefix mesh: <http://id.nlm.nih.gov/mesh/> .\n@prefix nci: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#> .\n@prefix ns0: <http://data.epo.org/linked-data/def/patent/> .\n@prefix obo: <http://purl.obolibrary.org/obo/> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix patentcpc: <http://rdf.ncbi.nlm.nih.gov/pubchem/patentcpc/> .\n@prefix patent: <http://rdf.ncbi.nlm.nih.gov/pubchem/patent/> .\n@prefix patentipc: <http://rdf.ncbi.nlm.nih.gov/pubchem/patentipc/> .\n@prefix pathway: <http://rdf.ncbi.nlm.nih.gov/pubchem/pathway/> .\n@prefix pav: <http://purl.org/pav/> .\n@prefix pav: <http://purl.org/pav/2.0/> .\n@prefix pdbo: <http://rdf.wwpdb.org/schema/pdbx-v40.owl#> .\n@prefix protein: <http://rdf.ncbi.nlm.nih.gov/pubchem/protein/> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix reactome: <http://identifiers.org/reactome/> .\n@prefix reference: <http://rdf.ncbi.nlm.nih.gov/pubchem/reference/> .\n@prefix sio: <http://semanticscience.org/resource/> .\n@prefix skos: <http://www.w3.org/2004/02/skos/core#> .\n@prefix source: <http://rdf.ncbi.nlm.nih.gov/pubchem/source/> .\n@prefix substance: <http://rdf.ncbi.nlm.nih.gov/pubchem/substance/> .\n@prefix synonym: <http://rdf.ncbi.nlm.nih.gov/pubchem/synonym/> .\n@prefix taxonomy: <http://rdf.ncbi.nlm.nih.gov/pubchem/taxonomy> .\n@prefix uniprot: <http://purl.uniprot.org/uniprot/> .\n@prefix up: <http://purl.uniprot.org/core/> .\n@prefix vcard2006: <http://www.w3.org/2006/vcard/ns#> .\n@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .\n@prefix vocab: <http://rdf.ncbi.nlm.nih.gov/pubchem/vocabulary#> .\n@prefix void: <http://rdfs.org/ns/void#> .\n@prefix wikidata: <http://www.wikidata.org/entity/> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .",
    "suggestionEntityVariable": "?qui_entity",
    "suggestionNameVariable": "?qui_name",
    "suggestionAltNameVariable": "?qui_alias",
    "suggestionReversedVariable": "?qui_reversed",
    "frequentPredicates": "#rdfs:label #dcterms:title",
    "frequentPatternsWithoutOrder": "",
    "entityNameAndAliasPattern": "{ { ?qleverui_entity rdf:type ?qleverui_type . ?qleverui_type obo:IAO_0000412 obo:chebi.owl . ?qleverui_type rdfs:label ?name } UNION { ?qleverui_entity rdfs:label ?name } BIND(?name AS ?alias) }\nUNION\n{ { ?qleverui_entity rdf:type ?qleverui_type . ?qleverui_type obo:IAO_0000412 obo:chebi.owl . ?qleverui_type rdfs:label ?name } UNION { ?qleverui_entity rdfs:label ?name } ?qleverui_entity sio:SIO_000008 ?qleverui_synonym . ?qleverui_synonym rdf:type sio:CHEMINF_000339 . ?qleverui_synonym sio:SIO_000300 ?alias }",
    "entityScorePattern": "{ SELECT ?qleverui_entity (COUNT(?qleverui_synonym) AS ?count) WHERE {\n  { ?qleverui_entity sio:SIO_000008 ?qleverui_synonym . ?qleverui_synonym rdf:type sio:CHEMINF_000339 }\n  UNION\n  { ?qleverui_entity rdfs:label ?qleverui_synonym }\n} GROUP BY ?qleverui_entity }",
    "predicateNameAndAliasPatternWithoutContext": "?qleverui_entity rdfs:label ?name . BIND(?name AS ?alias)",
    "predicateNameAndAliasPatternWithContext": "?qleverui_entity rdfs:label ?name . BIND(?name AS ?alias)",
    "entityNameAndAliasPatternDefault": "BIND(STR(?qleverui_entity) AS ?name) BIND(?name AS ?alias)",
    "predicateNameAndAliasPatternWithoutContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?name AS ?alias)",
    "predicateNameAndAliasPatternWithContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "warmupQuery1": "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n    %ENTITY_SCORE_PATTERN%\n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\n  ORDER BY ?qleverui_entity }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "warmupQuery2": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?alias",
    "warmupQuery3": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?qleverui_entity",
    "warmupQuery4": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n  OPTIONAL { %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT% }\n  OPTIONAL {\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% }\n}",
    "warmupQuery5": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n  OPTIONAL { %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT% }\n  OPTIONAL {\n    { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT% }\n}",
    "suggestSubjectsContextInsensitive": "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\n\nSELECT ?qui_entity ?qui_name ?qui_alias WHERE {\n  ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name ]\n  BIND (?qui_name AS ?qui_alias)\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\")\n} ORDER BY ASC(?qui_name)\n\n# ENDIF #",
    "suggestPredicatesContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)\n  BIND (?qui_name AS ?qui_alias)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_alias), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)",
    "suggestObjectsContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity ?qui_name ?qui_alias ?qui_count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?qui_count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  OPTIONAL { ?qui_entity rdf:type [ obo:IAO_0000412 obo:chebi.owl; rdfs:label ?qui_name_or_null ] }\n  OPTIONAL { ?qui_entity rdfs:label ?qui_name_or_null }\n  BIND (IF(?qui_name_or_null, ?qui_name_or_null, ?qui_entity) AS ?qui_name)\n  BIND (?qui_name AS ?qui_alias)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_name), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)",
    "mapViewBaseURL": ""
  },
  {
    "id": "32",
    "name": "UniProt",
    "slug": "uniprot",
    "sortKey": "B.4",
    "baseUrl": "https://qlever.cs.uni-freiburg.de/api/uniprot",
    "apiToken": "aof4Ad",
    "isDefault": "False",
    "isNoSlugMode": "False",
    "maxDefault": "100",
    "filteredLanguage": "en",
    "dynamicSuggestions": "2",
    "defaultModeTimeout": "30.0",
    "mixedModeTimeout": "1.0",
    "suggestSubjects": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
    "suggestPredicates": "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (MIN(?name) as ?qui_name) (MIN(?alias) as ?qui_alias) (SAMPLE(?count_2) as ?qui_count) ?qui_reversed WHERE {\n  { { SELECT ?qui_entity (COUNT(?qui_tmp) AS ?count_2)\n    WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_tmp  }\n    GROUP BY ?qui_entity }\n  BIND (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_tmp) AS ?count_2)\n    WHERE { ?qui_tmp ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity }\n    BIND (1 AS ?qui_reversed) }\n  { %WARMUP_QUERY_5% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)\n\n# ENDIF #\n# IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)\n\n# ENDIF #\n\n# IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qui_count)\n\n# ENDIF #",
    "suggestObjects": "%PREFIXES%\nSELECT ?qui_entity (MIN(?name) AS ?qui_name) (MIN(?alias) AS ?qui_alias) (MAX(?count) AS ?qui_count) WHERE {\n  {\n    { SELECT ?qui_entity ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      ?qui_entity rdfs:label ?name BIND(?name AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  } UNION {\n   { SELECT ?qui_entity ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      ?qui_entity up:scientificName ?name BIND(?name AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  } UNION {\n    { SELECT ?qui_entity ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        # %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "subjectName": "?qleverui_entity up:scientificName ?qleverui_name",
    "alternativeSubjectName": "",
    "predicateName": "",
    "alternativePredicateName": "",
    "objectName": "?qleverui_entity up:scientificName ?qleverui_name",
    "alternativeObjectName": "",
    "replacePredicates": "",
    "supportedKeywords": "as,ask,base,bind,by,construct,contains-entity,contains-word,data,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with",
    "supportedFunctions": "asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound",
    "supportedPredicateSuggestions": "",
    "suggestPrefixnamesForPredicates": "True",
    "fillPrefixes": "True",
    "filterEntities": "False",
    "suggestedPrefixes": "@prefix annotation: <http://purl.uniprot.org/annotation/> .\n@prefix bibo:  <http://purl.org/ontology/bibo/> .\n@prefix busco: <http://busco.ezlab.org/schema#> .\n@prefix chebi: <http://purl.obolibrary.org/obo/CHEBI_> .\n@prefix citation: <http://purl.uniprot.org/citations/> .\n@prefix cito:  <http://purl.org/spar/cito/> .\n@prefix dcat:  <http://www.w3.org/ns/dcat#> .\n@prefix dcmit: <http://purl.org/dc/dcmitype/> .\n@prefix dcterms: <http://purl.org/dc/terms/> .\n@prefix disease: <http://purl.uniprot.org/diseases/> .\n@prefix ECO:   <http://purl.obolibrary.org/obo/ECO_> .\n@prefix embl-cds: <http://purl.uniprot.org/embl-cds/> .\n@prefix ensembl: <http://rdf.ebi.ac.uk/resource/ensembl/> .\n@prefix enzyme: <http://purl.uniprot.org/enzyme/> .\n@prefix faldo: <http://biohackathon.org/resource/faldo#> .\n@prefix foaf:  <http://xmlns.com/foaf/0.1/> .\n@prefix go:    <http://purl.obolibrary.org/obo/GO_> .\n@prefix hs:    <https://hamap.expasy.org/rdf/vocab#> .\n@prefix isoform: <http://purl.uniprot.org/isoforms/> .\n@prefix keywords: <http://purl.uniprot.org/keywords/> .\n@prefix location: <http://purl.uniprot.org/locations/> .\n@prefix obo:   <http://purl.obolibrary.org/obo/> .\n@prefix oboInOwl: <http://www.geneontology.org/formats/oboInOwl#> .\n@prefix owl:   <http://www.w3.org/2002/07/owl#> .\n@prefix patent: <http://purl.uniprot.org/EPO/> .\n@prefix pav:   <http://purl.org/pav/> .\n@prefix position: <http://purl.uniprot.org/position/> .\n@prefix prism: <http://prismstandard.org/namespaces/basic/2.0/> .\n@prefix pubmed: <http://purl.uniprot.org/pubmed/> .\n@prefix range: <http://purl.uniprot.org/range/> .\n@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix rh:    <http://rdf.rhea-db.org/> .\n@prefix schema: <http://schema.org/> .\n@prefix sd:    <http://www.w3.org/ns/sparql-service-description#> .\n@prefix sh:    <http://www.w3.org/ns/shacl#> .\n@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .\n@prefix sp:    <http://spinrdf.org/sp#> .\n@prefix ssmRegion: <http://purl.uniprot.org/signatureSequenceMatch/> .\n@prefix stato: <http://purl.obolibrary.org/obo/STATO_> .\n@prefix taxon: <http://purl.uniprot.org/taxonomy/> .\n@prefix tissue: <http://purl.uniprot.org/tissues/> .\n@prefix uniparc: <http://purl.uniprot.org/uniparc/> .\n@prefix uniprot: <http://purl.uniprot.org/uniprot/> .\n@prefix up:    <http://purl.uniprot.org/core/> .\n@prefix voag:  <http://voag.linkedmodel.org/schema/voag#> .\n@prefix void:  <http://rdfs.org/ns/void#> .\n@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .",
    "suggestionEntityVariable": "?qui_entity",
    "suggestionNameVariable": "?qui_name",
    "suggestionAltNameVariable": "?qui_alias",
    "suggestionReversedVariable": "?qui_reversed",
    "frequentPredicates": "",
    "frequentPatternsWithoutOrder": "rdfs:label",
    "entityNameAndAliasPattern": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "entityScorePattern": "{ SELECT ?qleverui_entity (COUNT(?predicate) AS ?count) WHERE { ?qleverui_entity ?predicate ?object } GROUP BY ?qleverui_entity }",
    "predicateNameAndAliasPatternWithoutContext": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContext": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "entityNameAndAliasPatternDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithoutContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "warmupQuery1": "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n    %ENTITY_SCORE_PATTERN%\n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\n  ORDER BY ?qleverui_entity }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "warmupQuery2": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?alias",
    "warmupQuery3": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?qleverui_entity",
    "warmupQuery4": "SELECT ?qui_entity ?name ?alias ?count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }\n  BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)\n}",
    "warmupQuery5": "SELECT ?qui_entity ?name ?alias ?count WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }\n  BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)\n}",
    "suggestSubjectsContextInsensitive": "%PREFIXES%\n# IF CURRENT_WORD_EMPTY #\n\n# ELSE #\n\nSELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { %WARMUP_QUERY_2% }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n  # ENDIF #\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)\n\n# ENDIF #",
    "suggestPredicatesContextInsensitive": "%PREFIXES%\n\nSELECT ?qui_entity (?qui_entity AS ?qui_name) (?qui_entity AS ?qui_alias) (?count AS ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE { ?qui_subject ?qui_entity ?qui_object } GROUP BY ?qui_entity }\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?qui_entity), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} ORDER BY DESC(?qleverui_count)",
    "suggestObjectsContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity (MIN(?name) AS ?qui_name) (MIN(?alias) AS ?qui_alias) (MAX(?count) AS ?qui_count) WHERE {\n  {\n    { SELECT ?qui_entity ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      ?qui_entity rdfs:label ?name BIND(?name AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  } UNION {\n   { SELECT ?qui_entity ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      ?qui_entity up:scientificName ?name BIND(?name AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  } UNION {\n    { SELECT ?qui_entity ?name ?alias ?count WHERE {\n      { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n        %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity\n      } GROUP BY ?qui_entity }\n      BIND(?qui_entity AS ?name) BIND(?qui_entity AS ?alias)\n      # IF !CURRENT_WORD_EMPTY #\n      FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\")\n      # ENDIF #\n    } }\n  }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "mapViewBaseURL": ""
  },
  {
    "id": "17",
    "name": "OSM Planet",
    "slug": "osm-planet",
    "sortKey": "B.2",
    "baseUrl": "https://qlever.cs.uni-freiburg.de/api/osm-planet",
    "apiToken": "aof4Ad",
    "isDefault": "False",
    "isNoSlugMode": "False",
    "maxDefault": "100",
    "filteredLanguage": "en",
    "dynamicSuggestions": "2",
    "defaultModeTimeout": "10.0",
    "mixedModeTimeout": "3.0",
    "suggestSubjects": "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?count) AS ?qui_count) WHERE {\n  { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity rdf:type osm:relation . ?qui_entity osm2rdf:area ?count }\n    UNION\n    { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    { SELECT ?qui_entity (10 * SUM(?length) AS ?count)\n      WHERE { ?qui_entity osmkey:waterway \"river\" .\n                     ?qui_entity osmrel:member/osm2rdfmember:id/osm2rdf:length ?length } GROUP BY ?qui_entity } }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n# ENDIF #",
    "suggestPredicates": "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed WHERE {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)\n    WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?count)\n    WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)\n# ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE #\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  # IF CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ELSE #\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ENDIF #\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n# ENDIF #",
    "suggestObjects": "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity osmkey:name ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL { ?qui_entity osmkey:name ?name }\n  OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "subjectName": "?qleverui_entity <https://www.openstreetmap.org/wiki/Key:name> ?qleverui_name .",
    "alternativeSubjectName": "",
    "predicateName": "",
    "alternativePredicateName": "",
    "objectName": "?qleverui_entity <https://www.openstreetmap.org/wiki/Key:name> ?qleverui_name .",
    "alternativeObjectName": "",
    "replacePredicates": "",
    "supportedKeywords": "as,ask,base,bind,by,construct,contains-entity,contains-word,data,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with",
    "supportedFunctions": "asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound",
    "supportedPredicateSuggestions": "",
    "suggestPrefixnamesForPredicates": "False",
    "fillPrefixes": "True",
    "filterEntities": "False",
    "suggestedPrefixes": "@prefix osmmeta: <https://www.openstreetmap.org/meta/> .\n@prefix osmway: <https://www.openstreetmap.org/way/> .\n@prefix osmkey: <https://www.openstreetmap.org/wiki/Key:> .\n@prefix osmrel: <https://www.openstreetmap.org/relation/> .\n@prefix osmnode: <https://www.openstreetmap.org/node/> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix osm: <https://www.openstreetmap.org/> .\n@prefix ogc: <http://www.opengis.net/rdf#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n@prefix wd: <http://www.wikidata.org/entity/> .\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\n@prefix p: <http://www.wikidata.org/prop/> .\n@prefix ps: <http://www.wikidata.org/prop/statement/> .\n@prefix pq: <http://www.wikidata.org/prop/qualifier/> .\n@prefix geo: <http://www.opengis.net/ont/geosparql#> .\n@prefix geof: <http://www.opengis.net/def/function/geosparql/> .\n@prefix osm2rdf: <https://osm2rdf.cs.uni-freiburg.de/rdf#> .\n@prefix osm2rdfkey: <https://osm2rdf.cs.uni-freiburg.de/rdf/key#> .\n@prefix osm2rdfgeom: <https://osm2rdf.cs.uni-freiburg.de/rdf/geom#> .\n@prefix osm2rdfmember: <https://osm2rdf.cs.uni-freiburg.de/rdf/member#> .\n@prefix qlss: <https://qlever.cs.uni-freiburg.de/spatialSearch/> .",
    "suggestionEntityVariable": "?qui_entity",
    "suggestionNameVariable": "?qui_name",
    "suggestionAltNameVariable": "?qui_alias",
    "suggestionReversedVariable": "?qui_reversed",
    "frequentPredicates": "",
    "frequentPatternsWithoutOrder": "geo:hasGeometry/geo:asWKT osmkey:highway osmkey:name",
    "entityNameAndAliasPattern": "?qleverui_entity osmkey:name ?name . ?qleverui_entity osmkey:name|osmkey:alt_name|osmkey:name:en|osmkey:name:de ?alias",
    "entityScorePattern": "{ SELECT ?qleverui_entity ?count WHERE { ?qleverui_entity rdf:type osm:relation { ?qleverui_entity osm2rdf:area ?count } UNION { ?qleverui_entity osmkey:waterway \"river\" { SELECT ?qleverui_entity (10 * SUM(?length) AS ?count) WHERE { ?qleverui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY ?qleverui_entity } } } }",
    "predicateNameAndAliasPatternWithoutContext": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContext": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "entityNameAndAliasPatternDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithoutContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "warmupQuery1": "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n    %ENTITY_SCORE_PATTERN%\n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\n  ORDER BY ?qleverui_entity }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "warmupQuery2": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?alias",
    "warmupQuery3": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?qleverui_entity",
    "warmupQuery4": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\n  } UNION {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\n  } } }",
    "warmupQuery5": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\n  } UNION {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\n  } } }",
    "suggestSubjectsContextInsensitive": "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?count) AS ?qui_count) WHERE {\n  { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity rdf:type osm:relation . ?qui_entity osm2rdf:area ?count }\n    UNION\n    { { SELECT ?qui_entity ?name ?alias WHERE {\n      { ?qui_entity osmkey:name ?name BIND(?name AS ?alias) FILTER REGEX(STR(?name), \"^%CURRENT_WORD%\") } UNION\n      { ?qui_entity osmkey:name ?name . ?qui_entity osmkey:name:en ?alias FILTER REGEX(STR(?alias), \"^%CURRENT_WORD%\") } } }\n    ?qui_entity osmkey:waterway \"river\"\n    { SELECT ?qui_entity (10 * SUM(?length) AS ?count)\n      WHERE { ?qui_entity osmrel:member/osm:id/osm2rdf:length ?length } GROUP BY ?qui_entity } }\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n# ENDIF #",
    "suggestPredicatesContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?name) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  BIND (?qui_entity AS ?name)\n  # IF !CURRENT_WORD_EMPTY #\n  FILTER REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\")\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "suggestObjectsContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity osmkey:name ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL { ?qui_entity osmkey:name ?name }\n  OPTIONAL { ?qui_entity osmkey:name:en ?optional_alias }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "mapViewBaseURL": "https://qlever.cs.uni-freiburg.de/petrimaps"
  },
  {
    "id": "8",
    "name": "Wikidata",
    "slug": "wikidata",
    "sortKey": "A.1",
    "baseUrl": "https://qlever.cs.uni-freiburg.de/api/wikidata",
    "apiToken": "aof4Ad",
    "isDefault": "True",
    "isNoSlugMode": "False",
    "maxDefault": "100",
    "filteredLanguage": "en",
    "dynamicSuggestions": "2",
    "defaultModeTimeout": "5.0",
    "mixedModeTimeout": "1.0",
    "suggestSubjects": "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\n\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?sitelinks) AS ?qui_count) WHERE {\n  { SELECT ?qui_entity ?name ?alias WHERE {\n      ?qui_entity @en@rdfs:label ?name .\n      ?qui_entity @en@skos:altLabel ?alias .\n      FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\")) } }\n  ?qui_entity ^schema:about ?m . ?m wikibase:sitelinks ?sitelinks\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n\n# ENDIF #",
    "suggestPredicates": "%PREFIXES%\n# IF !CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) ?qui_reversed WHERE {\n  { { SELECT ?qui_entity (COUNT(?qui_object) AS ?count)\n    WHERE { %CURRENT_SUBJECT% ?qui_entity ?qui_object  }\n    GROUP BY ?qui_entity } BIND (0 AS ?qui_reversed) }\n  UNION\n  { { SELECT ?qui_entity (COUNT(?qui_subject) AS ?count)\n    WHERE { ?qui_subject ?qui_entity %CURRENT_SUBJECT%  }\n    GROUP BY ?qui_entity } BIND (1 AS ?qui_reversed) }\n  # IF CURRENT_WORD_EMPTY #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  BIND (?name AS ?alias)\n  # ELSE #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  OPTIONAL { ?qui_tmp_1 @en@skos:altLabel ?alias }\n  FILTER (REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\") || REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ?qui_reversed ORDER BY DESC(?qui_count)\n\n# ENDIF #\n# IF CURRENT_SUBJECT_VARIABLE #\n\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  # IF CONNECTED_TRIPLES_EMPTY #\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ELSE #\n  { SELECT ?qui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count)\n    WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # ENDIF #\n  # IF CURRENT_WORD_EMPTY #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  BIND (?name AS ?alias)\n  # ELSE #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  OPTIONAL { ?qui_tmp_1 @en@skos:altLabel ?alias }\n  FILTER (REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\") || REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n\n# ENDIF #",
    "suggestObjects": "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n    %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity @en@rdfs:label ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL { ?qui_entity @en@rdfs:label ?name }\n  OPTIONAL { ?qui_entity @en@skos:altLabel ?optional_alias }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "subjectName": "?qleverui_entity @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .",
    "alternativeSubjectName": "?qleverui_entity @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname .",
    "predicateName": "{ { { ?qleverui_claim <http://wikiba.se/ontology#directClaim> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } UNION\n{ ?qleverui_claim <http://wikiba.se/ontology#claim> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } } UNION\n{ ?qleverui_claim <http://wikiba.se/ontology#statementProperty> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } } UNION\n{ ?qleverui_claim <http://wikiba.se/ontology#qualifier> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name } .",
    "alternativePredicateName": "{ { { ?qleverui_claim <http://wikiba.se/ontology#directClaim> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } UNION\n{ ?qleverui_claim <http://wikiba.se/ontology#claim> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } } UNION\n{ ?qleverui_claim <http://wikiba.se/ontology#statementProperty> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } } UNION\n{ ?qleverui_claim <http://wikiba.se/ontology#qualifier> ?qleverui_entity .\n?qleverui_claim @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname } .",
    "objectName": "?qleverui_entity @en@<http://www.w3.org/2000/01/rdf-schema#label> ?qleverui_name .",
    "alternativeObjectName": "?qleverui_entity @en@<http://www.w3.org/2004/02/skos/core#altLabel> ?qleverui_altname .",
    "replacePredicates": "<http://www.w3.org/2000/01/rdf-schema#label> @en@<http://www.w3.org/2000/01/rdf-schema#label>\n<http://schema.org/name> @en@<http://schema.org/name>\n<http://wikiba.se/ontology#label> @en@<http://wikiba.se/ontology#label>",
    "supportedKeywords": "as,ask,base,bind,by,construct,contains-entity,contains-word,data,delete,describe,distinct,filter,from,graph,group,has-predicate,having,insert,internal,keywords,limit,minus,named,not,offset,optional,optional,order,prefix,select,service,sort,textlimit,union,using,values,where,with",
    "supportedFunctions": "asc, desc, avg, values, score, text, count, sample, min, max, average, concat, group_concat, langMatches, lang, regex, sum, dist, contains, str, strlen, substr, strstarts, strends, strbefore, strafter, contains, year, month, day, rand, abs, ceil, floor, round, log, exp, sqrt, sin, cos, tan, if, coalesce, bound, concat, replace, encode_for_uri, isiri, isblank, isliteral, isNumeric, bound, uri, iri, lcase, ucase, exists",
    "supportedPredicateSuggestions": "",
    "suggestPrefixnamesForPredicates": "False",
    "fillPrefixes": "True",
    "filterEntities": "False",
    "suggestedPrefixes": "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n@prefix ontolex: <http://www.w3.org/ns/lemon/ontolex#> .\n@prefix dct: <http://purl.org/dc/terms/> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix wikibase: <http://wikiba.se/ontology#> .\n@prefix skos: <http://www.w3.org/2004/02/skos/core#> .\n@prefix schema: <http://schema.org/> .\n@prefix cc: <http://creativecommons.org/ns#> .\n@prefix geo: <http://www.opengis.net/ont/geosparql#> .\n@prefix geof: <http://www.opengis.net/def/function/geosparql/> .\n@prefix prov: <http://www.w3.org/ns/prov#> .\n@prefix wd: <http://www.wikidata.org/entity/> .\n@prefix data: <https://www.wikidata.org/wiki/Special:EntityData/> .\n@prefix s: <http://www.wikidata.org/entity/statement/> .\n@prefix ref: <http://www.wikidata.org/reference/> .\n@prefix v: <http://www.wikidata.org/value/> .\n@prefix wdt: <http://www.wikidata.org/prop/direct/> .\n@prefix wdtn: <http://www.wikidata.org/prop/direct-normalized/> .\n@prefix p: <http://www.wikidata.org/prop/> .\n@prefix ps: <http://www.wikidata.org/prop/statement/> .\n@prefix psv: <http://www.wikidata.org/prop/statement/value/> .\n@prefix psn: <http://www.wikidata.org/prop/statement/value-normalized/> .\n@prefix pq: <http://www.wikidata.org/prop/qualifier/> .\n@prefix pqv: <http://www.wikidata.org/prop/qualifier/value/> .\n@prefix pqn: <http://www.wikidata.org/prop/qualifier/value-normalized/> .\n@prefix pr: <http://www.wikidata.org/prop/reference/> .\n@prefix prv: <http://www.wikidata.org/prop/reference/value/> .\n@prefix prn: <http://www.wikidata.org/prop/reference/value-normalized/> .\n@prefix wdno: <http://www.wikidata.org/prop/novalue/> .\n@prefix imdb: <https://www.imdb.com/> .\n@prefix qfn: <http://qlever.cs.uni-freiburg.de/function#> .\n@prefix ql: <http://qlever.cs.uni-freiburg.de/builtin-functions/> .\n@prefix math: <http://www.w3.org/2005/xpath-functions/math#> .",
    "suggestionEntityVariable": "?qui_entity",
    "suggestionNameVariable": "?qui_name",
    "suggestionAltNameVariable": "?qui_alias",
    "suggestionReversedVariable": "?qui_reversed",
    "frequentPredicates": "wdt:P31 wdt:P279 #wdt:P279+ #schema:about #wikibase:sitelinks #@en@rdfs:label",
    "frequentPatternsWithoutOrder": "#wdt:P31 #wdt:P279 #wdt:P279+ ^schema:about/wikibase:sitelinks",
    "entityNameAndAliasPattern": "?qleverui_entity @en@rdfs:label ?name . ?qleverui_entity @en@rdfs:label|@en@skos:altLabel ?alias .",
    "entityScorePattern": "{ SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count) WHERE { ?qleverui_tmp schema:about ?qleverui_entity } GROUP BY ?qleverui_entity }",
    "predicateNameAndAliasPatternWithoutContext": "?entity wikibase:directClaim ?qleverui_entity . ?entity @en@rdfs:label ?name . ?entity @en@rdfs:label|@en@skos:altLabel ?alias",
    "predicateNameAndAliasPatternWithContext": "?entity ?qleverui_tmp ?qleverui_entity . ?entity @en@rdfs:label ?name . ?entity @en@rdfs:label|@en@skos:altLabel ?alias",
    "entityNameAndAliasPatternDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithoutContextDefault": "# VALUES ?qleverui_entity { schema:about_TEMPORARILY_DISABLED }\nBIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "predicateNameAndAliasPatternWithContextDefault": "BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity AS ?alias)",
    "warmupQuery1": "SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {\n  { SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n    %ENTITY_SCORE_PATTERN%\n    %ENTITY_NAME_AND_ALIAS_PATTERN% }\n  ORDER BY ?qleverui_entity }\n} GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)",
    "warmupQuery2": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?alias",
    "warmupQuery3": "SELECT ?qleverui_entity ?name ?alias ?count WHERE {\n  %ENTITY_SCORE_PATTERN%\n  %ENTITY_NAME_AND_ALIAS_PATTERN%\n} INTERNAL SORT BY ?qleverui_entity",
    "warmupQuery4": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%\n  } UNION {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%\n  } } }",
    "warmupQuery5": "SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%\n  } UNION {\n  { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }\n    %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%\n  } } }",
    "suggestSubjectsContextInsensitive": "%PREFIXES%\n# IF !CURRENT_WORD_EMPTY #\n\nSELECT ?qui_entity (SAMPLE(?name) AS ?qui_name) (SAMPLE(?alias) AS ?qui_alias) (SAMPLE(?sitelinks) AS ?qui_count) WHERE {\n  { SELECT ?qui_entity ?name ?alias WHERE {\n      ?qui_entity @en@rdfs:label ?name .\n      ?qui_entity @en@skos:altLabel ?alias .\n      FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\")) } }\n  ?qui_entity ^schema:about ?m . ?m wikibase:sitelinks ?sitelinks\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)\n\n# ENDIF #",
    "suggestPredicatesContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count)\n    WHERE { ?qui_subject ?qui_entity ?qui_object }\n    GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  BIND (?name AS ?alias)\n  # ELSE #\n  ?qui_tmp_1 ?qui_tmp_2 ?qui_entity .\n  ?qui_tmp_1 @en@rdfs:label ?name .\n  ?qui_tmp_1 @en@skos:altLabel ?alias .\n  FILTER (REGEX(STR(?name), \"%CURRENT_WORD%\", \"i\") || REGEX(STR(?alias), \"%CURRENT_WORD%\", \"i\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "suggestObjectsContextInsensitive": "%PREFIXES%\nSELECT ?qui_entity (SAMPLE(?name) as ?qui_name) (SAMPLE(?alias) as ?qui_alias) (SAMPLE(?count) as ?qui_count) WHERE {\n  { SELECT ?qui_entity (COUNT(?qui_entity) AS ?count) WHERE {\n    %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qui_entity .\n  } GROUP BY ?qui_entity }\n  # IF CURRENT_WORD_EMPTY #\n  OPTIONAL { ?qui_entity @en@rdfs:label ?name }\n  BIND (?qui_entity AS ?alias)\n  # ELSE #\n  OPTIONAL { ?qui_entity @en@rdfs:label ?name }\n  OPTIONAL { ?qui_entity @en@skos:altLabel ?optional_alias }\n  BIND (COALESCE(?optional_alias, ?qui_entity) AS ?alias)\n  FILTER (REGEX(STR(?name), \"^%CURRENT_WORD%\") || REGEX(STR(?alias), \"^%CURRENT_WORD%\"))\n  # ENDIF #\n} GROUP BY ?qui_entity ORDER BY DESC(?qui_count)",
    "mapViewBaseURL": "https://qlever.cs.uni-freiburg.de/petrimaps"
  }
]