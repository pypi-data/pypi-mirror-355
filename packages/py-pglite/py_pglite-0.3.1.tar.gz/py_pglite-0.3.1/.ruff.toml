# Ruff configuration for py-pglite
[lint]
# Enable comprehensive linting
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "UP",  # pyupgrade
]

# Exclude specific rules that might interfere with pytest fixtures
ignore = [
    "E402",  # Module level import not at top of file (needed for conditional imports)
]

# Files to exclude from linting
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".pytest_cache",
    "node_modules",
]

# Preserve critical imports for pytest plugin functionality
[lint.per-file-ignores]
"py_pglite/*.py" = [
    "F401",  # Unused import (needed for fixture registration)
]
"tests/*.py" = [
    "F401",  # Unused import (needed for fixture registration)
]
"examples/*.py" = [
    "F401",  # Unused import (needed for fixture registration)
    "F841",  # Unused variable
]
"py_pglite/fixtures.py" = [
    "F401",  # Unused import
]
"py_pglite/sqlalchemy/fixtures.py" = [
    "F401",  # Unused import  
]
"py_pglite/django/fixtures.py" = [
    "F401",  # Unused import
]
"py_pglite/django/backend/*.py" = [
    "F401",  # Django imports for compatibility  
    "E501",  # Line too long (comments and complex Django patterns)
]
"py_pglite/django/utils.py" = [
    "F401",  # Django imports for compatibility
]
"py_pglite/manager.py" = [
    "E501",  # Line too long (error messages)
]
"*/conftest.py" = [
    "F401",  # Unused import (fixtures are auto-discovered)
]

[lint.isort]
# Configure import sorting to be compatible with our structure
force-single-line = false
known-first-party = ["py_pglite"]

[format]
# Use double quotes to match project style
quote-style = "double" 