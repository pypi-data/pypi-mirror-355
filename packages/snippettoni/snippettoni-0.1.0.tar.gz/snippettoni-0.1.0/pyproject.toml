[project]
name = "snippettoni"
version = "0.1.0"
description = "Generate the `x-codeSamples` extension for OpenAPI specifications"
readme = {file = "README.md", content-type = "text/markdown"}

authors = [
    { name = "Francesco Faraone" }
]
license = {file = "LICENSE.txt"}

keywords = ["openapi", "snippets", "codeSamples", "redoc"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.12,<4"
dependencies = [
    "jinja2>=3.1.6",
    "openapi-spec-validator>=0.7.2",
    "prance>=25.4.8.0",
    "pyyaml>=6.0.2",
    "typer>=0.16.0",
]

[project.urls]
Homepage = "https://github.com/ffaraone/snippettoni"
Documentation = "https://github.com/ffaraone/snippettoni#readme"
Repository = "https://github.com/ffaraone/snippettoni.git"
Issues = "https://github.com/ffaraone/snippettoni/issues"

[project.scripts]
snippettoni = "snippettoni.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[dependency-groups]
dev = [
    "sqlalchemy[asyncio]>=2.0.37",
    "asyncpg>=0.30.0",
    "ipython>=8.31.0",
    "mypy>=1.15.0",
    "psycopg2-binary>=2.9.9",
    "pytest>=8.3.3,<9.0",
    "pytest-asyncio>=0.24.0,<1.0",
    "pytest-cov>=6.0.0,<7.0",
    "ruff>=0.8.0,<1.0",
    "django>=5.1.6",
    "pre-commit>=4.1.0",
    "types-pyyaml>=6.0.12.20250516",
]

[tool.ruff]
line-length = 100
target-version = "py312"
output-format = "full"
cache-dir = ".cache/ruff"

[tool.ruff.lint]
select = [
    "E",  # w errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade,
    "PT",  # flake8-pytest-style
    "T10",  # flake8-pytest-style
]
ignore = [
    "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "PT023", # @pytest.mark.parametrize` is missing required arguments
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.pytest.ini_options]
testpaths = "tests/"
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
addopts = "--cov=snippettoni --cov-report=term-missing --cov-report=html --cov-report=xml"
cache_dir = ".cache/pytest"


[tool.coverage.run]
branch = true
source = ["snippettoni"]
relative_files = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "pragma: no branch",
    "pass",
]

[tool.mypy]
warn_no_return = false
ignore_missing_imports = true
cache_dir = ".cache/mypy"
