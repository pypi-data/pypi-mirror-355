# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.6.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResourceRequirementsModel(BaseModel):
    """
    ResourceRequirementsModel
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource requirements")
    num_cpus: Optional[StrictInt] = Field(default=None, description="Number of CPUs required by a job")
    num_gpus: Optional[StrictInt] = Field(default=None, description="Number of GPUs required by a job")
    num_nodes: Optional[StrictInt] = Field(default=None, description="Number of nodes required by a job")
    memory: Optional[StrictStr] = Field(default='1m', description="Amount of memory required by a job, e.g., 20g")
    runtime: Optional[StrictStr] = Field(default='P0DT1M', description="Maximum runtime for a job")
    key: Optional[StrictStr] = Field(default=None, alias="_key")
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    rev: Optional[StrictStr] = Field(default=None, alias="_rev")
    __properties: ClassVar[List[str]] = ["name", "num_cpus", "num_gpus", "num_nodes", "memory", "runtime", "_key", "_id", "_rev"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceRequirementsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceRequirementsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "num_cpus": obj.get("num_cpus"),
            "num_gpus": obj.get("num_gpus"),
            "num_nodes": obj.get("num_nodes"),
            "memory": obj.get("memory") if obj.get("memory") is not None else '1m',
            "runtime": obj.get("runtime") if obj.get("runtime") is not None else 'P0DT1M',
            "_key": obj.get("_key"),
            "_id": obj.get("_id"),
            "_rev": obj.get("_rev")
        })
        return _obj
