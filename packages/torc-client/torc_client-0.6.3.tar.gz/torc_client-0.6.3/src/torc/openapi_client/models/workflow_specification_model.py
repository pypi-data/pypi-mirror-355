# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.6.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from torc.openapi_client.models.file_model import FileModel
from torc.openapi_client.models.job_specification_model import JobSpecificationModel
from torc.openapi_client.models.resource_requirements_model import ResourceRequirementsModel
from torc.openapi_client.models.user_data_model import UserDataModel
from torc.openapi_client.models.workflow_config_model import WorkflowConfigModel
from torc.openapi_client.models.workflow_specifications_schedulers import WorkflowSpecificationsSchedulers
from typing import Optional, Set
from typing_extensions import Self

class WorkflowSpecificationModel(BaseModel):
    """
    WorkflowSpecificationModel
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the workflow")
    key: Optional[StrictStr] = Field(default=None, description="Optional key to use as the database identifier. If set, it must be unique in the database. It is recommended to let the database create the identifier.")
    user: Optional[StrictStr] = Field(default=None, description="User that created the workflow")
    description: Optional[StrictStr] = Field(default=None, description="Timestamp of workflow creation")
    jobs: Optional[List[JobSpecificationModel]] = Field(default=None, description="Jobs in the workflow. Each job name must be unique.")
    files: Optional[List[FileModel]] = Field(default=None, description="Files in the workflow. Each file name must be unique.")
    user_data: Optional[List[UserDataModel]] = Field(default=None, description="User data in the workflow. Each name must be unique.")
    resource_requirements: Optional[List[ResourceRequirementsModel]] = Field(default=None, description="Resource requirements in the workflow. Each name must be unique.")
    schedulers: Optional[WorkflowSpecificationsSchedulers] = None
    config: Optional[WorkflowConfigModel] = None
    __properties: ClassVar[List[str]] = ["name", "key", "user", "description", "jobs", "files", "user_data", "resource_requirements", "schedulers", "config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowSpecificationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item_jobs in self.jobs:
                if _item_jobs:
                    _items.append(_item_jobs.to_dict())
            _dict['jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_data (list)
        _items = []
        if self.user_data:
            for _item_user_data in self.user_data:
                if _item_user_data:
                    _items.append(_item_user_data.to_dict())
            _dict['user_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_requirements (list)
        _items = []
        if self.resource_requirements:
            for _item_resource_requirements in self.resource_requirements:
                if _item_resource_requirements:
                    _items.append(_item_resource_requirements.to_dict())
            _dict['resource_requirements'] = _items
        # override the default output from pydantic by calling `to_dict()` of schedulers
        if self.schedulers:
            _dict['schedulers'] = self.schedulers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowSpecificationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "key": obj.get("key"),
            "user": obj.get("user"),
            "description": obj.get("description"),
            "jobs": [JobSpecificationModel.from_dict(_item) for _item in obj["jobs"]] if obj.get("jobs") is not None else None,
            "files": [FileModel.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "user_data": [UserDataModel.from_dict(_item) for _item in obj["user_data"]] if obj.get("user_data") is not None else None,
            "resource_requirements": [ResourceRequirementsModel.from_dict(_item) for _item in obj["resource_requirements"]] if obj.get("resource_requirements") is not None else None,
            "schedulers": WorkflowSpecificationsSchedulers.from_dict(obj["schedulers"]) if obj.get("schedulers") is not None else None,
            "config": WorkflowConfigModel.from_dict(obj["config"]) if obj.get("config") is not None else None
        })
        return _obj
