# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.6.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SlurmSchedulerModel(BaseModel):
    """
    Data model for Slurm scheduler
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the scheduler")
    account: StrictStr = Field(description="Slurm account ID")
    gres: Optional[StrictStr] = Field(default=None, description="Generic resource requirement")
    mem: Optional[StrictStr] = Field(default=None, description="Compute node memory requirement")
    nodes: StrictInt = Field(description="Number of nodes for the Slurm allocation")
    ntasks_per_node: Optional[StrictInt] = Field(default=None, description="Number of tasks to invoke on each node")
    partition: Optional[StrictStr] = Field(default=None, description="Compute node partition; likely not necessary because Slurm should optimize it.")
    qos: Optional[StrictStr] = Field(default='normal', description="Priority of Slurm job")
    tmp: Optional[StrictStr] = Field(default=None, description="Compute node local storage size requirement")
    walltime: Optional[StrictStr] = Field(default=None, description="Slurm runtime requirement, e.g., 04:00:00")
    extra: Optional[StrictStr] = Field(default=None, description="Extra Slurm parameters that torc will append to the sbatch command")
    key: Optional[StrictStr] = Field(default=None, alias="_key")
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    rev: Optional[StrictStr] = Field(default=None, alias="_rev")
    __properties: ClassVar[List[str]] = ["name", "account", "gres", "mem", "nodes", "ntasks_per_node", "partition", "qos", "tmp", "walltime", "extra", "_key", "_id", "_rev"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlurmSchedulerModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlurmSchedulerModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "account": obj.get("account"),
            "gres": obj.get("gres"),
            "mem": obj.get("mem"),
            "nodes": obj.get("nodes"),
            "ntasks_per_node": obj.get("ntasks_per_node"),
            "partition": obj.get("partition"),
            "qos": obj.get("qos") if obj.get("qos") is not None else 'normal',
            "tmp": obj.get("tmp"),
            "walltime": obj.get("walltime"),
            "extra": obj.get("extra"),
            "_key": obj.get("_key"),
            "_id": obj.get("_id"),
            "_rev": obj.get("_rev")
        })
        return _obj
