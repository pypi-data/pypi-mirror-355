name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Install uv and set Python version
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: Install dependencies
      run: uv sync --locked --all-extras
    - name: Run tests
      run: uv run pytest -v

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install uv and set Python version
      uses: astral-sh/setup-uv@v5
      with:
        python-version: "3.12"
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: Install dependencies
      run: uv sync --locked --all-extras
    - name: Run linter
      run: uv run ruff check .
    - name: Run formatter
      run: uv run ruff format --check .

  publish:
    needs: [test, lint]
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install uv and set Python version
      uses: astral-sh/setup-uv@v5
      with:
        python-version: "3.12"
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: Install dependencies
      run: uv sync --locked --all-extras
    - name: Build and publish
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv build
        uv publish 