"""Pre-built authentication routes for FastHTML applications"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_routes_auth.ipynb.

# %% auto 0
__all__ = ['login_route', 'signup_route', 'logout_route']

# %% ../../nbs/01_routes_auth.ipynb 3
from fasthtml.common import *
from ..auth import hash_password, verify_password
from monsterui.all import *

# %% ../../nbs/01_routes_auth.ipynb 9
def login_route(rt, # FastHTML router instance
                path='/login',
                redirect_to='/',
                login_form=None,
                authenticate=None,
                session_key='auth',
                **kwargs):
    """Create a login route with customizable form and authentication.
    
    Following FastHTML patterns - pass the router instance, not the app.
    
    Args:
        rt: FastHTML router instance (from fast_app())
        path: Route path (default: '/login')
        redirect_to: Where to redirect after successful login (default: '/')
        login_form: Custom form component (callable returning FT)
        authenticate: Custom authentication function(email, password) -> user_dict or None
        session_key: Session key for auth data (default: 'auth')
        **kwargs: Additional arguments passed to form component
    """
    
    # Default form using MonsterUI components
    if login_form is None:
        def login_form(error=None, **form_kwargs):
            return Card(
                H2('Login'),
                Form(
                    LabelInput('Email', 
                              name='email', 
                              id='email', 
                              type='email', 
                              required=True, 
                              placeholder='you@example.com'),
                    LabelInput('Password', 
                              name='password', 
                              id='password', 
                              type='password', 
                              required=True),
                    Alert(error, variant='destructive') if error else None,
                    Button('Sign In', type='submit', cls='w-full'),
                    method='post',
                    hx_post=path,
                    hx_target='closest .card' if error else None,
                    hx_swap='outerHTML' if error else None,
                    cls='space-y-4'
                ),
                P(
                    "Don't have an account? ",
                    A('Sign up', href='/auth/signup', cls='text-primary hover:underline'),
                    cls='text-center text-sm mt-4'
                ),
                cls='max-w-md mx-auto mt-8'
            )
    
    # Default authentication (example only - replace with real implementation)
    if authenticate is None:
        def authenticate(email, password):
            # This is just an example - you should implement real authentication
            # Check against your database, verify password hash, etc.
            if email and password:  # Placeholder logic
                return {'email': email, 'id': 1}
            return None
    
    @rt(path, methods=['GET', 'POST'])
    async def login(req, sess):
        # Redirect if already authenticated
        if sess.get(session_key):
            return RedirectResponse(redirect_to, status_code=303)
        
        if req.method == 'POST':
            # Access form data correctly in FastHTML - await the form
            form = await req.form()
            email = form.get('email', '').strip()
            password = form.get('password', '')
            
            user = authenticate(email, password)
            if user:
                sess[session_key] = user
                # Return redirect for full page or just success for HTMX
                if req.headers.get('HX-Request'):
                    return Response(headers={'HX-Redirect': redirect_to})
                return RedirectResponse(redirect_to, status_code=303)
            
            # Return form with error
            return login_form(error='Invalid email or password', **kwargs)
        
        # GET request - show form
        return login_form(**kwargs)

# %% ../../nbs/01_routes_auth.ipynb 19
def signup_route(rt, # FastHTML router instance
                 path='/signup',
                 redirect_to='/',
                 signup_form=None,
                 create_user=None,
                 session_key='auth',
                 **kwargs):
    """Create a signup route with customizable form and user creation.
    
    Following FastHTML patterns - pass the router instance, not the app.
    
    Args:
        rt: FastHTML router instance (from fast_app())
        path: Route path (default: '/signup')
        redirect_to: Where to redirect after successful signup (default: '/')
        signup_form: Custom form component (callable returning FT)
        create_user: Custom user creation function(form_data) -> user_dict or error_string
        session_key: Session key for auth data (default: 'auth')
        **kwargs: Additional arguments passed to form component
    """
    
    # Default form using MonsterUI
    if signup_form is None:
        def signup_form(error=None, values=None, **form_kwargs):
            values = values or {}
            return Card(
                H2('Create Account'),
                Form(
                    LabelInput('Name',
                              name='name', 
                              id='name', 
                              required=True, 
                              value=values.get('name', ''),
                              placeholder='John Doe'),
                    LabelInput('Email',
                              name='email', 
                              id='email', 
                              type='email', 
                              required=True,
                              value=values.get('email', ''),
                              placeholder='you@example.com'),
                    LabelInput('Password',
                              name='password', 
                              id='password', 
                              type='password', 
                              required=True,
                              placeholder='At least 8 characters'),
                    LabelInput('Confirm Password',
                              name='password_confirm', 
                              id='password_confirm', 
                              type='password', 
                              required=True),
                    Alert(error, variant='destructive') if error else None,
                    Button('Create Account', type='submit', cls='w-full'),
                    method='post',
                    hx_post=path,
                    hx_target='closest .card' if error else None,
                    hx_swap='outerHTML' if error else None,
                    cls='space-y-4'
                ),
                P(
                    "Already have an account? ",
                    A('Sign in', href='/auth/login', cls='text-primary hover:underline'),
                    cls='text-center text-sm mt-4'
                ),
                cls='max-w-md mx-auto mt-8'
            )
    
    # Default user creation (example only)
    if create_user is None:
        def create_user(form_data):
            """Create user from form data. Returns user dict or error string."""
            # Validate passwords match
            if form_data.get('password') != form_data.get('password_confirm'):
                return "Passwords don't match"
            
            # Validate password length
            if len(form_data.get('password', '')) < 8:
                return "Password must be at least 8 characters"
            
            # In real implementation:
            # - Check if email already exists
            # - Hash password with hash_password()
            # - Insert into database
            # - Return user object
            
            return {
                'id': 1,  # Would be from database
                'email': form_data.get('email'),
                'name': form_data.get('name')
            }
    
    @rt(path, methods=['GET', 'POST'])
    async def signup(req, sess):
        # Redirect if already authenticated
        if sess.get(session_key):
            return RedirectResponse(redirect_to, status_code=303)
        
        if req.method == 'POST':
            # In FastHTML, form data needs to be awaited
            form = await req.form()
            form_data = {k: v.strip() if isinstance(v, str) else v 
                        for k, v in form.items()}
            
            result = create_user(form_data)
            
            if isinstance(result, str):  # Error message
                return signup_form(error=result, values=form_data, **kwargs)
            
            # Success - log user in
            sess[session_key] = result
            
            if req.headers.get('HX-Request'):
                return Response(headers={'HX-Redirect': redirect_to})
            return RedirectResponse(redirect_to, status_code=303)
        
        # GET request
        return signup_form(**kwargs)

# %% ../../nbs/01_routes_auth.ipynb 24
def logout_route(rt, # FastHTML router instance
                 path='/auth/logout',
                 redirect_to='/auth/login',
                 session_key='auth',
                 before_logout=None):
    """Create a logout route that clears the session.
    
    Following FastHTML patterns - pass the router instance, not the app.
    
    Args:
        rt: FastHTML router instance (from fast_app())
        path: Route path (default: '/auth/logout')
        redirect_to: Where to redirect after logout (default: '/auth/login')
        session_key: Session key to clear (default: 'auth')
        before_logout: Optional callback function(session) called before logout
    """
    
    @rt(path)
    def logout(req, sess):
        # Call optional callback
        if before_logout:
            before_logout(sess)
        
        # Clear auth from session
        if session_key in sess:
            del sess[session_key]
        
        # Handle HTMX requests
        if req.headers.get('HX-Request'):
            return Response(headers={'HX-Redirect': redirect_to})
        
        return RedirectResponse(redirect_to, status_code=303)
