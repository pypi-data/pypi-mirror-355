"""Flexible, transparent role-based access control (RBAC) system for FastHTML applications"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_permissions.ipynb.

# %% auto 0
__all__ = ['ROLE_HIERARCHY', 'ROLE_PERMISSIONS', 'PERMISSION_DESCRIPTIONS', 'require_auth', 'check_role_hierarchy',
           'require_role', 'get_user_permissions', 'has_permission', 'require_permission', 'auth_required',
           'role_required', 'permission_required', 'register_permission', 'get_permissions_for_role',
           'set_role_permissions', 'add_role_permission', 'remove_role_permission', 'clear_permission_cache']

# %% ../nbs/02_permissions.ipynb 3
from typing import Optional, Dict, Any, List, Union, Callable, Set
from functools import wraps
from fasthtml.common import *
from .auth import get_user_from_session
import inspect

# %% ../nbs/02_permissions.ipynb 4
__all__ = ['require_auth', 'require_role', 'require_permission', 'auth_required', 'role_required', 'permission_required',
           'get_user_permissions', 'has_permission', 'check_role_hierarchy', 'register_permission', 'get_permissions_for_role',
           'set_role_permissions', 'add_role_permission', 'remove_role_permission', 'clear_permission_cache',
           'ROLE_HIERARCHY', 'ROLE_PERMISSIONS', 'PERMISSION_DESCRIPTIONS']

# %% ../nbs/02_permissions.ipynb 9
# Role hierarchy - higher number = more privileges
ROLE_HIERARCHY = {
    'user': 1,
    'moderator': 2,
    'admin': 3
}

# Default role permissions
ROLE_PERMISSIONS = {
    'user': {
        'read_own_data',
        'update_own_data',
        'delete_own_data'
    },
    'moderator': {
        'read_own_data',
        'update_own_data',
        'delete_own_data',
        'read_all_data',
        'moderate_content',
        'manage_users'
    },
    'admin': {'*'}  # All permissions
}

# Permission descriptions (optional, for documentation)
PERMISSION_DESCRIPTIONS = {
    'read_own_data': 'Read user\'s own data',
    'update_own_data': 'Update user\'s own data',
    'delete_own_data': 'Delete user\'s own data',
    'read_all_data': 'Read all users\' data',
    'moderate_content': 'Moderate user-generated content',
    'manage_users': 'Create, update, delete other users',
    'delete_users': 'Delete user accounts',
    'view_sensitive_data': 'View sensitive system data'
}

# %% ../nbs/02_permissions.ipynb 11
def require_auth(req, # The FastHTML Request object
                 sess # The FastHTML Session object
                 ) -> bool: # True if user is authenticated
    """Check if user is authenticated.
    
    This is the simplest permission check - just verifies that a user is logged in.
    """
    return sess.get('auth') is not None

# %% ../nbs/02_permissions.ipynb 13
def check_role_hierarchy(user_role: Optional[str], # The user's current role
                        required_role: str          # The required role
                        ) -> bool:                  # True if user role >= required role
    """Check if user's role meets or exceeds the required role in hierarchy.
    
    Uses ROLE_HIERARCHY to determine if a user's role has sufficient privileges.
    For example, an 'admin' can access 'moderator' areas.
    """
    if not user_role:
        return False
    
    # Get role levels from hierarchy
    user_level = ROLE_HIERARCHY.get(user_role, 0)
    required_level = ROLE_HIERARCHY.get(required_role, float('inf'))
    
    return user_level >= required_level

# %% ../nbs/02_permissions.ipynb 14
def require_role(role: str,  # The required role
                 req,        # The FastHTML Request object  
                 sess        # The FastHTML Session object
                 ) -> bool:  # True if user has the required role or higher
    """Check if user has the required role or higher in the hierarchy.
    
    Uses role hierarchy so admins can access moderator areas, etc.
    """
    user = get_user_from_session(sess)
    if not user:
        return False
    
    return check_role_hierarchy(user.get('role'), role)

# %% ../nbs/02_permissions.ipynb 16
def get_user_permissions(user: Dict[str, Any] # The user dictionary from session
                        ) -> Set[str]:        # Set of permission strings
    """Get all permissions for a user based on their role.
    
    Returns a set of permission strings. Admins get '*' which means all permissions.
    """
    if not user:
        return set()
    
    role = user.get('role', 'user')
    permissions = ROLE_PERMISSIONS.get(role, set())
    
    # Return a copy to prevent modification
    return permissions.copy() if isinstance(permissions, set) else permissions

# %% ../nbs/02_permissions.ipynb 17
def has_permission(user: Dict[str, Any],      # The user dictionary
                   permission: str            # The permission to check
                   ) -> bool:                 # True if user has permission
    """Check if user has a specific permission.
    
    Handles the special case where admins have '*' meaning all permissions.
    """
    if not user:
        return False
    
    permissions = get_user_permissions(user)
    
    # Admin with wildcard permission
    if '*' in permissions:
        return True
    
    return permission in permissions

# %% ../nbs/02_permissions.ipynb 18
def require_permission(permission: str,  # The required permission
                      req,              # The FastHTML Request object
                      sess              # The FastHTML Session object  
                      ) -> bool:        # True if user has permission
    """Check if user has a specific permission.
    
    This is for granular permission checking beyond roles.
    """
    user = get_user_from_session(sess)
    if not user:
        return False
    
    return has_permission(user, permission)

# %% ../nbs/02_permissions.ipynb 21
def auth_required(func: Callable             # The route function to protect
                 ) -> Callable:              # The wrapped function
    """Decorator that requires authentication for a route.
    
    Redirects to /login if user is not authenticated.
    Works with FastHTML route functions that accept req and sess parameters.
    
    Example:
        @rt('/dashboard')
        @auth_required
        def get(req, sess):
            return "Dashboard content"
    """
    @wraps(func)
    def wrapper(req, sess, *args, **kwargs):
        if not require_auth(req, sess):
            return RedirectResponse('/login', status_code=303)
        
        return func(req, sess, *args, **kwargs)
    
    return wrapper

# %% ../nbs/02_permissions.ipynb 22
def role_required(role: str                   # The required role
                 ) -> Callable:               # Decorator function
    """Decorator that requires a specific role for a route.
    
    Returns 403 Forbidden if user doesn't have the required role.
    
    Example:
        @rt('/admin')
        @role_required('admin')
        def get(req, sess):
            return "Admin panel"
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(req, sess, *args, **kwargs):
            if not require_role(role, req, sess):
                # Check if user is authenticated but lacks permission
                if require_auth(req, sess):
                    return HTMLResponse(
                        "<h1>403 Forbidden</h1><p>You don't have permission to access this resource.</p>",
                        status_code=403
                    )
                else:
                    return RedirectResponse('/login', status_code=303)
            
            return func(req, sess, *args, **kwargs)
        
        return wrapper
    
    return decorator

# %% ../nbs/02_permissions.ipynb 23
def permission_required(permission: str       # The required permission
                       ) -> Callable:         # Decorator function  
    """Decorator that requires a specific permission for a route.
    
    Returns 403 Forbidden if user doesn't have the required permission.
    
    Example:
        @rt('/users/delete')
        @permission_required('delete_users')
        def post(req, sess, user_id: int):
            # Delete user logic
            pass
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(req, sess, *args, **kwargs):
            if not require_permission(permission, req, sess):
                # Check if user is authenticated but lacks permission
                if require_auth(req, sess):
                    return HTMLResponse(
                        "<h1>403 Forbidden</h1><p>You don't have permission to access this resource.</p>",
                        status_code=403
                    )
                else:
                    return RedirectResponse('/login', status_code=303)
            
            return func(req, sess, *args, **kwargs)
        
        return wrapper
    
    return decorator

# %% ../nbs/02_permissions.ipynb 25
def register_permission(name: str,                        # Permission identifier
                       description: Optional[str] = None  # Human-readable description
                       ) -> None:
    """Register a new permission in the system.
    
    This is optional but helps with documentation and validation.
    """
    if description:
        PERMISSION_DESCRIPTIONS[name] = description

# %% ../nbs/02_permissions.ipynb 26
def get_permissions_for_role(role: str        # The role name
                           ) -> Set[str]:     # Set of permissions
    """Get all permissions assigned to a role."""
    return ROLE_PERMISSIONS.get(role, set()).copy()

# %% ../nbs/02_permissions.ipynb 27
def set_role_permissions(role: str,                              # The role name
                        permissions: Union[Set[str], List[str]]  # Permissions to assign
                        ) -> None:
    """Set permissions for a role, replacing any existing permissions."""
    ROLE_PERMISSIONS[role] = set(permissions) if isinstance(permissions, list) else permissions

# %% ../nbs/02_permissions.ipynb 28
def add_role_permission(role: str,            # The role name
                       permission: str        # Permission to add
                       ) -> None:
    """Add a single permission to a role."""
    if role not in ROLE_PERMISSIONS:
        ROLE_PERMISSIONS[role] = set()
    ROLE_PERMISSIONS[role].add(permission)

# %% ../nbs/02_permissions.ipynb 29
def remove_role_permission(role: str,         # The role name
                          permission: str     # Permission to remove
                          ) -> None:
    """Remove a single permission from a role."""
    if role in ROLE_PERMISSIONS:
        ROLE_PERMISSIONS[role].discard(permission)

# %% ../nbs/02_permissions.ipynb 31
def clear_permission_cache(sess               # The FastHTML Session object
                         ) -> None:
    """Clear cached permissions from session.
    
    Call this after changing a user's role or permissions.
    """
    if '_permissions_cache' in sess:
        del sess['_permissions_cache']
