# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""otmixmod module"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _otmixmod
else:
    import _otmixmod

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import openturns.base
import openturns.common
import openturns.typ
import openturns.statistics
import openturns.graph
import openturns.func
import openturns.geom
import openturns.iterative_statistics
import openturns.diff
import openturns.optim
import openturns.experiment
import openturns.solver
import openturns.algo
import openturns.uncertainty
import openturns.model_copula
import openturns.randomvector
import openturns.dist_bundle1
import openturns.dist_bundle2
import openturns.weightedexperiment
import openturns.classification
import openturns.orthogonalbasis
import openturns.metamodel
import openturns.transformation
import openturns.analytical
import openturns.simulation
import openturns.stattests
import openturns.model_process
import openturns.dist_bundle3
class MixtureFactory(openturns.model_copula.DistributionFactoryImplementation):
    r"""
    Mixture inference.

    Parameters
    ----------
    atomsNumber : int
        The number of atoms
    covarianceModel : str, optional
        The covariance model.
        Default is 'Gaussian_pk_Lk_C'
        See :meth:`GetValidCovarianceModels` for available models

    Notes
    -----
    Each value of the `covarianceModel` parameter defines a specific
    parametrization of the mixture of Gaussians.
    See (Biernacki et al., 2006) table 1 page 290 for details on these
    different parametrizations.

    References
    ----------

    - Biernacki C., Celeux G., Govaert G., Langrognet F., (2006). 
      Model-Based Cluster and Discriminant Analysis with the MIXMOD Software.
      Computational Statistics and Data Analysis, vol. 51/2, pp. 587-600.

    Examples
    --------
    Estimate the parameters of the mixture of 2 Gaussians.

    >>> import openturns as ot
    >>> import otmixmod

    >>> factory = otmixmod.MixtureFactory(2, 'Gaussian_pk_L_Dk_A_Dk')
    >>> sample = [
    ...     [1.5, 0.7],
    ...     [0.2, -0.6],
    ...     [2.1, 0.1],
    ...     [1.2, 2.4],
    ...     [2.2, 0.0],
    ...     [-0.9, -2.1],
    ...     [-1.7, -0.3],
    ...     [0.7, 0.4],
    ...     [-1.2, 1.1],
    ...     [-0.5, -1.1],
    ... ]
    >>> estimatedDistribution, labels, logLikelihood = factory.build(sample)

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getClassName(self):
        r"""
        Accessor to the object's name.

        Returns
        -------
        class_name : str
            The object class name (`object.__class__.__name__`).
        """
        return _otmixmod.MixtureFactory_getClassName(self)

    @staticmethod
    def GetValidCovarianceModels():
        r"""
        Available covariance models names accessor.

        Returns
        -------
        names : :py:class:`openturns.Description`
            Valid covariance model names

        Examples
        --------
        >>> import otmixmod
        >>> otmixmod.MixtureFactory.GetValidCovarianceModels()[:3]
        [Gaussian_p_L_I,Gaussian_p_Lk_I,Gaussian_p_L_B]

        """
        return _otmixmod.MixtureFactory_GetValidCovarianceModels()

    def build(self, *args):
        r"""
        Build the distribution.

        **Available usages**:

            build()

            build(*sample*)

            build(*param*)

        Parameters
        ----------
        sample : 2-d sequence of float
            Data.
        param : sequence of float
            The parameters of the distribution.

        Returns
        -------
        dist : :class:`~openturns.Distribution`
            The estimated distribution.

            In the first usage, the default native distribution is built.
        """
        return _otmixmod.MixtureFactory_build(self, *args)

    def buildAsMixture(self, sample):
        r"""
        Mixture inference.

        Parameters
        ----------
        sample : :py:class:`openturns.Sample`
            Sample

        Returns
        -------
        mixture : :py:class:`openturns.Mixture`
            Inferred distribution

        """
        return _otmixmod.MixtureFactory_buildAsMixture(self, sample)

    def setAtomsNumber(self, number):
        r"""
        Atoms number accessor.

        Parameters
        ----------
        atomsNumber : int
            The number of atoms

        """
        return _otmixmod.MixtureFactory_setAtomsNumber(self, number)

    def getAtomsNumber(self):
        r"""
        Atoms number accessor.

        Returns
        -------
        atomsNumber : int
            The number of atoms

        """
        return _otmixmod.MixtureFactory_getAtomsNumber(self)

    def setCovarianceModel(self, covarianceModel):
        return _otmixmod.MixtureFactory_setCovarianceModel(self, covarianceModel)

    def getCovarianceModel(self):
        return _otmixmod.MixtureFactory_getCovarianceModel(self)

    @staticmethod
    def BuildClusters(data, labels, nbClusters):
        r"""
        Partition a given sample into nbClusters according to the given labels.

        Parameters
        ----------
        data : 2-d sequence of float
            The sample
        labels : sequence of int
            The index of the class of each point in the sample
        nbClusters : int
            The number of clusters in the mixture

        Returns
        -------
        clusters : sequence of :py:class:`openturns.Sample`
            The list of samples corresponding to each class

        """
        return _otmixmod.MixtureFactory_BuildClusters(data, labels, nbClusters)

    def setSeed(self, seed):
        r"""
        Mixmod RNG seed accessor.

        Parameters
        ----------
        seed : int
            Seed used to initialize the Mixmod RNG seed before the learning step.
            A negative seed will randomly initialize the RNG.
            The default value is 0.

        """
        return _otmixmod.MixtureFactory_setSeed(self, seed)

    def __init__(self, *args):
        _otmixmod.MixtureFactory_swiginit(self, _otmixmod.new_MixtureFactory(*args))
    __swig_destroy__ = _otmixmod.delete_MixtureFactory

# Register MixtureFactory in _otmixmod:
_otmixmod.MixtureFactory_swigregister(MixtureFactory)

