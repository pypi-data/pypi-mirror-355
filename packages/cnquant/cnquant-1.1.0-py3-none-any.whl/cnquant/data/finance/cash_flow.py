import pandas as pd
from tqdm.auto import tqdm
from cnquant.config.config_columns import FINANCE_CASH_FLOW_COLUMNS
from cnquant.core.format_symbol import format_symbol_point_exchange
from cnquant.core.get_web_data import get_web_json_content
from cnquant.config.config_data_path import get_file_path_finance_cash_flow
from cnquant.data.symbol.get_symbols import get_all_symbols


def get_finance_cash_flow(symbol):
    f_symbol = format_symbol_point_exchange(symbol)
    base_url = 'https://datacenter.eastmoney.com/securities/api/data/get?type=RPT_F10_FINANCE_GCASHFLOW&sty=APP_F10_GCASHFLOW&filter=(SECUCODE%3D%22{}%22)&p=1&ps&sr=-1&st=REPORT_DATE&source=HSF10&client=PC'
    url = base_url.format(f_symbol)
    print(url)
    data = get_web_json_content(url)['result']['data']
    df = pd.DataFrame(data)

    drop_columns = ['SECUCODE', 'ORG_CODE', 'ORG_TYPE', 'REPORT_TYPE', 'REPORT_DATE_NAME', 'SECURITY_TYPE_CODE', 'NOTICE_DATE', 'UPDATE_DATE', 'CURRENCY', 'LOAN_PBC_ADD', 'OFI_BF_ADD', 'RECEIVE_ORIGIC_PREMIUM', 'RECEIVE_REINSURE_NET', 'INSURED_INVEST_ADD', 'DISPOSAL_TFA_ADD', 'BORROW_FUND_ADD', 'LOAN_ADVANCE_REDUCE', 'REPO_BUSINESS_ADD', 'OPERATE_INFLOW_OTHER', 'OPERATE_INFLOW_BALANCE', 'TOTAL_OPERATE_INFLOW', 'PAY_ORIGIC_COMPENSATE', 'PAY_POLICY_BONUS', 'OPERATE_OUTFLOW_BALANCE', 'OPERATE_NETCASH_OTHER', 'OPERATE_NETCASH_BALANCE', 'DISPOSAL_SUBSIDIARY_OTHER', 'REDUCE_PLEDGE_TIMEDEPOSITS', 'INVEST_INFLOW_OTHER', 'INVEST_INFLOW_BALANCE', 'PLEDGE_LOAN_ADD', 'OBTAIN_SUBSIDIARY_OTHER', 'ADD_PLEDGE_TIMEDEPOSITS', 'INVEST_OUTFLOW_OTHER', 'INVEST_OUTFLOW_BALANCE', 'INVEST_NETCASH_OTHER', 'INVEST_NETCASH_BALANCE', 'ACCEPT_INVEST_CASH', 'SUBSIDIARY_ACCEPT_INVEST', 'RECEIVE_LOAN_CASH', 'ISSUE_BOND', 'RECEIVE_OTHER_FINANCE', 'FINANCE_INFLOW_OTHER', 'FINANCE_INFLOW_BALANCE', 'TOTAL_FINANCE_INFLOW', 'PAY_DEBT_CASH', 'BUY_SUBSIDIARY_EQUITY', 'SUBSIDIARY_REDUCE_CASH', 'FINANCE_OUTFLOW_OTHER', 'FINANCE_OUTFLOW_BALANCE', 'FINANCE_NETCASH_OTHER', 'FINANCE_NETCASH_BALANCE', 'CCE_ADD_OTHER', 'CCE_ADD_BALANCE', 'END_CCE_OTHER', 'END_CCE_BALANCE', 'ASSET_IMPAIRMENT', 'IR_DEPR', 'DEFER_INCOME_AMORTIZE', 'PREPAID_EXPENSE_REDUCE', 'ACCRUED_EXPENSE_ADD', 'PREDICT_LIAB_ADD', 'OTHER', 'OPERATE_NETCASH_OTHERNOTE', 'OPERATE_NETCASH_BALANCENOTE', 'DEBT_TRANSFER_CAPITAL', 'CONVERT_BOND_1YEAR', 'FINLEASE_OBTAIN_FA', 'UNINVOLVE_INVESTFIN_OTHER', 'BEGIN_CASH_EQUIVALENTS', 'CCE_ADD_OTHERNOTE', 'CCE_ADD_BALANCENOTE', 'SALES_SERVICES_YOY', 'DEPOSIT_INTERBANK_ADD_YOY', 'LOAN_PBC_ADD_YOY', 'OFI_BF_ADD_YOY', 'RECEIVE_ORIGIC_PREMIUM_YOY', 'RECEIVE_REINSURE_NET_YOY', 'INSURED_INVEST_ADD_YOY', 'DISPOSAL_TFA_ADD_YOY', 'RECEIVE_INTEREST_COMMISSION_YOY', 'BORROW_FUND_ADD_YOY', 'LOAN_ADVANCE_REDUCE_YOY', 'REPO_BUSINESS_ADD_YOY', 'RECEIVE_TAX_REFUND_YOY', 'RECEIVE_OTHER_OPERATE_YOY', 'OPERATE_INFLOW_OTHER_YOY', 'OPERATE_INFLOW_BALANCE_YOY', 'TOTAL_OPERATE_INFLOW_YOY', 'BUY_SERVICES_YOY', 'LOAN_ADVANCE_ADD_YOY', 'PBC_INTERBANK_ADD_YOY', 'PAY_ORIGIC_COMPENSATE_YOY', 'PAY_INTEREST_COMMISSION_YOY', 'PAY_POLICY_BONUS_YOY', 'PAY_STAFF_CASH_YOY', 'PAY_ALL_TAX_YOY', 'PAY_OTHER_OPERATE_YOY', 'OPERATE_OUTFLOW_OTHER_YOY', 'OPERATE_OUTFLOW_BALANCE_YOY', 'TOTAL_OPERATE_OUTFLOW_YOY', 'OPERATE_NETCASH_OTHER_YOY', 'OPERATE_NETCASH_BALANCE_YOY', 'NETCASH_OPERATE_YOY', 'WITHDRAW_INVEST_YOY', 'RECEIVE_INVEST_INCOME_YOY', 'DISPOSAL_LONG_ASSET_YOY', 'DISPOSAL_SUBSIDIARY_OTHER_YOY', 'REDUCE_PLEDGE_TIMEDEPOSITS_YOY', 'RECEIVE_OTHER_INVEST_YOY', 'INVEST_INFLOW_OTHER_YOY', 'INVEST_INFLOW_BALANCE_YOY', 'TOTAL_INVEST_INFLOW_YOY', 'CONSTRUCT_LONG_ASSET_YOY', 'INVEST_PAY_CASH_YOY', 'PLEDGE_LOAN_ADD_YOY', 'OBTAIN_SUBSIDIARY_OTHER_YOY', 'ADD_PLEDGE_TIMEDEPOSITS_YOY', 'PAY_OTHER_INVEST_YOY', 'INVEST_OUTFLOW_OTHER_YOY', 'INVEST_OUTFLOW_BALANCE_YOY', 'TOTAL_INVEST_OUTFLOW_YOY', 'INVEST_NETCASH_OTHER_YOY', 'INVEST_NETCASH_BALANCE_YOY', 'NETCASH_INVEST_YOY', 'ACCEPT_INVEST_CASH_YOY', 'SUBSIDIARY_ACCEPT_INVEST_YOY', 'RECEIVE_LOAN_CASH_YOY', 'ISSUE_BOND_YOY', 'RECEIVE_OTHER_FINANCE_YOY', 'FINANCE_INFLOW_OTHER_YOY', 'FINANCE_INFLOW_BALANCE_YOY', 'TOTAL_FINANCE_INFLOW_YOY', 'PAY_DEBT_CASH_YOY', 'ASSIGN_DIVIDEND_PORFIT_YOY', 'SUBSIDIARY_PAY_DIVIDEND_YOY', 'BUY_SUBSIDIARY_EQUITY_YOY', 'PAY_OTHER_FINANCE_YOY', 'SUBSIDIARY_REDUCE_CASH_YOY', 'FINANCE_OUTFLOW_OTHER_YOY', 'FINANCE_OUTFLOW_BALANCE_YOY', 'TOTAL_FINANCE_OUTFLOW_YOY', 'FINANCE_NETCASH_OTHER_YOY', 'FINANCE_NETCASH_BALANCE_YOY', 'NETCASH_FINANCE_YOY', 'RATE_CHANGE_EFFECT_YOY', 'CCE_ADD_OTHER_YOY', 'CCE_ADD_BALANCE_YOY', 'CCE_ADD_YOY', 'BEGIN_CCE_YOY', 'END_CCE_OTHER_YOY', 'END_CCE_BALANCE_YOY', 'END_CCE_YOY', 'NETPROFIT_YOY', 'ASSET_IMPAIRMENT_YOY', 'FA_IR_DEPR_YOY', 'OILGAS_BIOLOGY_DEPR_YOY', 'IR_DEPR_YOY', 'IA_AMORTIZE_YOY', 'LPE_AMORTIZE_YOY', 'DEFER_INCOME_AMORTIZE_YOY', 'PREPAID_EXPENSE_REDUCE_YOY', 'ACCRUED_EXPENSE_ADD_YOY', 'DISPOSAL_LONGASSET_LOSS_YOY', 'FA_SCRAP_LOSS_YOY', 'FAIRVALUE_CHANGE_LOSS_YOY', 'FINANCE_EXPENSE_YOY', 'INVEST_LOSS_YOY', 'DEFER_TAX_YOY', 'DT_ASSET_REDUCE_YOY', 'DT_LIAB_ADD_YOY', 'PREDICT_LIAB_ADD_YOY', 'INVENTORY_REDUCE_YOY', 'OPERATE_RECE_REDUCE_YOY', 'OPERATE_PAYABLE_ADD_YOY', 'OTHER_YOY', 'OPERATE_NETCASH_OTHERNOTE_YOY', 'OPERATE_NETCASH_BALANCENOTE_YOY', 'NETCASH_OPERATENOTE_YOY', 'DEBT_TRANSFER_CAPITAL_YOY', 'CONVERT_BOND_1YEAR_YOY', 'FINLEASE_OBTAIN_FA_YOY', 'UNINVOLVE_INVESTFIN_OTHER_YOY', 'END_CASH_YOY', 'BEGIN_CASH_YOY', 'END_CASH_EQUIVALENTS_YOY', 'BEGIN_CASH_EQUIVALENTS_YOY', 'CCE_ADD_OTHERNOTE_YOY', 'CCE_ADD_BALANCENOTE_YOY', 'CCE_ADDNOTE_YOY', 'OSOPINION_TYPE', 'MINORITY_INTEREST', 'MINORITY_INTEREST_YOY']
    # 删除非不需要的列
    df.drop(columns=drop_columns, inplace=True)
    df['REPORT_DATE'] = pd.to_datetime(df['REPORT_DATE']).dt.date
    df.rename(columns=FINANCE_CASH_FLOW_COLUMNS, inplace=True)

    return df


def get_finance_cash_flows(symbols):
    if isinstance(symbols, str):
        symbols = [symbols]
    data_df = pd.DataFrame()
    for symbol in tqdm(symbols):
        print(symbol)
        df = get_finance_cash_flow(symbol)
        data_df = pd.concat([data_df, df], ignore_index=True)
    return data_df


def save_all_finance_cash_flow():
    symbols = get_all_symbols()[1:]
    df = get_finance_cash_flows(symbols)
    df.to_csv(get_file_path_finance_cash_flow(), index=False, encoding='utf-8-sig')


if __name__ == '__main__':
    save_all_finance_cash_flow()
    # df = get_finance_cash_flow('600004')
    # print(df.head())


