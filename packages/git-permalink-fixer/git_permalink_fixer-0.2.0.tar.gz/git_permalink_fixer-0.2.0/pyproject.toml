[project]
name = "git-permalink-fixer"
version = "0.2.0"
description = "A tool to find, replace, and protect GitHub permalinks in your project."
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "huyz", email = "huyz@users.noreply.github.com" }
]
keywords = ["git", "github", "permalink", "git-tag"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Utilities",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
requires-python = ">= 3.9"
dependencies = [
    "requests>=2.32.3",  # For checking referenced lines in permalinks
]

[project.scripts]
"git-permalink-fixer" = "git_permalink_fixer:main"

[project.urls]
"Homepage" = "https://github.com/huyz/git-permalink-fixer"
"Bug Tracker" = "https://github.com/huyz/git-permalink-fixer/issues"
"Repository" = "https://github.com/huyz/git-permalink-fixer"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/CHANGELOG.md",
    "/LICENSE",
    "/pyproject.toml",
    "/.github",
]

[tool.hatch.build.targets.wheel]
packages = ["src/git_permalink_fixer"]

[tool.rye]
managed = true
dev-dependencies = [
    "pytest>=8.4.0",
    "pytest-mock>=3.14.1",
    "types-requests>=2.32.0.20250602",
    # pytest needs setuptools and rye doesn't install it by default
    "setuptools>=80.9.0",
    "pytest-cov>=6.1.1",
    "mypy>=1.16.0",
    "pylint>=3.3.7",
]
line-length = 120  # Default is 88

[tool.black]
line-length = 120  # Default is 88

[tool.isort]
profile = "black"

[tool.prettier]
tabWidth = 4  # Default is 2

[tool.ruff]
line-length = 120  # Default is 88

[tool.ruff.lint]
#select = ["F", "E", "W", "C", "I", "N"]
ignore = ["F541"]  # Ignore unused variable in f-string

[tool.mypy]
exclude_gitignore = true
exclude = ["tests"]

[tool.pylint.config]
disable = ["missing-module-docstring", "missing-class-docstring", "missing-function-docstring", "line-too-long",
    "too-many-lines", "too-many-locals", "too-many-arguments", "too-many-positional-arguments", "too-many-branches",
    "too-many-statements", "too-many-nested-blocks", "too-many-return-statements", "too-many-instance-attributes",
    "too-few-public-methods", "too-many-public-methods", "f-string-without-interpolation"]

[tool.pylint.MASTER]
# Ignore dotfiles and directories, venv, and tests
ignore-paths = ['^(.*/|)[.].*', '^(.*/|)[.]?venv/.*', '^(.*/|)tests/.*']

[tool.pylint.FORMAT]
max-line-length = 120

[tool.flake8]
max-line-length = 120

[tool.pytest.ini_options]
testpaths = ["tests"]
