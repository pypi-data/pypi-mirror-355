from Illuminate.Collections.Collection import Collection as Collection
from djing.core.AuthorizesRequests import AuthorizesRequests
from djing.core.HandleRoutes import HandleRoutes
from djing.core.Http.Requests.DjingRequest import DjingRequest
from djing.core.InteractsWithEvents import InteractsWithEvents
from djing.core.PendingRouteRegistration import PendingRouteRegistration
from djing.core.ResourceCollection import ResourceCollection
from djing.core.Tool import Tool as Tool
from pathlib import Path
from typing import Any, Callable, Self

class Djing(AuthorizesRequests, HandleRoutes, InteractsWithEvents):
    @classmethod
    def flush_state(cls, event: str, request: DjingRequest): ...
    @classmethod
    def script(cls, name: str, path: str) -> Self: ...
    @classmethod
    def style(cls, name: str, path: str) -> Self: ...
    @classmethod
    def when_serving(cls, callback, default) -> Any: ...
    @classmethod
    def with_authentication(cls) -> Djing: ...
    @classmethod
    def with_breadcrumbs(cls, with_breadcrumbs: bool = True) -> type['Djing']: ...
    @classmethod
    def breadcrumbs_enabled(cls) -> bool: ...
    @classmethod
    def without_global_search(cls) -> type['Djing']: ...
    @classmethod
    def authorized_resources(cls, request: DjingRequest) -> ResourceCollection: ...
    @classmethod
    def globally_searchable_resources(cls, request: DjingRequest) -> list[tuple[Any, Any]]: ...
    @classmethod
    def has_globally_searchable_resources(cls) -> bool: ...
    @classmethod
    def main_menu(cls, callback: Callable[[Any], Any]) -> Djing: ...
    @classmethod
    def resolve_main_menu(cls, request: DjingRequest): ...
    @classmethod
    def default_main_menu(cls, request: DjingRequest): ...
    @classmethod
    def logo(cls) -> str | None: ...
    @classmethod
    def brand_colors(cls) -> list: ...
    @classmethod
    def username_field(cls) -> str: ...
    @classmethod
    def path(cls) -> str: ...
    @classmethod
    def base_directory(cls) -> str: ...
    @classmethod
    def app_directory(cls) -> Path: ...
    @classmethod
    def login_path(cls) -> str: ...
    @classmethod
    def initial_path(cls, callback: Callable[[Any], Any]) -> Djing: ...
    @classmethod
    def resolve_initial_path(cls, request: DjingRequest) -> str: ...
    @classmethod
    def routes(cls) -> PendingRouteRegistration: ...
    @classmethod
    def tools(cls, tools: list[Tool]) -> Djing: ...
    @classmethod
    def user(cls, request: DjingRequest): ...
    @classmethod
    def json_variables(cls, request: DjingRequest): ...
    @classmethod
    def resource_information(cls, request: DjingRequest): ...
    @classmethod
    def footer(cls, callback: Callable[[Any], Any]) -> type['Djing']: ...
    @classmethod
    def default_footer(cls, request: DjingRequest): ...
    @classmethod
    def resolve_footer(cls, request: DjingRequest): ...
    @classmethod
    def provide_to_script(cls, variables: dict[str, Any]) -> Djing: ...
    @classmethod
    def version(cls): ...
    @classmethod
    def check_license_validity(cls) -> bool: ...
    @classmethod
    def check_license(cls) -> int: ...
    @classmethod
    def decrypt_license_data(cls, encrypted_data: str, secret_key: str) -> str | None: ...
    @classmethod
    def update_license_info(cls, request: DjingRequest, cache_file: str, secret_key: str) -> int: ...
    @classmethod
    def should_recheck(cls, cache_data: dict, cache_duration: float): ...
    @classmethod
    def dashboards(cls, dashboards) -> Djing: ...
    @classmethod
    def available_dashboards(cls, request: DjingRequest): ...
    @classmethod
    def available_resources(cls, request: DjingRequest): ...
    @classmethod
    def available_tools(cls, request: DjingRequest) -> list[Tool]: ...
    @classmethod
    def boot_tools(cls, request: DjingRequest): ...
    @classmethod
    def resources(cls, resources) -> Djing: ...
    @classmethod
    def all_available_dashboard_cards(cls, request: DjingRequest) -> Collection: ...
    @classmethod
    def resources_in(cls, resource_path: Path): ...
    @classmethod
    def humanize(cls, value) -> str: ...
    @classmethod
    def grouped_resources_for_navigation(cls, request: DjingRequest): ...
    @classmethod
    def sort_resources_by(cls, callback) -> Djing: ...
    @classmethod
    def sort_resources_with(cls): ...
    @classmethod
    def dashboard_for_key(cls, key, request: DjingRequest): ...
    @classmethod
    def resource_for_key(cls, key): ...
    @classmethod
    def available_dashboard_cards_for_dashboard(cls, key, request: DjingRequest): ...
