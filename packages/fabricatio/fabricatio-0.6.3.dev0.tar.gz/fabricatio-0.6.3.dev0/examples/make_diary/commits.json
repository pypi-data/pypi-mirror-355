{
  "2025-02-22": "fix: update .gitignore to ignore all files in extra/scripts directory",
  "2025-02-20": "refactor(role): change toolboxes default to empty set for better initialization refactor(parser): improve error logging in text conversion process feat(curd): add dump_text function to write text to a file refactor(advanced): improve task logging format for better readability refactor(action): update WorkFlow class to allow action types in steps feat(models): enhance code drafting with data dependencies and debugging feat(config): add data module name to settings refactor(python): improve ToolExecutor and introduce data injection feat(decorators): add use_temp_module decorator refactor(task): change task goal to list of strings refactor(task_briefing): improve dependency and goal display format feat(template-download): add template copy functionality feat(usages): add apick method for asynchronous single choice selection with AI validation chore(build): update dependency installation to use PyPI index chore(version): bump version to 0.2.0-dev.20 fix(llm_usage): update output_key to be more descriptive build(deps): add asyncstdlib as a dependency feat(usages): enhance aquery method to support CustomStreamWrapper response type feat(debug): add log file rotation and retention configuration fix(fabricatio): add warning when task output key is missing in the context refactor(task): enhance task logging and status updates docs(README): add additional features and modules sections test(models): add comprehensive tests for LLMUsage and ToolBoxUsage test: improve test coverage and add new test cases feat(llm_usages): implement code and documentation writing using LLM refactor(examples): update propose.py to simplify _execute method fix(models): update dependency name extraction for paths feat(task): implement task briefing template and update dependencies template",
  "2025-02-21": "feat: update version to 0.2.1-dev0 and adjust Python requirements in pyproject.toml; add upload step in Makefile fix: bump version to 0.2.1 in pyproject.toml feat(core): update logging and task handling Merge remote-tracking branch 'origin/master' docs: enhance README.md with detailed installation, usage instructions, and examples docs: enhance README.md with detailed installation, usage instructions, and examples fix(tests): update Task goal parameter to accept list format in test cases ci: update workflow files to correct job structure for OS matrix ci: restructure workflow file formats- Update build-package.yaml and tests.yaml workflow files - Adjust job structure for better readability and consistency - Reorder sections to match recommended GitHub Actions format Merge remote-tracking branch 'origin/master' feat(tests): enhance CI workflow to support multiple OS environments feat(tests): enhance CI workflow to support multiple OS environments refactor(template_download): streamline template directory path retrieval chore(version): update version to 0.2.0 in project files feat(actions): add WriteCode, DumpCode, and WriteDocumentation actions refactor(fabricatio): improve function execution and confirmation process chore(version): bump version to 0.2.0-dev.21 in project files refactor(fabricatio): enhance tool handling and logging refactor(actions): rename and repurpose Talk action to Examining fix(fs): fix typo in dump_text docstring and update fs toolbox refactor(fabricatio): enhance task briefing and choice making",
  "2025-02-08": "refactor(hello_fabricatio): update task handling and imports feat(task): add delegate method to Task class feat(task): add task publishing mechanism- Implement a new `publish` method in the Task class - This method emits a pending label to the environment- Logging is added for better traceability feat(config): add pyproject_toml_table_header configuration feat(tool): enhance Tool and ToolBox classes",
  "2025-02-09": "build: bump version to 0.1.1 docs(README): add usage instructions and configuration examples build(deps): add uv as a dependency docs(init): update library documentation and code structure build(dependencies): update project dependencies and linting rules refactor(fabricatio): improve type annotations and class documentation refactor(examples): improve structure and documentation of hello_fabricatio.py- Add docstrings to Action and main function - Include type annotations for better code clarity - Update class and function ci: update linting rules and remove unused imports ci: update branch name and add pull request trigger ci: remove ruff check and format steps refactor(fabricatio): organize imports and adjust code structure ci: replace pre-commit with ruff refactor(models): update Role class and improve type annotations test: remove unused event handler test- Remove the entire test_env_on_event function from test_core.py - This test was likely an old API test that is no longer relevant build(dev): add pytest-asyncio dependency test(models): add tests for tool and toolbox briefing style(models): add empty lines for better code separation feat(task): implement simple task creation and task toolbox feat(parser): add specific captures for JSON and Python code blocks refactor(fabricatio/models/generic.py): improve code structure and usability- Update class docstrings for better code organization and understanding - Refactor LLMUsage class to provide more user-friendly methods - Add asynchronous methods for invoking and asking LLM - Improve method documentation across all classes - Standardize argument descriptions and return types feat(parser): enhance Capture class to support code block extraction",
  "2025-02-02": "feat(config): implement configuration management for Fabrik build(fabrik): add dependencies and configure package mirrors ci(fabrik): add GitHub Actions for build, release, and pre-commit feat(fabrik): initialize new Python project with basic structure",
  "2025-02-03": "refactor(models): abstract Action and integrate WithBriefing refactor(fabricatio/models/generic.py): reorganize import statements for better readability refactor(models): update Tool class with ParamSpec and TypeVar refactor: remove unused Deposit model and TODO functionality feat(models): implement ToolBox and Tool classes feat(logger): add rich traceback support- Import rich traceback module for enhanced error handling - Install rich traceback to improve error message formatting build(deps): add rich as a dependency build(deps): remove rich and tiktoken dependencies feat(models): implement generic models and rename project refactor: rename package from fabrik to fabricatio feat(config): add debug configuration and implement logging docs: add MIT LICENSE file feat(config): enhance LLM configuration with new parameters",
  "2025-02-04": "feat(models): enhance Action class and add LLM configuration methods build: update dependency litellm from 1.60.0 to 1.60.2- Update litellm package from version 1.60.0 to 1.60.2- Update corresponding URLs and hash values for the new version test(models): update test cases to include name parameters test: update config tests and remove logger tests build(dependencies): add development and CLI dependencies refactor(fabricatio): update imports and refactor message serialization test: add unit tests for fabricatio modules feat(__init__.py): update module exports and remove hello function feat(models): integrate LLMUsage with Action, Workflow, and Role style(fabricatio): apply formatting and import optimizations refactor(pyproject): update project classifiers and dependencies feat(core): implement Env class for event handling feat(models): implement Event class for event handling refactor(fabricatio): add model config for pydantic docstring usage build(dependencies): update email and add optional dependencies feat(core): implement event emitter and fs capabilities feat(models): implement WorkFlow and update Role",
  "2025-02-05": "refactor(fabricatio/models/generic.py): make LLMUsage attributes optional and add fallback mechanism",
  "2025-02-06": "refactor(fabricatio): implement Task model and update Action interface feat(parser): add Capture class for regex pattern matching build(deps): add regex and remove llm-ie dependencies test(core): add unit tests for Event class and Env's event handling methods- Add tests for Event class methods: clone, pop, concat, collapse, eq, push, clear - Add tests for Env class methods: on, once, emit, emit_async - Move Event import to Env test file for better organization refactor(models): add docstrings and improve method descriptions feat(core): implement task management and workflow execution refactor(fabricatio): update type annotation in LLMUsage.fallback_to feat(events): add hash and equality support for Event objects refactor(core): improve type annotations and code formatting feat(pyproject): add llm-ie dependency and configure ruff",
  "2025-02-07": "feat(core): implement configurable EventEmitter options- Add new_listener_event and max_listeners options to PyMitterConfig- Initialize EventEmitter in Fabricatio class with configurable options ci: upload to PyPI when version changes refactor(logging): rename logging module to journal and update logging setup fix(models): remove unnecessary context call and update output key chore(examples): add logger output for task emission in hello_fabricatio.py refactor(fabricatio): implement async workflow and task handling feat(core): implement task output queue and improve action execution logging refactor(fabricatio): update default factory for WorkFlow._context feat(config): add PymitterConfig and update Event handling feat(models/role): add logging for workflow registration docs(parser): remove examples from Capture class documentation refactor(fabricatio): improve workflow handling and event management",
  "2025-02-19": "build: update package version to 0.2.0-dev.19 refactor(models): update Action and WorkFlow classes feat(__init__.py): import and expose new toolboxes feat(fs): add confirmation prompt for potentially destructive file operations feat(fs): add safe_text_read function for error-free file reading refactor(examples): improve task example logging output feat(fabricatio): implement advanced template handling and prompt generation refactor(fabricatio): consolidate template rendering functions and improve data handling refactor(fabricatio): rewrite TemplateManager for efficiency and usability feat(fabricatio): add BLAKE3 hash function",
  "2025-02-18": "refactor(models): replace template names with config variables refactor(fabricatio): enhance response validation with logging refactor(workflow): improve context initialization and adjust stop sign feat(task): enhance task movement and improve logging refactor(fabricatio/models/role.py): improve Role class structure and functionality feat(parser): improve code block capturing for Fabricatio refactor(fabricatio): update EventLike type alias refactor(models): add type hinting to `propose` method feat(toolboxes): add fs_toolbox to basic_toolboxes set build: update package version to 0.2.0-dev.18 feat(models): add tool usage code drafting functionality feat(models): implement task handling and tool usage drafting",
  "2025-02-13": "feat: implement Python bindings for Rust code feat: add CLI tool to download and extract templates from GitHub build: switch to maturin and remove unused dependencies docs: add module docstrings to all source files",
  "2025-02-12": "refactor(models): remove unused classes and update documentation build(fabricatio): update dependency and ignore lint warnings feat(template_download): add default output directory for templates build(deps): update fabricatio to latest version ci: add GitHub Actions workflow for tests refactor(fabricatio): improve template directory handling and configuration test: refactor test code and add new test cases feat(template): implement template manager and update related modules build: update package version to 0.2.0-dev.2- Increment package version from 0.2.0-dev.1 to0.2.0-dev.2 feat(template): add template download and extraction functionality refactor(fabricatio): reorganize modules and update task proposal mechanism- Move `ProposeTask` class from `generic.py` to `task.py` - Update `Role` class to use the new location of `ProposeTask` - Refactor `hello_fabricatio.py` example to use a more descriptive class name - Update `transmission.py` to remove unnecessary comments - Modify `__init__.py` files to include new imports and exclude unused ones - Update `config.py` to change template directory and add template suffix field ci: add template packaging and release upload feat: add built-in templates for various coding tasks perf(models): chain workflow setup methods- Combine fallback_to and inject_personality method calls for efficiency - Improve code readability by using method chaining feat(deps): add viztracer and update dependencies feat(core): implement propose task functionality and enhance workflows build: update package version to 0.2.0-dev.1- Increment package version from 0.2.0-dev.0 to0.2.0-dev.1 refactor(actions): rename SendTask to PublishTask and improve task transmission feat(models): enhance WorkFlow class with generic type and extra initialization context docs(README): add comprehensive documentation and examples build(deps): remove shutilwhich dependency build(deps): add shutilwhich dependency and update package sources build(deps): add questionary and update dependencies docs(simple_chat): add basic chatbot example feat(config): add Magika configuration and integrate with Code2Prompt build(deps): add magika to the list of dependencies feat(models): add `WithDependency` class for managing file dependencies feat(task): add move_to method and update dependencies feat(config): update log file path and template directory",
  "2025-02-11": "feat(config): add code2prompt configuration and improve config file handling feat(parser): add generic code block capture refactor(events): introduce EventLike type for event instantiation and derivation feat(decorators): add depend_on_external_cmd decorator build(deps): add code2prompt and update dependencies refactor(fabricatio): enhance Event instantiation and equality comparison feat(task): add dependencies and namespace properties feat(events): add wildcard segment support- Implement push_wildcard method in Event class - Add wildcard segment  to support more flexible event patterns refactor(task): enhance task publishing and delegation feat(task): implement task namespaces and simplify event handling feat(task): add file dependencies to tasks build: bump version to 0.1.3 docs(fabricatio/actions): add module docstring and update __init__.py feat(actions): implement SendTask action for task transmission feat(task): enhance Task class with event handling and improve documentation feat(events): enhance Event.concat to accept string input",
  "2025-02-10": "build: bump version to 0.1.2 feat(role): implement task proposal with JSON validation feat(config): add additional stop sign for LLM model feat(parser): add regex flags to Pattern model test(test_parser): improve test_capture function build: update .gitignore to exclude virtual environment directories refactor(models): remove model_post_init and update aquery to use configs- Remove model_post_init method to simplify model initialization - Update aquery method to use configs for API key and endpoint - Improve code readability and reduce redundancy test(test_action): update task status assertion feat(config): update `stop_sign` to accept list of strings and set default value refactor(task): make Task a WithJsonExample and enhance its attributes feat(llm): enhance LLMUsage with validation and JSON example build(deps): add orjson and bump version",
  "2025-02-17": "refactor(models): split kwargs types into separate module build(deps): update code2prompt to specific revision build: update package version to 0.2.0-dev.16 refactor(models): improve error handling and validation feat(toolbox): implement tool selection and gathering functionality refactor(models): consolidate LLM usage parameters and improve type safety refactor(llm): implement kwargs handling for LLM usage and add toolbox selection method refactor(fabricatio): add docstrings and improve error handling feat(toolbox): implement dynamic toolbox configuration and loading build: update package version to 0.2.0-dev.15 feat(models): add ToolExecutor class and enhance ToolBox docs(fs): add module docstrings for curd and readers test(models): update test cases and remove unused imports refactor(models): split models into separate modules build(deps): update fabricatio version feat(models): relocate and extend toolbox functionality refactor(decorators): improve error handling and user confirmation for external commands- Update depend_on_external_cmd decorator to handle optional install tips - Improve error message for missing binaries - Modify user confirmation prompt for better readability - Update logger messages with more detailed function signatures",
  "2025-02-16": "feat(decorators): add confirm_to_execute decorator for function confirmation feat(config): add general configuration options- Introduce GeneralConfig class for global settings - Add workspace directory and file system operation confirmation options - Update Settings class to include general configuration feat(fs): add CRUD operations for file system feat(decorators): enhance depend_on_external_cmd decorator feat(template): add template suffix support and refactor template management build: update package version to 0.2.0-dev.14 feat(core): implement toolboxes and update related components build: update package version to 0.2.0-dev.13 feat(models): enhance `ajudge` function with conditional cases feat(llm): add judgment method and multi-choice support",
  "2025-02-15": "chore: add project URLs and update arithmetic toolbox build: bump version to 0.2.0-dev.12- Update project version from 0.2.0-dev.11 to 0.2.0-dev.12 in pyproject.toml feat(models): implement multi-choice decision making and improve tool handling refactor(action): implement hold_to method and simplify fallback handling refactor(models): improve LLMUsage class and update imports feat(models): add ToolUsage class and enhance Tool class feat(toolbox): add arithmetic toolbox and refactor tool briefing build: bump version to 0.2.0-dev.11- Update project version from 0.2.0-dev.10 to 0.2.0-dev.11 in pyproject.toml refactor(fabricatio): remove unused imports and reorganize code refactor(fabricatio): implement template-based task proposal",
  "2025-02-14": "build: bump version to 0.2.0-dev.10- Update project version from 0.2.0-dev.9 to0.2.0-dev.10 in pyproject.toml feat(template): implement template manager in Rust and update Python bindings refactor(fabricatio): remove TemplateManager implementation and update type stubs- Remove TemplateManager class implementation from templates refactor(python): improve Python bindings for TemplateManager feat(template): implement TemplateManager for Rust chore(template_download): remove compressed file after extraction feat(tools): update template downloader and add config directory support ci(build): update workflow and packaging scripts ci(build): update version and add Linux build ci: rearrange build steps for improved clarity build(fabricatio): update dependency installation and versioning chore(deps): add maturin-import-hook and update related files build: bump version to 0.2.0-dev.5 ci: update package publishing process build: bump version to 0.2.0-dev.4 build: update `bdist` target to use editable mode build: update Cargo projects and remove maturin installation step ci: set nightly as default rust version ci(build-package): rearrange rust nightly installation step build: update Cargo projects to Rust2024 edition build: downgrade Rust edition and update dev dependencies build(deps): remove unused dev dependencies build(ci): update workflow and add maturin installation ci(build-package): update Rust toolchain installation process ci(github-actions): add minimal nightly toolchain install step refactor(fabricatio): reorganize import statements for better readability build: bump version to 0.2.0-dev.3 build: implement Maturin-based build process for the project"
}