name: Build and Release

on:
  push:
    branches:
      - master
    paths:
      - "src/**"
      - "python/**"
      - "packages/*/python/**"
      - "packages/*/src/**"
      - "**/pyproject.toml"
      - "**/cargo.toml"
  pull_request:
    branches:
      - master
    paths:
      - "src/**"
      - "python/**"
      - "packages/*/python/**"
      - "packages/*/src/**"
      - "**/pyproject.toml"
      - "**/cargo.toml"



jobs:
  determine_changes:
    name: Determine Release Necessity & Version Details
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version_change.outputs.VERSION_CHANGED }}
      current_version: ${{ steps.get_version.outputs.CURRENT_VERSION }}
      is_prerelease: ${{ steps.check_prerelease.outputs.IS_PRERELEASE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get current version from pyproject.toml
        id: get_version
        run: |
          CURRENT_VERSION_RAW=$(grep '^version' pyproject.toml | cut -d '"' -f 2)
          echo "CURRENT_VERSION=v$CURRENT_VERSION_RAW" >> $GITHUB_OUTPUT
        shell: bash
      - name: Get latest git tag
        uses: JinoArch/get-latest-tag@latest
        id: tag
      - name: Check if version has changed against latest tag
        id: check_version_change
        run: |
          LATEST_TAG=${{ steps.tag.outputs.latestTag }}
          VERSION_FROM_PYPROJECT=${{ steps.get_version.outputs.CURRENT_VERSION }}
          echo "Latest git tag is $LATEST_TAG"
          echo "Current version (from pyproject.toml, prefixed with 'v') is $VERSION_FROM_PYPROJECT"
          if [ "$LATEST_TAG" != "$VERSION_FROM_PYPROJECT" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Check if current version is a prerelease
        id: check_prerelease
        run: |
          VERSION_FROM_PYPROJECT=${{ steps.get_version.outputs.CURRENT_VERSION }}
          if [[ "$VERSION_FROM_PYPROJECT" == *"-"* ]]; then # e.g., v1.0.0-alpha
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi
        shell: bash


  create-release:
    if: needs.determine_changes.outputs.version_changed == 'true' && github.event_name != 'pull_request'
    name: Create Release
    needs: determine_changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Packing templates
        run: |
          tar -czf templates.tar.gz templates
      - name: Create Release and upload assets
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine_changes.outputs.current_version }}
          name: ${{ needs.determine_changes.outputs.current_version }}
          files: |
            templates.tar.gz
          prerelease: ${{ needs.determine_changes.outputs.is_prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}



  check-and-release:
    name: Build, Package, and Release
    needs:
      - create-release
      - determine_changes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        python-version: [ "3.12", "3.13" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "latest"
      - name: Install nightly rust
        run: |
          rustup default nightly
      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - name: Install deps
        run: |
          uv sync --no-install-project --only-dev --index https://pypi.org/simple -p ${{ matrix.python-version }} 

      - name: Upload to PyPI
        if: needs.determine_changes.outputs.version_changed == 'true' && github.event_name != 'pull_request'
        run: |
          make publish PY=${{ matrix.python-version }}
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          UV_INDEX: https://pypi.org/simple
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Upload assets
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine_changes.outputs.current_version }}
          append_body: false
          files: |
            dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
