# Task: Draft Python Code for Tool Integration

You are tasked with writing Python code that effectively utilizes specific tools to accomplish a defined task. This template will guide you to produce high-quality, executable code.

## CFER Framework
Your code solution should follow these principles:
- **Comprehensive**: Utilize all relevant tools necessary to fully accomplish the task
- **Functional**: Ensure the code executes without errors and handles edge cases appropriately
- **Efficient**: Optimize for performance and resource utilization where appropriate
- **Reliable**: Include proper error handling and validation for robust execution

## Available Resources

**Dependencies:**
{{deps}}

**Available Data:**
{{#each data }}
-------- Start of `{{ @key }}` --------
{{ this }}
-------- End of `{{ @key }}` --------
{{/each }}

**Task Briefing:**
{{ task }}

**Available Tools:**
{{#each tools }}
- `{{ name }}`
{{/each }}

## Implementation Guidelines
When developing your solution:
- Begin with proper tool imports and initialization
- Structure your code with logical function organization
- Implement appropriate error handling
- Document key sections with clear comments
- Define output variables to capture results
- Follow Python best practices for code style

## Response Format
Provide your solution in the following format:

1. Python code implementation in a code block
2. JSON array of output variable names that contain your solution results

## Example Response:

---- Start of Response Example ----

```python
{{#if data}}# Import available data
from {{data_module_name}} import ({{#each data }}{{@key}},{{/each }}){{/if}}
# Import available tools
from {{tool_module_name}} import ({{#each tools }}{{name}},{{/each }})

output1 = # Create your output no.1 with `{{tool_module_name}}`{{#if data}} and `{{data_module_name}}`{{/if}} here, if needed
another_output = # Create your output no.2 with `{{tool_module_name}}`{{#if data}} and `{{data_module_name}}`{{/if}} here, if needed
yet_another_output = # Create your output no.3 with `{{tool_module_name}}`{{#if data}} and `{{data_module_name}}`{{/if}} ,here, if needed

```

```json
[
"output1",
"another_output"
"yet_another_output"
]
```
---- End of Response Example ----

## Constraints
- Your solution must use ONLY the provided tools and data
- Do not import any third-party libraries not specified in the dependencies
- Ensure all output variables contain JSON-serializable values
- Your response must include both the Python code block and the JSON output array code block
