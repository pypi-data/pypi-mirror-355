# pyproject.toml

[build-system]
requires = ["setuptools>=61.0"] # Specify minimum setuptools version
build-backend = "setuptools.build_meta"

[project]
name = "peersight"
version = "0.1.1" # Sync this with src/peersight/__init__.py (manual for now)
authors = [
    { name="AbdElKader Seif El Islem RAHMANI", email="a.e.k426rahmani@gmail.com" },
]
description = "PeerSight: An AI-powered command-line tool for simulating academic paper reviews using local LLMs via Ollama."
readme = "README.md" # Path to your README file
requires-python = ">=3.9" # Specify minimum Python version
license = { text = "MIT" } # Choose an appropriate license (e.g., MIT, Apache-2.0) or remove if private
keywords = ["ai", "llm", "ollama", "review", "academic", "nlp", "cli"]
classifiers = [
    "Development Status :: 3 - Alpha", # Development stage
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License", # Match license above
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Environment :: Console",
    "Topic :: Scientific/Engineering",
    "Topic :: Text Processing :: Linguistic",
    "Operating System :: OS Independent", # Assuming it is
]

# List project dependencies (copied from requirements.txt)
# Keep requirements.txt for editable installs / dev environment sync for now
dependencies = [
    "python-dotenv",
    "requests",
    "pypdf",
    # Testing dependencies are often handled separately (see [project.optional-dependencies])
]

[project.optional-dependencies]
# Define dependencies needed only for testing or development
test = [
    "pytest",
    "pytest-mock",
]
# Add a 'dev' group combining test and build tools
dev = [
    # List the *actual* packages needed for dev, not the project itself
    "pytest",          # Directly list test deps needed for dev
    "pytest-mock",
    "build",          # Add the build tool
    # Add other dev tools like linters later (e.g., "black", "ruff")
    "black",
    "ruff",
    "pre-commit", # Add pre-commit
    "twine",
    "pypdf",
]

# Define where the package source code is located
[tool.setuptools.packages.find]
where = ["src"]  # look in the src directory for packages

# Define the command-line script entry point
[project.scripts]
peersight = "peersight.main:run"

# Add configuration sections for the tools
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']

[tool.ruff]
line-length = 88 # Match black's line length
src = ["src"] # Tell ruff where your main source code lives
# Specify Python version Ruff should target (belongs here)
target-version = "py39" # Set to your minimum supported version

# Use the 'lint' subsection for selecting/ignoring rules
[tool.ruff.lint]
select = [
    "E", "W", "F", "I", "C", "B",
]
ignore = [
    "E501", # Line too long (handled by black)
    "C901", # Temporarily ignore Function is too complex
]

# Ignore E402 (import not at top) specifically for test files
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["E402"] # Pattern matches all .py files in tests dir

# Optional: isort specific configurations go under lint.isort
[tool.ruff.lint.isort]
# Add other isort settings here if needed, e.g.:
# force_sort_within_sections = true

# Optional: Configure Ruff's formatter (if used instead of/alongside black)
[tool.ruff.format]
# quote-style = "double"

# Optional: Define URLs for repository, documentation, etc.
[project.urls]
"Homepage" = "https://github.com/RAHAMNIabdelkaderseifelislem/PeerSight"
"Bug Tracker" = "https://github.com/RAHAMNIabdelkaderseifelislem/PeerSight/issues"
