[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tektra"
version = "0.4.0"
description = "Advanced AI assistant with voice, vision, and robotics capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tektra Team", email = "contact@tektra.ai"}
]
maintainers = [
    {name = "Tektra Team", email = "contact@tektra.ai"}
]
keywords = ["ai", "assistant", "voice", "vision", "robotics", "ml", "chatbot"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "greenlet>=3.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "websockets>=12.0",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
]
ml = [
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "accelerate>=0.24.0",
    "optimum>=1.14.0",
    "numpy>=1.24.0",
    "mlx>=0.4.0; sys_platform == 'darwin'",
    "mlx-lm>=0.4.0; sys_platform == 'darwin'",
    "huggingface-hub>=0.20.0",
]
audio = [
    "soundfile>=0.12.0",
    "librosa>=0.10.0",
    "pyaudio>=0.2.11",
    "numpy>=1.24.0",
]
vision = [
    "opencv-python>=4.8.0",
    "mediapipe>=0.10.0",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
]
robotics = [
    "pyserial>=3.5",
    "pybullet>=3.2.5",
    "numpy>=1.24.0",
]
all = [
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "accelerate>=0.24.0",
    "optimum>=1.14.0",
    "mlx>=0.4.0; sys_platform == 'darwin'",
    "mlx-lm>=0.4.0; sys_platform == 'darwin'",
    "huggingface-hub>=0.20.0",
    "soundfile>=0.12.0",
    "librosa>=0.10.0",
    "pyaudio>=0.2.11",
    "opencv-python>=4.8.0",
    "mediapipe>=0.10.0",
    "pyserial>=3.5",
    "pybullet>=3.2.5",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
]

[project.urls]
Homepage = "https://tektra.ai"
Documentation = "https://docs.tektra.ai"
Repository = "https://github.com/tektra/tektra-ai"
"Bug Reports" = "https://github.com/tektra/tektra-ai/issues"

[project.scripts]
tektra = "tektra.cli:main"
tektra-server = "tektra.server:main"
tektra-setup = "tektra.setup:main"

[tool.setuptools]
package-dir = {"" = "backend"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["backend"]

[tool.setuptools.package-data]
tektra = [
    "frontend/**/*",
    "static/**/*",
    "templates/**/*",
    "config/*",
    "data/*",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true