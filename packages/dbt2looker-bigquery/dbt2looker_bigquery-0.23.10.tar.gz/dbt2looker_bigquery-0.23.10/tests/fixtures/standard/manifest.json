{
  "nodes": {
    "model.demo.example_retail_data__fact_daily_sales.v1": {
      "database": "aexample-project-123",
      "schema": "retail_data",
      "name": "example_retail_data__fact_daily_sales",
      "resource_type": "model",
      "package_name": "demo",
      "path": "example/retail_data/example_retail_data__fact_daily_sales_v1.sql",
      "original_file_path": "models/example/retail_data/example_retail_data__fact_daily_sales_v1.sql",
      "unique_id": "model.demo.example_retail_data__fact_daily_sales.v1",
      "fqn": [
        "demo",
        "example",
        "retail_data",
        "example_retail_data__fact_daily_sales",
        "v1"
      ],
      "alias": "fact_daily_sales_v1",
      "checksum": {
        "name": "sha256",
        "checksum": "05316e3f742b9df26f9debf6acbc249266d8384677a5502303f8e74eed8f611c"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "retail_data",
        "database": null,
        "tags": ["intraday", "backfill", "consumer_sales", "pos"],
        "meta": {
          "demo_layer": "example",
          "owner": "BICA_store_and_sales",
          "model_maturity": "stable"
        },
        "group": "store_and_sales",
        "materialized": "incremental",
        "incremental_strategy": "insert_overwrite",
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "column_types": {},
        "full_refresh": false,
        "unique_key": null,
        "on_schema_change": "fail",
        "on_configuration_change": "apply",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "contract": {
          "enforced": true,
          "alias_types": true
        },
        "access": "protected",
        "labels": {
          "batchfw_status": "managed"
        },
        "cluster_by": ["dim_store_key", "dim_product_key"],
        "partition_by": {
          "field": "d_date",
          "data_type": "date",
          "granularity": "day"
        },
        "require_partition_filter": true,
        "partition_expiration_days": 2920,
        "backfill_max_partitions": 200
      },
      "tags": ["intraday", "backfill", "consumer_sales", "pos"],
      "description": "Daily aggregate of store sales. This model is optimized for bench-analysis in Looker, hence some dimensions and facts has been left out.",
      "columns": {
        "d_date": {
          "name": "d_date",
          "description": "",
          "meta": {},
          "data_type": "date",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "dim_store_key": {
          "name": "dim_store_key",
          "description": "",
          "meta": {},
          "data_type": "int64",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "dim_product_key": {
          "name": "dim_product_key",
          "description": "",
          "meta": {},
          "data_type": "int64",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "dim_store_product_key": {
          "name": "dim_store_product_key",
          "description": "",
          "meta": {},
          "data_type": "int64",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales": {
          "name": "sales",
          "description": "",
          "meta": {},
          "data_type": "array",
          "constraints": [],
          "quote": null,
          "tags": []
        },
        "sales.dim_payment_method_key": {
          "name": "sales.dim_payment_method_key",
          "description": "",
          "meta": {},
          "data_type": "int64",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.transaction_type_code": {
          "name": "sales.transaction_type_code",
          "description": "",
          "meta": {},
          "data_type": "string",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.promotion_type_id": {
          "name": "sales.promotion_type_id",
          "description": "",
          "meta": {},
          "data_type": "string",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.is_commission_item": {
          "name": "sales.is_commission_item",
          "description": "",
          "meta": {},
          "data_type": "boolean",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.number_of_items": {
          "name": "sales.number_of_items",
          "description": "",
          "meta": {},
          "data_type": "int64",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.sales_amount": {
          "name": "sales.sales_amount",
          "description": "",
          "meta": {},
          "data_type": "numeric(31,2)",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.profit_amount": {
          "name": "sales.profit_amount",
          "description": "",
          "meta": {},
          "data_type": "numeric(31,2)",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "sales.fact_transaction_keys": {
          "name": "sales.fact_transaction_keys",
          "description": "Array of salted keys for fact_transaction_key on receipt-line-level. Used to calculate unique number of visits.",
          "meta": {},
          "data_type": "array<int64>",
          "constraints": [],
          "quote": null,
          "tags": []
        },
        "sales.fact_transaction_keys_sketch": {
          "name": "sales.fact_transaction_keys_sketch",
          "description": "HLL++-sketch to efficiently approximate number of visits.",
          "meta": {},
          "data_type": "bytes",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "waste": {
          "name": "waste",
          "description": "",
          "meta": {},
          "data_type": "array",
          "constraints": [],
          "quote": null,
          "tags": []
        },
        "waste.dim_waste_reason_key": {
          "name": "waste.dim_waste_reason_key",
          "description": "",
          "meta": {},
          "data_type": "int64",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "waste.quantity_or_weight_kg": {
          "name": "waste.quantity_or_weight_kg",
          "description": "",
          "meta": {},
          "data_type": "numeric(32,3)",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "waste.cost_amount": {
          "name": "waste.cost_amount",
          "description": "",
          "meta": {},
          "data_type": "numeric(31,2)",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "waste.total_value": {
          "name": "waste.total_value",
          "description": "",
          "meta": {},
          "data_type": "numeric(31,2)",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "md_audit_seq": {
          "name": "md_audit_seq",
          "description": "",
          "meta": {},
          "data_type": "string",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        },
        "md_insert_dttm": {
          "name": "md_insert_dttm",
          "description": "",
          "meta": {},
          "data_type": "datetime",
          "constraints": [
            {
              "type": "not_null",
              "name": null,
              "expression": null,
              "warn_unenforced": true,
              "warn_unsupported": true
            }
          ],
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "demo_layer": "example",
        "owner": "BICA_store_and_sales",
        "model_maturity": "stable"
      },
      "group": "store_and_sales",
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "demo://models/example/retail_data/example_retail_data__f_store_sales_waste.yml",
      "build_path": null,
      "unrendered_config": {
        "persist_docs": {
          "relation": true,
          "columns": true
        },
        "labels": {
          "batchfw_status": "managed"
        },
        "enabled": true,
        "meta": {
          "owner": "BICA_store_and_sales",
          "model_maturity": "stable"
        },
        "schema": "retail_data",
        "group": "store_and_sales",
        "materialized": "incremental",
        "incremental_strategy": "insert_overwrite",
        "require_partition_filter": true,
        "partition_by": {
          "field": "d_date",
          "data_type": "date",
          "granularity": "day"
        },
        "partition_expiration_days": 2920,
        "tags": ["intraday", "backfill", "consumer_sales", "pos"],
        "full_refresh": false,
        "backfill_max_partitions": 200,
        "cluster_by": ["dim_store_key", "dim_product_key"],
        "contract": {
          "enforced": true
        },
        "on_schema_change": "fail"
      },
      "created_at": 1733121134.4777243,
      "relation_name": "`example-project-123`.`retail_data`.`fact_daily_sales_v1`",
      "raw_code": "{%- set fact_transaction_day = ref('conbiprep_retail_secure__fact_transaction_day') %}\n{%- set f_store_waste = ref(\"conbiprep_consumer_sales__f_store_waste\") %}\n\n{#- Only include partitions between the tables expiration policy and yesterday #}\n{%- set first_partition=(run_started_at-modules.datetime.timedelta(config.require(\"partition_expiration_days\")|int)).strftime(\"%Y%m%d\") %}\n{%- set last_partition=(modules.datetime.date.today()-modules.datetime.timedelta(1)).strftime(\"%Y%m%d\") %}\n\n{%- set partition_list =\n    updated_partition_list_v2(\n        [\n            partition_timestamps(fact_transaction_day, first_partition=first_partition, last_partition=last_partition),\n            partition_timestamps(f_store_waste, first_partition=first_partition, last_partition=last_partition)\n        ], config.get(\"backfill_max_partitions)\"))\n%}\n\n\n\n{#-\n    This model contains a subset of all available dimensions and facts.\n\n    The purpose is to get a compact fact-table for use in analysis.\n    If/when there is a need for additional dimensions, these can be added.\n#}\n\n{#- Precision to use for HLL++-sketches. Value between 10-24. Use max precision for now. #}\n{%- set HLL_SKETCH_PRECISION=24 %}\n\nwith input_sales as (\n    select *\n    from {{ fact_transaction_day }}\n    where {{ in_list_filter(\"d_date_sale\", partition_list) }}\n), input_waste as (\n    select *\n    from {{ f_store_waste }}\n    where {{ in_list_filter(\"d_date_waste\", partition_list) }}\n), sales_agg as (\n    select\n        {#- Grouping columns - Top level #}\n        d_date_sale as d_date,\n        dim_store_key,\n\n        dim_product_key,\n        dim_store_product_key,\n\n        {#- Grouping columns - Sales level #}\n        dim_payment_method_key,\n        d_transaction_type_code,\n        d_promotion_type_id,\n\n        case rl.commission_item_flag\n            when 0 then false\n            when 1 then true\n            else error(\"Invalid commission_item_flag: \" || rl.commission_item_flag)\n        end as is_commission_item,\n\n        {#- Aggregates #}\n        sum(rl.number_of_items) as number_of_items,\n        sum(rl.sales_amount) as sales_amount,\n        sum(rl.profit_amount) as profit_amount,\n\n        {#- Concateate all pseudo-keys into one list, so we can eliminate duplicates in a later stage #}\n        array_concat_agg(rl.fact_transaction_keys) as fact_transaction_keys\n    from input_sales\n    inner join unnest(receipt_line) as rl\n    group by all\n), waste_agg as (\n\tselect\n        {#- Grouping columns - Top level #}\n        d_date_waste as d_date,\n        dim_store_key,\n        dim_product_key,\n        dim_store_product_key,\n\n        {#- Grouping columns - Nested waste level #}\n        dim_waste_reason_key,\n\n        {#- Aggregates #}\n        sum(quantity_or_weight_kg) as quantity_or_weight_kg,\n        sum(cost_amount) as cost_amount,\n        sum(total_value) as total_value\n    from input_waste\n    group by all\n), sales_nested as (\n    select\n        d_date,\n        dim_store_key,\n        dim_product_key,\n        dim_store_product_key,\n\n        array_agg(\n            (\n                select as struct\n                    dim_payment_method_key,\n\n                    # Name-changes in upstream model.\n                    # Implement name-change in this model when a new version is issued (and implement corresponding changes in Looker models)\n                    d_transaction_type_code as transaction_type_code,\n                    d_promotion_type_id as promotion_type_id,\n                    is_commission_item,\n\n                    number_of_items,\n                    sales_amount,\n                    profit_amount,\n\n                    (\n                        select as struct\n                            {#- Eliminate all duplicate pseudo-keys due to aggregations #}\n                            array_agg(distinct f_sale_receipt_pseudo_key) as fact_transaction_keys,\n\n                            {#- Generate a HLL++-sketch for approximate calculations #}\n                            hll_count.init(f_sale_receipt_pseudo_key, {{ HLL_SKETCH_PRECISION }}) as fact_transaction_keys_sketch\n                        from unnest(fact_transaction_keys) as f_sale_receipt_pseudo_key\n                    ).*\n            )\n        ) as sales\n    from sales_agg\n    group by all\n), waste_nested as (\n    select\n        d_date,\n        dim_store_key,\n        dim_product_key,\n        dim_store_product_key,\n\n        array_agg(\n            (\n                select as struct\n                    dim_waste_reason_key,\n                    quantity_or_weight_kg,\n                    cost_amount,\n                    total_value\n            )\n        ) as waste\n    from waste_agg\n    group by all\n)\nselect\n    *,\n    {#- Metadata #}\n    '{{ invocation_id }}' as md_audit_seq,\n    datetime(current_timestamp(), '{{ var('timezone') }}') as md_insert_dttm\nfrom sales_nested\nfull outer join waste_nested using (d_date, dim_store_key, dim_product_key, dim_store_product_key)",
      "language": "sql",
      "refs": [
        {
          "name": "conbiprep_retail_secure__fact_transaction_day",
          "package": null,
          "version": null
        },
        {
          "name": "conbiprep_consumer_sales__f_store_waste",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.demo.partition_timestamps",
          "macro.demo.updated_partition_list_v2",
          "macro.demo.in_list_filter"
        ],
        "nodes": [
          "model.demo.conbiprep_retail_secure__fact_transaction_day.v9",
          "model.demo.conbiprep_consumer_sales__f_store_waste"
        ]
      },
      "compiled_path": "target/compiled/demo/models/example/retail_data/example_retail_data__fact_daily_sales_v1.sql",
      "compiled": true,
      "compiled_code": "\n\nwith input_sales as (\n    select *\n    from `ac16-p-conbiprep-prd-e245`.`retail_secure`.`fact_transaction_day_v9`\n    where false\n), input_waste as (\n    select *\n    from `ac16-p-conbiprep-prd-e245`.`consumer_sales`.`f_store_waste`\n    where false\n), sales_agg as (\n    select\n        d_date_sale as d_date,\n        dim_store_key,\n\n        dim_product_key,\n        dim_store_product_key,\n        dim_payment_method_key,\n        d_transaction_type_code,\n        d_promotion_type_id,\n\n        case rl.commission_item_flag\n            when 0 then false\n            when 1 then true\n            else error(\"Invalid commission_item_flag: \" || rl.commission_item_flag)\n        end as is_commission_item,\n        sum(rl.number_of_items) as number_of_items,\n        sum(rl.sales_amount) as sales_amount,\n        sum(rl.profit_amount) as profit_amount,\n        array_concat_agg(rl.fact_transaction_keys) as fact_transaction_keys\n    from input_sales\n    inner join unnest(receipt_line) as rl\n    group by all\n), waste_agg as (\n\tselect\n        d_date_waste as d_date,\n        dim_store_key,\n        dim_product_key,\n        dim_store_product_key,\n        dim_waste_reason_key,\n        sum(quantity_or_weight_kg) as quantity_or_weight_kg,\n        sum(cost_amount) as cost_amount,\n        sum(total_value) as total_value\n    from input_waste\n    group by all\n), sales_nested as (\n    select\n        d_date,\n        dim_store_key,\n        dim_product_key,\n        dim_store_product_key,\n\n        array_agg(\n            (\n                select as struct\n                    dim_payment_method_key,\n\n                    # Name-changes in upstream model.\n                    # Implement name-change in this model when a new version is issued (and implement corresponding changes in Looker models)\n                    d_transaction_type_code as transaction_type_code,\n                    d_promotion_type_id as promotion_type_id,\n                    is_commission_item,\n\n                    number_of_items,\n                    sales_amount,\n                    profit_amount,\n\n                    (\n                        select as struct\n                            array_agg(distinct f_sale_receipt_pseudo_key) as fact_transaction_keys,\n                            hll_count.init(f_sale_receipt_pseudo_key, 24) as fact_transaction_keys_sketch\n                        from unnest(fact_transaction_keys) as f_sale_receipt_pseudo_key\n                    ).*\n            )\n        ) as sales\n    from sales_agg\n    group by all\n), waste_nested as (\n    select\n        d_date,\n        dim_store_key,\n        dim_product_key,\n        dim_store_product_key,\n\n        array_agg(\n            (\n                select as struct\n                    dim_waste_reason_key,\n                    quantity_or_weight_kg,\n                    cost_amount,\n                    total_value\n            )\n        ) as waste\n    from waste_agg\n    group by all\n)\nselect\n    *,\n    '55c29a9c-1ef2-4946-b1a8-a0ec5d56ecf2' as md_audit_seq,\n    datetime(current_timestamp(), 'Europe/Stockholm') as md_insert_dttm\nfrom sales_nested\nfull outer join waste_nested using (d_date, dim_store_key, dim_product_key, dim_store_product_key)",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "contract": {
        "enforced": true,
        "alias_types": true,
        "checksum": "a592a9cf343beae9e3a1999aae90daea5874f1ce7a1f67ca6af05a43b4979396"
      },
      "access": "protected",
      "constraints": [],
      "version": 1,
      "latest_version": 1,
      "deprecation_date": null
    }
  },
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json",
    "dbt_version": "1.8.3",
    "generated_at": "2024-12-02T06:30:39.307264Z",
    "invocation_id": "55c29a9c-1ef2-4946-b1a8-a0ec5d56ecf2",
    "env": {},
    "project_name": "demo",
    "project_id": "346767f348f9561a606cf675361d2a03",
    "user_id": "2369017a-8748-4a5d-a618-1b5480b0970a",
    "send_anonymous_usage_stats": true,
    "adapter_type": "bigquery"
  },
  "exposures": {
    "exposure.demo.semantic_layer_sales": {
      "name": "semantic_layer_sales",
      "resource_type": "exposure",
      "package_name": "demo",
      "path": "exposures/store_and_sales/semantic_layer_sales.yml",
      "original_file_path": "models/exposures/store_and_sales/semantic_layer_sales.yml",
      "unique_id": "exposure.demo.semantic_layer_sales",
      "fqn": ["demo", "exposures", "store_and_sales", "semantic_layer_sales"],
      "type": "analysis",
      "owner": {
        "email": null,
        "name": "BICA_store_and_sales"
      },
      "description": "",
      "label": "Store & Sales | Looker Views",
      "maturity": "low",
      "meta": {},
      "tags": ["looker_semantic_layer", "store", "consumer_sales"],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "url": "https://url/",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.demo.example_store__d_selling_entity",
          "model.demo.example_store_secure_pii__d_store_pii",
          "model.demo.example_consumer_sales__d_checkout_method",
          "model.demo.example_consumer_sales__d_picking_location",
          "model.demo.example_consumer_sales__d_so_campaign_type",
          "model.demo.example_retail_data__fact_daily_sales.v1",
          "model.demo.example_retail_data__f_store_sales_waste_week.v1",
          "model.demo.example_retail_data__f_store_sales_waste_month.v1",
          "model.demo.example_retail_data__f_store_sales_waste_year.v1",
          "model.demo.example_item__d_item"
        ]
      },
      "refs": [
        {
          "name": "example_store__d_selling_entity",
          "package": null,
          "version": null
        },
        {
          "name": "example_store_secure_pii__d_store_pii",
          "package": null,
          "version": null
        },
        {
          "name": "example_consumer_sales__d_checkout_method",
          "package": null,
          "version": null
        },
        {
          "name": "example_consumer_sales__d_picking_location",
          "package": null,
          "version": null
        },
        {
          "name": "example_consumer_sales__d_so_campaign_type",
          "package": null,
          "version": null
        },
        {
          "name": "example_retail_data__fact_daily_sales",
          "package": null,
          "version": 1
        },
        {
          "name": "example_retail_data__f_store_sales_waste_week",
          "package": null,
          "version": 1
        },
        {
          "name": "example_retail_data__f_store_sales_waste_month",
          "package": null,
          "version": 1
        },
        {
          "name": "example_retail_data__f_store_sales_waste_year",
          "package": null,
          "version": 1
        },
        {
          "name": "example_item__d_item",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "created_at": 1733121150.954562
    }
  }
}
