[build-system]
requires = ["poetry-core >= 2.1.2, <3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "mckit-meshes"
dynamic = ["version", "classifiers", "requires-python"]
description = "Python tools to work with MCNP meshtallies and weight meshes."
license = { text = "MIT" }
readme = "README.rst"
authors = [
    { name = "dvp2015", email = "dmitri_portnov@yahoo.com" }
]
keywords = ["MCNP", "mesh", "weights", "variance reduction"]
dependencies = [
    "click (>=8.0.1)",
    "loguru (>=0.6.0)",
    "numpy (>=2.1.3)",
    "pyevtk (>=1.4.1)",
    "toolz (>=0.11.2)"
]

[project.urls]
homepage = "https://github.com/MC-kit/mckit-meshes"
repository = "https://github.com/MC-kit/mckit-meshes"
# documentation = "https://mckit-meshes.readthedocs.io
Changelog = "https://github.com/MC-kit/mckit-meshes/releases"

[project.scripts]
mckit-meshes = "mckit_meshes.cli.runner:mckit_meshes"

[tool.poetry]
version = "0.2.0"
packages = [{ include = "mckit_meshes", from = "src" }]
include = [
    { path = "noxfile.py", format = "sdist" },
    { path = "tests", format = "sdist" },
    { path = "docs", format = "sdist" },
]
exclude = [
    { path = "docs/build" }
]
# Select from PyPI trove classifiers: https://pypi.org/classifiers/
# about dynamic classifiers in poetry: https://python-poetry.org/docs/pyproject/#classifiers-1
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Physics",
]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"

[tool.poetry.group.dev.dependencies]
nox = ">=2022.1.7"
tomli = { version = ">=2.0.1", python = "<3.11" }

[tool.poetry.group.pre_commit.dependencies]
pre-commit = ">=2.15.0"
pydocstringformatter = ">=0.7.3"

[tool.poetry.group.test.dependencies]
pytest = ">=7.1"
pytest-cov = ">=4.0"
pytest-mock = ">=3.14.0"
# pytest-randomly = ">=3.12"
coverage = { version = ">=6.1.2", extras = ["toml"] }
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
pytest-durations = "^1.5.2"

[tool.poetry.group.coverage.dependencies]
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.xdoctest.dependencies]
xdoctest = { extras = ["colors"], version = ">=0.15.10" }

[tool.poetry.group.typeguard.dependencies]
typeguard = ">=4.1.5"

[tool.poetry.group.mypy.dependencies]
mypy = ">=1.2.0"
pep8-naming = ">=0.12.1"
types-setuptools = ">=57.4.2"
numpy = ">=2.1.3"

[tool.poetry.group.docs.dependencies]
sphinx = ">=6.1.3"
sphinx-autodoc-typehints = ">=1.19.5"
sphinx-click = ">=4.4.0"

[tool.poetry.group.docs_auto.dependencies]
sphinx-autobuild = ">=2021.3.14"

[tool.poetry.group.ruff.dependencies]
ruff = ">=0.0.259"

[tool.pytest.ini_options]
minversion = "6.2"
cache_dir = '.cache/pytest'
norecursedirs = '''
*.egg-info
.*
build
data
dist
docs/_build
docs/examples
htmlcov
notebooks
tools
wrk
'''
python_functions = "test_*  profile_*"
addopts = '''
-ra
-q
--tb=short
--doctest-modules
--strict-markers
--ignore setup.py
--failed-first
--xdoctest
--pytest-durations-min=1
--pytest-resultlog="pytest-result.log"
'''
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES NUMBER"
testpaths = ["tests", "src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
# xfail tests that pass should fail the test suite
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:Implementing implicit namespace packages \(as specified in PEP 420\) is preferred to `pkg_resources.declare_namespace`',
    "ignore:.*not typechecking multipledispatch.dispatcher.*UserWarning",
    'ignore:.*io.FileIO \[closed\]',
    'ignore:.*Deprecated call to `pkg_resources.declare_namespace',
    'ignore:.*Implicit None on return values:DeprecationWarning',
    # pandas 2.1.4 at python 3.12
    'ignore:.*datetime.datetime.utcfromtimestamp\(\) is deprecated:DeprecationWarning',
    # openpyxl 3.1.2 qt python 3.12
    'ignore:.*datetime.datetime.utcnow\(\):DeprecationWarning'
]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.xdoctest]
quiet = true
options = ""

[tool.coverage.paths]
source = ["src", ".nox/*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["*/plotting/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80     # TODO dvp: increase limit to 100 with code maturing
omit = ["*_tab.py", "**/__init__.py", "**/types.py"]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
sort = "Cover"


# MyPy config
# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
#     https://dev.to/tusharsadhwani/the-comprehensive-guide-to-mypy-561m
[tool.mypy]
python_version = "3.12"
# strict = true     # TODO dvp: uncomment this to get strict control
follow_imports = "silent"
# namespace_packages = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
show_error_context = true
error_summary = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
files = "src/mckit_meshes/**/*.py"
plugins = ["numpy.typing.mypy_plugin"]

[[tool.mypy.overrides]]
module = [
    "IPython.core.magic",
    "IPython.core.magic_arguments",
    "click",
    "click.testing",
    "loguru",
    "multipledispatch",
    "nox",
    "numpy.testing",
    "pandas",
    "polars",
    "pytest",
    "scipy.constants",
    "scipy.sparse",
    "tomli",
    "tomllib",
    "xdoctest",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tomllib",
    "tomli",
]
allow_redefinition = true
disable_error_code = "no-redef"

[tool.check-manifest]
ignore = [
    "tests/*",
    "tools/*",
    "*.yaml",
    "noxfile.py",
]

[tool.ruff]
target-version = "py310"

line-length = 100

# show an enumeration of all autofixed lint violations
show-fixes = true

# show source code snippets when reporting violations
output-format = "concise"

src = ["src", "tests"]

exclude = [
    "*.egg-info",
    ".direnv",
    ".cache",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".nox",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "_build",
    "adhoc",
    "build",
    "dist",
    "docs/source/conf.py",
    "notebooks",
    "venv",
    "wrk",
]

[tool.ruff.lint]
#see full list: https://beta.ruff.rs/docs/rules/#pyflakes-f
#or run 'ruff linter' to see a brief list
select = [
    "A", # flake8-builtins
    "AIR", # Airflow https://airflow.apache.org/docs/apache-airflow/stable/index.html
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    # "CPY", # flake8-copyright
    "D", # pydocstyle
    "DJ", # flake8-django
    # "DOC", # pydoclint
    "DTZ", # flake8-datetimez
    "E", # pycodestyle
    "EM", # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # Pyflakes
    "FA", # flake8-future-annotations
    # "FAST", # FastAPI
    "FBT", # flake8-boolean-trap  https://adamj.eu/tech/2021/07/10/python-type-hints-how-to-avoid-the-boolean-trap
    "FIX", # flake8-fixme
    "FLY", # flynt
    "FURB", # refurb
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-log
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PD", # pandas-vet
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # Pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slot
    "T10", # flake8-debugger
    "T20", # flake8-print
    # "TD", # flake8-todos
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle 2
    "YTT", # flake8-2020
]

# Ignore rules that currently fail on the codebase
ignore = [
    "ANN001", # ANN001 Missing type annotation for function argument: doesn't allow to use functools dispatching
    "ANN002", # ANN002 Missing type annotation for *drop_items: ... as above
    "ANN201", # Missing return type annotation for public function `mesh2com`
    "ANN202", # ANN202 Missing return type annotation for protected function: ... dispatching
    "ANN204", # ANN204 Missing return type annotation for special method
    "C901", # too complex - ...
    "COM812", # may cause conflicts when used with the ruff formatter

    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D105", # D105 Missing docstring in magic method (__hash__, __eq__)
    "D104", # Missing docstring in public package
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "E402", # Module level import not at top of file
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "FBT002", # Boolean default value in function definition (TODO!)
    "FBT003", # Boolean positional value in function call
    "FIX", # Remove TODOs
    "I001", # import order is controlled by isort

    "ISC001", # may cause conflicts when used with the ruff formatter

    "PLE1205", # logging-too-many-args - we use loguru with '{' style of placeholders

    "PLR0912", # Too many branches (15 > 12)
    "PLR0913", # Too many arguments to function call (6 > 5)
    "PLR0915", # Too many statements (65 > 50)
    "PLR2004", # magic number - don't want to declare 0.0 as constant
    "PT019", # Fixture `_bin` without value is injected as parameter (false positive?)
    "S101", # Use of `assert` detected
    "SLF001", # Private member accessed: `_geometry_spec`
    "TRY003", #  Avoid specifying long messages outside the exception class
]


[tool.ruff.lint.per-file-ignores]
"benchmarks/*" = ["S101"]
"tests/*" = ["ANN", "D100", "D101", "D102", "D103", "D104", "PLR2004", "S101"]
"tools/*" = ["T201", "INP001", "S603", "S607"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true  # skip return type for __init__() methods

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-type-checking]
strict = true

# warning: The isort option `isort.split-on-trailing-comma` is incompatible
# with the formatter `format.skip-magic-trailing-comma=true` option.
# To avoid unexpected behavior, we recommend either setting `isort.split-on-trailing-comma=false`
# or `format.skip-magic-trailing-comma=false`.

[tool.ruff.lint.isort]
known-first-party = ["src"]
known-third-party = ["mpl_toolkits", "matplotlib", "numpy", "scipy", "loguru", "tqdm", "dotenv"]
default-section = "third-party"
lines-between-types = 1
required-imports = ["from __future__ import annotations"]
case-sensitive = true
section-order = [
    "future",
    "typing",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
    "testing"
]

[tool.ruff.lint.isort.sections]
"typing" = ["typing", "typing_extension"]
"testing" = ["tests"]

[tool.ruff.lint.pydocstyle]
convention = "google" # Use Google-style docstrings.

[tool.ruff.format]
docstring-code-format = true

[tool.jupytext]
# https://jupytext.readthedocs.io/en/latest/config.html
# Pair ipynb notebooks to py:percent text notebooks
formats = "ipynb,md,py:percent"

[tool.creosote]
paths = ["src"]
deps-file = "pyproject.toml"
sections = ["project.dependencies"]
