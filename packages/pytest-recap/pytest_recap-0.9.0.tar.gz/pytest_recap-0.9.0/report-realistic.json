{
  "session_id": "20250529-154719-fcda874c",
  "session_tags": {},
  "session_start_time": "2025-05-29T15:47:19.928509+00:00",
  "session_stop_time": "2025-05-29T15:48:36.818450+00:00",
  "system_under_test": {
    "name": "pytest-recap"
  },
  "testing_system": {
    "hostname": "GPYVQ4KGXY.local",
    "platform": "macOS-15.5-x86_64-i386-64bit",
    "python_version": "3.9.16",
    "pytest_version": "8.3.5",
    "environment": "test"
  },
  "test_results": [
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_get_user",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:19.928509+00:00",
      "stop_time": "2025-05-29T15:47:19.984615+00:00",
      "duration": 0.056106,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_list_users",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:19.985840+00:00",
      "stop_time": "2025-05-29T15:47:20.112371+00:00",
      "duration": 0.126531,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_search_users",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:20.115529+00:00",
      "stop_time": "2025-05-29T15:47:20.371321+00:00",
      "duration": 0.255792,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_create_user_auth",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:20.374093+00:00",
      "stop_time": "2025-05-29T15:47:20.531795+00:00",
      "duration": 0.157702,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_update_user",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:20.755683+00:00",
      "stop_time": "2025-05-29T15:47:20.831707+00:00",
      "duration": 0.076024,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_delete_user",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:20.833410+00:00",
      "stop_time": "2025-05-29T15:47:20.900070+00:00",
      "duration": 0.06666,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_login",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:20.916164+00:00",
      "stop_time": "2025-05-29T15:47:20.972065+00:00",
      "duration": 0.055901,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_profile",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:20.974937+00:00",
      "stop_time": "2025-05-29T15:47:21.030798+00:00",
      "duration": 0.055861,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_preferences",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.034151+00:00",
      "stop_time": "2025-05-29T15:47:21.108816+00:00",
      "duration": 0.074665,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_db_connection",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.113763+00:00",
      "stop_time": "2025-05-29T15:47:21.114365+00:00",
      "duration": 0.000602,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_simple_query",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.133733+00:00",
      "stop_time": "2025-05-29T15:47:21.210546+00:00",
      "duration": 0.076813,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_successful_transaction",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.232990+00:00",
      "stop_time": "2025-05-29T15:47:21.476885+00:00",
      "duration": 0.243895,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_transaction_rollback",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.494268+00:00",
      "stop_time": "2025-05-29T15:47:21.762592+00:00",
      "duration": 0.268324,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_connection_stability",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.787378+00:00",
      "stop_time": "2025-05-29T15:47:21.883903+00:00",
      "duration": 0.096525,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_query_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:21.903058+00:00",
      "stop_time": "2025-05-29T15:47:22.025428+00:00",
      "duration": 0.12237,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_data_integrity",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:22.047374+00:00",
      "stop_time": "2025-05-29T15:47:22.146892+00:00",
      "duration": 0.099518,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_db_specific_features",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:22.173661+00:00",
      "stop_time": "2025-05-29T15:47:22.494981+00:00",
      "duration": 0.32132,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_create_schema",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:22.519015+00:00",
      "stop_time": "2025-05-29T15:47:22.660552+00:00",
      "duration": 0.141537,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_create_table",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:22.687891+00:00",
      "stop_time": "2025-05-29T15:47:23.492921+00:00",
      "duration": 0.80503,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_insert_data",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:23.514107+00:00",
      "stop_time": "2025-05-29T15:47:23.723963+00:00",
      "duration": 0.209856,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_product_availability",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:23.746995+00:00",
      "stop_time": "2025-05-29T15:47:23.845553+00:00",
      "duration": 0.098558,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_authentication_flow",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:23.850872+00:00",
      "stop_time": "2025-05-29T15:47:24.108443+00:00",
      "duration": 0.257571,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_complete_order_workflow",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:24.293829+00:00",
      "stop_time": "2025-05-29T15:47:25.938263+00:00",
      "duration": 1.644434,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_order_with_inventory_failure",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:26.053784+00:00",
      "stop_time": "2025-05-29T15:47:26.309246+00:00",
      "duration": 0.255462,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_inventory_consistency",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:26.313833+00:00",
      "stop_time": "2025-05-29T15:47:27.135346+00:00",
      "duration": 0.821513,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_concurrent_orders",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:27.260121+00:00",
      "stop_time": "2025-05-29T15:47:28.762798+00:00",
      "duration": 1.502677,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_user_registration",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:28.767652+00:00",
      "stop_time": "2025-05-29T15:47:29.015061+00:00",
      "duration": 0.247409,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_user_login",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:29.019737+00:00",
      "stop_time": "2025-05-29T15:47:29.265766+00:00",
      "duration": 0.246029,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_user_purchases",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:29.378145+00:00",
      "stop_time": "2025-05-29T15:47:29.903540+00:00",
      "duration": 0.525395,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_read_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:29.907132+00:00",
      "stop_time": "2025-05-29T15:47:30.173975+00:00",
      "duration": 0.266843,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_write_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:30.177405+00:00",
      "stop_time": "2025-05-29T15:47:31.459425+00:00",
      "duration": 1.28202,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_concurrent_read_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:31.464671+00:00",
      "stop_time": "2025-05-29T15:47:31.624148+00:00",
      "duration": 0.159477,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_concurrent_write_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:31.628140+00:00",
      "stop_time": "2025-05-29T15:47:31.744689+00:00",
      "duration": 0.116549,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_system_under_stress",
      "outcome": "passed",
      "start_time": "2025-05-29T15:47:31.748447+00:00",
      "stop_time": "2025-05-29T15:47:51.799195+00:00",
      "duration": 20.050748,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_system_recovery",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:02.008572+00:00",
      "stop_time": "2025-05-29T15:48:17.028272+00:00",
      "duration": 15.0197,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_sustained_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:17.032239+00:00",
      "stop_time": "2025-05-29T15:48:17.537319+00:00",
      "duration": 0.50508,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_baseline_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:17.539569+00:00",
      "stop_time": "2025-05-29T15:48:17.692214+00:00",
      "duration": 0.152645,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_comparative_performance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:17.695381+00:00",
      "stop_time": "2025-05-29T15:48:17.950678+00:00",
      "duration": 0.255297,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_scalability",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:17.953834+00:00",
      "stop_time": "2025-05-29T15:48:18.353207+00:00",
      "duration": 0.399373,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_login_page_loads",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:18.357677+00:00",
      "stop_time": "2025-05-29T15:48:19.935771+00:00",
      "duration": 1.578094,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_login_with_valid_credentials",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:19.939962+00:00",
      "stop_time": "2025-05-29T15:48:21.033754+00:00",
      "duration": 1.093792,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_dashboard_widgets_load",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:22.516555+00:00",
      "stop_time": "2025-05-29T15:48:22.709404+00:00",
      "duration": 0.192849,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_responsive_design",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:22.713741+00:00",
      "stop_time": "2025-05-29T15:48:23.595489+00:00",
      "duration": 0.881748,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_interactive_chart",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:25.191493+00:00",
      "stop_time": "2025-05-29T15:48:25.974108+00:00",
      "duration": 0.782615,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_user_profile_page_loads",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:32.638139+00:00",
      "stop_time": "2025-05-29T15:48:33.041588+00:00",
      "duration": 0.403449,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_accessibility_compliance",
      "outcome": "passed",
      "start_time": "2025-05-29T15:48:35.401802+00:00",
      "stop_time": "2025-05-29T15:48:36.818450+00:00",
      "duration": 1.416648,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_batch_operations",
      "outcome": "failed",
      "start_time": "2025-05-29T15:47:20.534883+00:00",
      "stop_time": "2025-05-29T15:47:20.720527+00:00",
      "duration": 0.185644,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "api_client = <requests.sessions.Session object at 0x10c2db250>\n\n    def test_api_batch_operations(api_client):\n        \"\"\"Test batch operations that might hit rate limits.\"\"\"\n        # Simulate rate limiting errors randomly (about 20% of the time)\n        if random.random() < 0.2:\n            with patch.object(api_client, \"post\") as mock_post:\n                mock_post.return_value.status_code = 429\n                mock_post.return_value.json.return_value = {\n                    \"error\": \"Too Many Requests\",\n                    \"message\": \"Rate limit exceeded. Try again in 30 seconds.\",\n                }\n    \n                time.sleep(0.18)\n    \n                batch_data = {\n                    \"operations\": [{\"type\": \"create\", \"data\": {\"username\": f\"batch_user_{i}\"}} for i in range(10)]\n                }\n                response = api_client.post(f\"{API_BASE_URL}/batch\", json=batch_data)\n    \n                # This should fail with rate limit error\n>               assert response.status_code != 429, \"Rate limit exceeded\"\nE               AssertionError: Rate limit exceeded\nE               assert 429 != 429\nE                +  where 429 = <MagicMock name='post()' id='4498399536'>.status_code\n\ndemo-tests/realistic/realistic_api/test_user_endpoints.py:160: AssertionError"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_resource_utilization",
      "outcome": "failed",
      "start_time": "2025-05-29T15:47:51.804817+00:00",
      "stop_time": "2025-05-29T15:48:01.981330+00:00",
      "duration": 10.176513,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "mock_system = <test_load_scenarios.MockSystem object at 0x10c798fd0>\nperformance_tester = <test_load_scenarios.PerformanceTester object at 0x10c5fb040>\n\n    def test_resource_utilization(mock_system, performance_tester):\n        \"\"\"Test system resource utilization under load.\"\"\"\n        # Execute operations that consume resources\n        for _ in range(20):\n            operation = random.choice([\"compute\", \"io\"])\n            complexity = random.uniform(1.0, 2.0)\n            performance_tester.execute_operation(operation, complexity)\n    \n        # Check resource usage\n        resource_usage = mock_system.resource_usage\n    \n        # This test will fail if resource usage is too high\n        if resource_usage > 0.8 and random.random() < 0.3:\n>           pytest.fail(f\"Resource utilization too high: {resource_usage:.2f}\")\nE           Failed: Resource utilization too high: 0.94\n\ndemo-tests/realistic/realistic_performance/test_load_scenarios.py:360: Failed"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_form_submission_flow",
      "outcome": "failed",
      "start_time": "2025-05-29T15:48:27.254511+00:00",
      "stop_time": "2025-05-29T15:48:31.178277+00:00",
      "duration": 3.923766,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "logged_in_browser = <test_web_interface.MockWebDriver object at 0x10c1edb50>\n\n    def test_form_submission_flow(logged_in_browser):\n        \"\"\"Test a multi-step form submission process.\"\"\"\n        browser = logged_in_browser\n        browser.get(\"https://example.com/dashboard/new-project\")\n    \n        # Step 1: Fill out basic information\n        project_name = browser.find_element(\"id\", \"project-name\")\n        project_name.send_keys(\"Test Project\")\n    \n        description = browser.find_element(\"id\", \"project-description\")\n        description.send_keys(\"This is a test project created by automated UI tests.\")\n    \n        # Click next button\n        next_button = browser.find_element(\"id\", \"step-1-next\")\n        next_button.click()\n    \n        # Step 2: Project settings\n        # Simulate slow page transition\n        time.sleep(0.08)  # Shortened for speed\n    \n        # Select project type dropdown\n        project_type = browser.find_element(\"id\", \"project-type\")\n        project_type.click()\n    \n        # Select an option\n        option = browser.find_element(\"css\", \"#project-type-options li:nth-child(2)\")\n        option.click()\n    \n        # Click next button\n        next_button = browser.find_element(\"id\", \"step-2-next\")\n        next_button.click()\n    \n        # Step 3: Confirmation\n        # Another slow page transition\n        time.sleep(0.5)\n    \n        # Submit form\n        submit_button = browser.find_element(\"id\", \"submit-project\")\n        submit_button.click()\n    \n        # Verify success message\n        success_message = browser.find_element(\"class\", \"success-message\")\n>       assert \"Project created successfully\" in success_message.text\nE       AssertionError: assert 'Project created successfully' in 'Text for success-message'\nE        +  where 'Text for success-message' = <test_web_interface.MockWebElement object at 0x10c1ed910>.text\n\ndemo-tests/realistic/realistic_ui/test_web_interface.py:298: AssertionError"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_edit_user_profile",
      "outcome": "failed",
      "start_time": "2025-05-29T15:48:34.814257+00:00",
      "stop_time": "2025-05-29T15:48:35.380525+00:00",
      "duration": 0.566268,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "logged_in_browser = <test_web_interface.MockWebDriver object at 0x10c638130>\n\n    @pytest.mark.dependency(depends=[\"test_user_profile_page_loads\"])\n    def test_edit_user_profile(logged_in_browser):\n        \"\"\"Test editing user profile (depends on profile page loading).\"\"\"\n        browser = logged_in_browser\n        browser.get(\"https://example.com/profile/edit\")\n    \n        # Find edit form elements\n>       display_name = browser.find_element(\"id\", \"display-name\")\n\ndemo-tests/realistic/realistic_ui/test_web_interface.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_web_interface.MockWebDriver object at 0x10c638130>, by = 'id', value = 'display-name'\n\n    def find_element(self, by, value):\n        # Always find login elements on login page\n        if self.current_url.endswith(\"/login\") and by == \"id\" and value in (\"username\", \"password\", \"login-button\"):\n            return MockWebElement(value, by, driver=self)\n        # Always find dashboard widgets on dashboard\n        if self.current_url.endswith(\"/dashboard\") and by == \"class\" and value == \"dashboard-widget\":\n            return MockWebElement(\"dashboard-widget\", by, driver=self)\n        # Always find profile elements on profile page\n        if self.current_url.endswith(\"/profile\") and by == \"id\" and value == \"profile-header\":\n            return MockWebElement(value, by, driver=self)\n        # Simulate element not found occasionally (except for above patches)\n        if random.random() < 0.08:\n            time.sleep(0.3)\n>           raise Exception(f\"No such element: {by}={value}\")\nE           Exception: No such element: id=display-name\n\ndemo-tests/realistic/realistic_ui/test_web_interface.py:81: Exception"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_login",
      "outcome": "rerun",
      "start_time": "2025-05-29T15:47:20.903821+00:00",
      "stop_time": "2025-05-29T15:47:20.904919+00:00",
      "duration": 0.001098,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "@pytest.mark.flaky(reruns=2)\n    @pytest.mark.dependency()\n    def test_api_user_login():\n        \"\"\"Test user login endpoint.\"\"\"\n        # This test will pass 70% of the time (flaky)\n        if random.random() < 0.3:\n>           pytest.fail(\"Random login failure (simulated flakiness)\")\nE           Failed: Random login failure (simulated flakiness)\n\ndemo-tests/realistic/realistic_api/test_user_endpoints.py:256: Failed"
    }
  ],
  "rerun_test_groups": [
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_login",
      "tests": [
        {
          "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_login",
          "outcome": "rerun",
          "start_time": "2025-05-29T15:47:20.903821+00:00",
          "stop_time": "2025-05-29T15:47:20.904919+00:00",
          "duration": 0.001098,
          "caplog": "",
          "capstderr": "",
          "capstdout": "",
          "longreprtext": "@pytest.mark.flaky(reruns=2)\n    @pytest.mark.dependency()\n    def test_api_user_login():\n        \"\"\"Test user login endpoint.\"\"\"\n        # This test will pass 70% of the time (flaky)\n        if random.random() < 0.3:\n>           pytest.fail(\"Random login failure (simulated flakiness)\")\nE           Failed: Random login failure (simulated flakiness)\n\ndemo-tests/realistic/realistic_api/test_user_endpoints.py:256: Failed"
        },
        {
          "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_login",
          "outcome": "passed",
          "start_time": "2025-05-29T15:47:20.916164+00:00",
          "stop_time": "2025-05-29T15:47:20.972065+00:00",
          "duration": 0.055901,
          "caplog": "",
          "capstderr": "",
          "capstdout": "",
          "longreprtext": "None"
        }
      ]
    }
  ],
  "warnings": [
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_api/test_user_endpoints.py",
      "lineno": 251,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_api/test_user_endpoints.py",
      "lineno": 261,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_api/test_user_endpoints.py",
      "lineno": 269,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_db/test_data_operations.py",
      "lineno": 399,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_db/test_data_operations.py",
      "lineno": 413,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_db/test_data_operations.py",
      "lineno": 435,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py",
      "lineno": 446,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py",
      "lineno": 454,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py",
      "lineno": 466,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_performance/test_load_scenarios.py",
      "lineno": 412,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_performance/test_load_scenarios.py",
      "lineno": 421,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_ui/test_web_interface.py",
      "lineno": 302,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_ui/test_web_interface.py",
      "lineno": 317,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    }
  ],
  "errors": [],
  "session_stats": {
    "passed": 46,
    "failed": 4,
    "rerun": 1,
    "warnings": 13
  }
}