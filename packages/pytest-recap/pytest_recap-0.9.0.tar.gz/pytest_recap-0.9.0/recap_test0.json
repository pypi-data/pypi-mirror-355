{
  "session_id": "20250531-034215-2bf3832e",
  "session_tags": {},
  "session_start_time": "2025-05-31T03:42:15.908977+00:00",
  "session_stop_time": "2025-05-31T03:42:15.956059+00:00",
  "system_under_test": {
    "name": "pytest-recap"
  },
  "testing_system": {
    "hostname": "GPYVQ4KGXY.local",
    "platform": "macOS-15.5-x86_64-i386-64bit",
    "python_version": "3.9.16",
    "pytest_version": "8.3.5",
    "environment": "test"
  },
  "test_results": [
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_1_pass_capturing",
      "outcome": "passed",
      "start_time": "2025-05-31T03:42:15.908977+00:00",
      "stop_time": "2025-05-31T03:42:15.910003+00:00",
      "duration": 0.001026,
      "caplog": "\u001b[32mINFO    \u001b[0m conftest:test_0.py:18 \u200b\u200b\u200b\n\u001b[33mWARNING \u001b[0m conftest:test_0.py:21 FAIL this log is captured\n\u001b[33mWARNING \u001b[0m conftest:test_0.py:25 FAIL is this log captured?\n\u001b[33mWARNING \u001b[0m conftest:test_0.py:28 FAIL this log is also captured\n\u001b[32mINFO    \u001b[0m conftest:test_0.py:32 Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur?",
      "capstderr": "FAIL this stderr is captured\nFAIL this stderr is also captured\n",
      "capstdout": "FAIL this stdout is captured\nFAIL this stdout is also captured\n",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test_with_warning",
      "outcome": "passed",
      "start_time": "2025-05-31T03:42:15.925125+00:00",
      "stop_time": "2025-05-31T03:42:15.925289+00:00",
      "duration": 0.000164,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_1_fail_capturing",
      "outcome": "failed",
      "start_time": "2025-05-31T03:42:15.911710+00:00",
      "stop_time": "2025-05-31T03:42:15.912513+00:00",
      "duration": 0.000803,
      "caplog": "\u001b[32mINFO    \u001b[0m conftest:test_0.py:39 \u200b\u200b\u200b\n\u001b[33mWARNING \u001b[0m conftest:test_0.py:42 FAIL this log is captured\n\u001b[33mWARNING \u001b[0m conftest:test_0.py:46 FAIL is this log captured?\n\u001b[33mWARNING \u001b[0m conftest:test_0.py:49 FAIL this log is also captured\n\u001b[31mCRITICAL\u001b[0m conftest:test_0.py:50 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat?\n\u001b[1m\u001b[31mERROR   \u001b[0m conftest:test_0.py:51 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat?\n\u001b[32mINFO    \u001b[0m conftest:test_0.py:53 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat?",
      "capstderr": "FAIL this stderr is captured\nFAIL this stderr is also captured\n",
      "capstdout": "FAIL this stdout is captured\nFAIL this stdout is also captured\n",
      "longreprtext": "capsys = <_pytest.capture.CaptureFixture object at 0x10db4c280>\nfake_data = 'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, ...gna aliqua Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat?'\nlogger = <Logger conftest (DEBUG)>\n\n    def test0_1_fail_capturing(capsys, fake_data, logger):\n        logger.info(ZWS_X3)\n        print(\"FAIL this stdout is captured\")\n        print(\"FAIL this stderr is captured\", file=sys.stderr)\n        logger.warning(\"FAIL this log is captured\")\n        with capsys.disabled():\n            print(\"FAIL stdout not captured, going directly to sys.stdout\")\n            print(\"FAIL stderr not captured, going directly to sys.stderr\", file=sys.stderr)\n            logger.warning(\"FAIL is this log captured?\")\n        print(\"FAIL this stdout is also captured\")\n        print(\"FAIL this stderr is also captured\", file=sys.stderr)\n        logger.warning(\"FAIL this log is also captured\")\n        logger.critical(fake_data)\n        logger.error(fake_data)\n        # logger.warning(fake_data)\n        logger.info(fake_data)\n        # logger.debug(fake_data)\n        # logger.info(ZWJ_X3)\n>       assert False\nE       assert False\n\ndemo-tests/orig/test_0.py:56: AssertionError"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
      "outcome": "failed",
      "start_time": "2025-05-31T03:42:15.955592+00:00",
      "stop_time": "2025-05-31T03:42:15.956059+00:00",
      "duration": 0.000467,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "tmp_path = PosixPath('/private/var/folders/pd/fvjgwfx97wb95q5t2k168sxr0000gn/T/pytest-of-jwr003/pytest-163/test_always_rerun2')\n\n    @pytest.mark.flaky(reruns=2)\n    def test_always_rerun(tmp_path):\n        state_file = tmp_path / \"rerun_state.txt\"\n        if not state_file.exists():\n            state_file.write_text(\"fail\")\n>           assert False, \"Fail first run\"\nE           AssertionError: Fail first run\nE           assert False\n\ndemo-tests/orig/test_0.py:144: AssertionError"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_skip",
      "outcome": "skipped",
      "start_time": "2025-05-31T03:42:15.925729+00:00",
      "stop_time": "2025-05-31T03:42:15.925905+00:00",
      "duration": 0.000176,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "('/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py', 74, 'Skipped: Skipping this test with decorator.')"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_xfail",
      "outcome": "xfailed",
      "start_time": "2025-05-31T03:42:15.926405+00:00",
      "stop_time": "2025-05-31T03:42:15.926590+00:00",
      "duration": 0.000185,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "file /Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py, line 82\n  @pytest.mark.xfail()\n  def test0_xfail(logger, capstderr):\nE       fixture 'capstderr' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, error_fixture, fake_data, include_metadata_in_junit_xml, json_metadata, logger, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, random_sleep, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py:82"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_xpass",
      "outcome": "xfailed",
      "start_time": "2025-05-31T03:42:15.928692+00:00",
      "stop_time": "2025-05-31T03:42:15.928863+00:00",
      "duration": 0.000171,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "file /Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py, line 104\n  @pytest.mark.xfail()\n  def test0_xpass(logger, capstdout):\nE       fixture 'capstdout' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, error_fixture, fake_data, include_metadata_in_junit_xml, json_metadata, logger, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, random_sleep, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py:104"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_xpass_demo",
      "outcome": "xpassed",
      "start_time": "2025-05-31T03:42:15.928161+00:00",
      "stop_time": "2025-05-31T03:42:15.928284+00:00",
      "duration": 0.000123,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test0_warning",
      "outcome": "error",
      "start_time": "2025-05-31T03:42:15.929964+00:00",
      "stop_time": "2025-05-31T03:42:15.930078+00:00",
      "duration": 0.000114,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "file /Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py, line 122\n  def test0_warning(capstdlog):\nE       fixture 'capstdlog' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, error_fixture, fake_data, include_metadata_in_junit_xml, json_metadata, logger, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, random_sleep, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py:122"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test_flaky_3",
      "outcome": "error",
      "start_time": "2025-05-31T03:42:15.934540+00:00",
      "stop_time": "2025-05-31T03:42:15.934655+00:00",
      "duration": 0.000115,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "file /Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py, line 131\n  @pytest.mark.flaky(reruns=3)\n  def test_flaky_3(capstderr):\nE       fixture 'capstderr' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, error_fixture, fake_data, include_metadata_in_junit_xml, json_metadata, logger, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, random_sleep, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py:131"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
      "outcome": "rerun",
      "start_time": "2025-05-31T03:42:15.945368+00:00",
      "stop_time": "2025-05-31T03:42:15.945937+00:00",
      "duration": 0.000569,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "tmp_path = PosixPath('/private/var/folders/pd/fvjgwfx97wb95q5t2k168sxr0000gn/T/pytest-of-jwr003/pytest-163/test_always_rerun0')\n\n    @pytest.mark.flaky(reruns=2)\n    def test_always_rerun(tmp_path):\n        state_file = tmp_path / \"rerun_state.txt\"\n        if not state_file.exists():\n            state_file.write_text(\"fail\")\n>           assert False, \"Fail first run\"\nE           AssertionError: Fail first run\nE           assert False\n\ndemo-tests/orig/test_0.py:144: AssertionError"
    },
    {
      "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
      "outcome": "rerun",
      "start_time": "2025-05-31T03:42:15.950437+00:00",
      "stop_time": "2025-05-31T03:42:15.950962+00:00",
      "duration": 0.000525,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "tmp_path = PosixPath('/private/var/folders/pd/fvjgwfx97wb95q5t2k168sxr0000gn/T/pytest-of-jwr003/pytest-163/test_always_rerun1')\n\n    @pytest.mark.flaky(reruns=2)\n    def test_always_rerun(tmp_path):\n        state_file = tmp_path / \"rerun_state.txt\"\n        if not state_file.exists():\n            state_file.write_text(\"fail\")\n>           assert False, \"Fail first run\"\nE           AssertionError: Fail first run\nE           assert False\n\ndemo-tests/orig/test_0.py:144: AssertionError"
    }
  ],
  "rerun_test_groups": [
    {
      "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
      "tests": [
        {
          "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
          "outcome": "rerun",
          "start_time": "2025-05-31T03:42:15.945368+00:00",
          "stop_time": "2025-05-31T03:42:15.945937+00:00",
          "duration": 0.000569,
          "caplog": "",
          "capstderr": "",
          "capstdout": "",
          "longreprtext": "tmp_path = PosixPath('/private/var/folders/pd/fvjgwfx97wb95q5t2k168sxr0000gn/T/pytest-of-jwr003/pytest-163/test_always_rerun0')\n\n    @pytest.mark.flaky(reruns=2)\n    def test_always_rerun(tmp_path):\n        state_file = tmp_path / \"rerun_state.txt\"\n        if not state_file.exists():\n            state_file.write_text(\"fail\")\n>           assert False, \"Fail first run\"\nE           AssertionError: Fail first run\nE           assert False\n\ndemo-tests/orig/test_0.py:144: AssertionError"
        },
        {
          "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
          "outcome": "rerun",
          "start_time": "2025-05-31T03:42:15.950437+00:00",
          "stop_time": "2025-05-31T03:42:15.950962+00:00",
          "duration": 0.000525,
          "caplog": "",
          "capstderr": "",
          "capstdout": "",
          "longreprtext": "tmp_path = PosixPath('/private/var/folders/pd/fvjgwfx97wb95q5t2k168sxr0000gn/T/pytest-of-jwr003/pytest-163/test_always_rerun1')\n\n    @pytest.mark.flaky(reruns=2)\n    def test_always_rerun(tmp_path):\n        state_file = tmp_path / \"rerun_state.txt\"\n        if not state_file.exists():\n            state_file.write_text(\"fail\")\n>           assert False, \"Fail first run\"\nE           AssertionError: Fail first run\nE           assert False\n\ndemo-tests/orig/test_0.py:144: AssertionError"
        },
        {
          "nodeid": "demo-tests/orig/test_0.py::test_always_rerun",
          "outcome": "failed",
          "start_time": "2025-05-31T03:42:15.955592+00:00",
          "stop_time": "2025-05-31T03:42:15.956059+00:00",
          "duration": 0.000467,
          "caplog": "",
          "capstderr": "",
          "capstdout": "",
          "longreprtext": "tmp_path = PosixPath('/private/var/folders/pd/fvjgwfx97wb95q5t2k168sxr0000gn/T/pytest-of-jwr003/pytest-163/test_always_rerun2')\n\n    @pytest.mark.flaky(reruns=2)\n    def test_always_rerun(tmp_path):\n        state_file = tmp_path / \"rerun_state.txt\"\n        if not state_file.exists():\n            state_file.write_text(\"fail\")\n>           assert False, \"Fail first run\"\nE           AssertionError: Fail first run\nE           assert False\n\ndemo-tests/orig/test_0.py:144: AssertionError"
        }
      ]
    }
  ],
  "warnings": [],
  "errors": [
    {
      "event_type": "warning",
      "nodeid": "demo-tests/orig/test_0.py::test0_warning",
      "when": "setup",
      "outcome": "failed",
      "message": null,
      "category": null,
      "filename": null,
      "lineno": null,
      "longrepr": "file /Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py, line 122\n  def test0_warning(capstdlog):\nE       fixture 'capstdlog' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, error_fixture, fake_data, include_metadata_in_junit_xml, json_metadata, logger, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, random_sleep, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py:122",
      "sections": [],
      "keywords": [
        "test0_warning",
        "test_0.py",
        "orig",
        "demo-tests",
        "pytest-recap",
        ""
      ],
      "location": null
    },
    {
      "event_type": "warning",
      "nodeid": "demo-tests/orig/test_0.py::test_flaky_3",
      "when": "setup",
      "outcome": "failed",
      "message": null,
      "category": null,
      "filename": null,
      "lineno": null,
      "longrepr": "file /Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py, line 131\n  @pytest.mark.flaky(reruns=3)\n  def test_flaky_3(capstderr):\nE       fixture 'capstderr' not found\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, error_fixture, fake_data, include_metadata_in_junit_xml, json_metadata, logger, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, random_sleep, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/jwr003/coding/pytest-recap/demo-tests/orig/test_0.py:131",
      "sections": [],
      "keywords": [
        "test_flaky_3",
        "flaky",
        "pytestmark",
        "test_0.py",
        "orig",
        "demo-tests",
        "pytest-recap",
        ""
      ],
      "location": null
    }
  ],
  "session_stats": {
    "passed": 2,
    "failed": 2,
    "skipped": 1,
    "xfailed": 2,
    "xpassed": 1,
    "error": 2,
    "rerun": 2,
    "warnings": 0
  }
}