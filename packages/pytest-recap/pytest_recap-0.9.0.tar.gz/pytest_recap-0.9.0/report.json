{
  "session_id": "20250528-235436-f75f8afb",
  "session_tags": {},
  "session_start_time": "2025-05-28T23:54:36.304868+00:00",
  "session_stop_time": "2025-05-28T23:55:49.250262+00:00",
  "system_under_test": {
    "name": "pytest-recap"
  },
  "testing_system": {
    "hostname": "GPYVQ4KGXY.local",
    "platform": "macOS-15.5-x86_64-i386-64bit",
    "python_version": "3.9.16",
    "pytest_version": "8.3.5",
    "environment": "test"
  },
  "test_results": [
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_get_user",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:36.304868+00:00",
      "stop_time": "2025-05-28T23:54:36.361059+00:00",
      "duration": 0.056191,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_list_users",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:36.362383+00:00",
      "stop_time": "2025-05-28T23:54:36.489942+00:00",
      "duration": 0.127559,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_search_users",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:36.495513+00:00",
      "stop_time": "2025-05-28T23:54:36.750631+00:00",
      "duration": 0.255118,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_create_user_auth",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:36.755055+00:00",
      "stop_time": "2025-05-28T23:54:36.913615+00:00",
      "duration": 0.15856,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_batch_operations",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:36.918122+00:00",
      "stop_time": "2025-05-28T23:54:37.223257+00:00",
      "duration": 0.305135,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_update_user",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.229358+00:00",
      "stop_time": "2025-05-28T23:54:37.306247+00:00",
      "duration": 0.076889,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_delete_user",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.309245+00:00",
      "stop_time": "2025-05-28T23:54:37.372295+00:00",
      "duration": 0.06305,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_login",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.375741+00:00",
      "stop_time": "2025-05-28T23:54:37.428412+00:00",
      "duration": 0.052671,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_profile",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.432631+00:00",
      "stop_time": "2025-05-28T23:54:37.488980+00:00",
      "duration": 0.056349,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_api/test_user_endpoints.py::test_api_user_preferences",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.492096+00:00",
      "stop_time": "2025-05-28T23:54:37.564962+00:00",
      "duration": 0.072866,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_db_connection",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.569499+00:00",
      "stop_time": "2025-05-28T23:54:37.570016+00:00",
      "duration": 0.000517,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_simple_query",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.585052+00:00",
      "stop_time": "2025-05-28T23:54:37.669039+00:00",
      "duration": 0.083987,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_successful_transaction",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.691079+00:00",
      "stop_time": "2025-05-28T23:54:37.957618+00:00",
      "duration": 0.266539,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_transaction_rollback",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:37.975449+00:00",
      "stop_time": "2025-05-28T23:54:38.150507+00:00",
      "duration": 0.175058,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_connection_stability",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:38.176701+00:00",
      "stop_time": "2025-05-28T23:54:38.254806+00:00",
      "duration": 0.078105,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_query_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:38.274401+00:00",
      "stop_time": "2025-05-28T23:54:38.344110+00:00",
      "duration": 0.069709,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_db_specific_features",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:38.744064+00:00",
      "stop_time": "2025-05-28T23:54:38.816869+00:00",
      "duration": 0.072805,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_create_schema",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:38.839395+00:00",
      "stop_time": "2025-05-28T23:54:38.986430+00:00",
      "duration": 0.147035,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_create_table",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:39.007949+00:00",
      "stop_time": "2025-05-28T23:54:39.243172+00:00",
      "duration": 0.235223,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_insert_data",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:39.267263+00:00",
      "stop_time": "2025-05-28T23:54:39.440054+00:00",
      "duration": 0.172791,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_product_availability",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:39.466202+00:00",
      "stop_time": "2025-05-28T23:54:39.572826+00:00",
      "duration": 0.106624,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_authentication_flow",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:39.576774+00:00",
      "stop_time": "2025-05-28T23:54:39.933290+00:00",
      "duration": 0.356516,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_order_with_inventory_failure",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:41.677962+00:00",
      "stop_time": "2025-05-28T23:54:42.082162+00:00",
      "duration": 0.4042,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_inventory_consistency",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:42.088098+00:00",
      "stop_time": "2025-05-28T23:54:43.084608+00:00",
      "duration": 0.99651,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_user_registration",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:43.381622+00:00",
      "stop_time": "2025-05-28T23:54:43.596056+00:00",
      "duration": 0.214434,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_user_login",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:43.599543+00:00",
      "stop_time": "2025-05-28T23:54:43.782116+00:00",
      "duration": 0.182573,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_read_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:44.381279+00:00",
      "stop_time": "2025-05-28T23:54:44.752234+00:00",
      "duration": 0.370955,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_concurrent_read_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:46.647291+00:00",
      "stop_time": "2025-05-28T23:54:46.914498+00:00",
      "duration": 0.267207,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_concurrent_write_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:46.919114+00:00",
      "stop_time": "2025-05-28T23:54:47.439433+00:00",
      "duration": 0.520319,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_system_under_stress",
      "outcome": "passed",
      "start_time": "2025-05-28T23:54:47.443994+00:00",
      "stop_time": "2025-05-28T23:55:03.808380+00:00",
      "duration": 16.364386,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_resource_utilization",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:03.812657+00:00",
      "stop_time": "2025-05-28T23:55:14.268245+00:00",
      "duration": 10.455588,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_system_recovery",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:14.273153+00:00",
      "stop_time": "2025-05-28T23:55:29.608321+00:00",
      "duration": 15.335168,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_sustained_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:29.611439+00:00",
      "stop_time": "2025-05-28T23:55:30.117004+00:00",
      "duration": 0.505565,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_baseline_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:30.119710+00:00",
      "stop_time": "2025-05-28T23:55:30.323407+00:00",
      "duration": 0.203697,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_comparative_performance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:30.328236+00:00",
      "stop_time": "2025-05-28T23:55:30.588199+00:00",
      "duration": 0.259963,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_scalability",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:30.592578+00:00",
      "stop_time": "2025-05-28T23:55:30.821188+00:00",
      "duration": 0.22861,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_login_page_loads",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:30.826892+00:00",
      "stop_time": "2025-05-28T23:55:31.300873+00:00",
      "duration": 0.473981,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_login_with_valid_credentials",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:31.305052+00:00",
      "stop_time": "2025-05-28T23:55:32.520683+00:00",
      "duration": 1.215631,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_dashboard_widgets_load",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:34.356013+00:00",
      "stop_time": "2025-05-28T23:55:34.478005+00:00",
      "duration": 0.121992,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_responsive_design",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:34.481749+00:00",
      "stop_time": "2025-05-28T23:55:35.548366+00:00",
      "duration": 1.066617,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_interactive_chart",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:36.968171+00:00",
      "stop_time": "2025-05-28T23:55:37.761174+00:00",
      "duration": 0.793003,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_user_profile_page_loads",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:44.905907+00:00",
      "stop_time": "2025-05-28T23:55:45.473498+00:00",
      "duration": 0.567591,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_accessibility_compliance",
      "outcome": "passed",
      "start_time": "2025-05-28T23:55:47.880634+00:00",
      "stop_time": "2025-05-28T23:55:49.250262+00:00",
      "duration": 1.369628,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "None"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_db/test_data_operations.py::test_data_integrity",
      "outcome": "failed",
      "start_time": "2025-05-28T23:54:38.363714+00:00",
      "stop_time": "2025-05-28T23:54:38.690264+00:00",
      "duration": 0.32655,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "db_connection = <test_data_operations.MockConnection object at 0x10b9d3c40>\n\n    def test_data_integrity(db_connection):\n        \"\"\"Test data integrity constraints.\"\"\"\n        cursor = db_connection.cursor()\n    \n        # Try to insert a record with invalid data\n        try:\n            cursor.execute(\"INSERT INTO users (name, email) VALUES (NULL, 'invalid@example.com')\")\n            db_connection.commit()\n    \n            # If we get here without an exception, the test should fail randomly\n            # to simulate integrity constraint violations\n            if random.random() < 0.3:\n>               pytest.fail(\"Data integrity constraint should have been violated\")\nE               Failed: Data integrity constraint should have been violated\n\ndemo-tests/realistic/realistic_db/test_data_operations.py:373: Failed"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_user_purchases",
      "outcome": "failed",
      "start_time": "2025-05-28T23:54:43.912028+00:00",
      "stop_time": "2025-05-28T23:54:44.362354+00:00",
      "duration": 0.450326,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "authenticated_user = {'expires_in': 300, 'role': 'user', 'success': True, 'token': 'mock-token-test_user-1748476483', ...}\ninventory_service = <test_service_workflows.MockInventoryService object at 0x10bd78e20>\norder_service = <test_service_workflows.MockOrderService object at 0x10bd78a90>\n\n    @pytest.mark.dependency(depends=[\"test_user_login\"])\n    def test_user_purchases(authenticated_user, inventory_service, order_service):\n        \"\"\"Test user purchase flow (depends on login).\"\"\"\n        user_id = authenticated_user[\"user_id\"]\n    \n        # Create an order\n        order_items = [{\"product_id\": \"product-7\", \"quantity\": 1}]\n        order_result = order_service.create_order(user_id, order_items)\n    \n>       assert order_result[\"success\"] is True\nE       assert False is True\n\ndemo-tests/realistic/realistic_integration/test_service_workflows.py:475: AssertionError"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_performance/test_load_scenarios.py::test_write_performance",
      "outcome": "failed",
      "start_time": "2025-05-28T23:54:44.755097+00:00",
      "stop_time": "2025-05-28T23:54:46.622609+00:00",
      "duration": 1.867512,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "performance_tester = <test_load_scenarios.PerformanceTester object at 0x10b8b2fd0>\n\n    def test_write_performance(performance_tester):\n        \"\"\"Test write operation performance.\"\"\"\n        # Execute a series of write operations\n        for _ in range(10):\n            metrics = performance_tester.execute_operation(\"write\", complexity=random.uniform(0.8, 1.2))\n            assert metrics.duration > 0\n    \n        # Analyze the results\n        analysis = performance_tester.analyze_metrics(\"write\")\n    \n        # Verify performance meets requirements\n        assert analysis[\"avg_duration\"] < 0.3, f\"Average write time too slow: {analysis['avg_duration']:.3f}s\"\n>       assert analysis[\"p95_duration\"] < 0.5, f\"95th percentile write time too slow: {analysis['p95_duration']:.3f}s\"\nE       AssertionError: 95th percentile write time too slow: 0.582s\nE       assert 0.5824370384216309 < 0.5\n\ndemo-tests/realistic/realistic_performance/test_load_scenarios.py:277: AssertionError"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_form_submission_flow",
      "outcome": "failed",
      "start_time": "2025-05-28T23:55:39.217738+00:00",
      "stop_time": "2025-05-28T23:55:43.481468+00:00",
      "duration": 4.26373,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "logged_in_browser = <test_web_interface.MockWebDriver object at 0x10bcf5a30>\n\n    def test_form_submission_flow(logged_in_browser):\n        \"\"\"Test a multi-step form submission process.\"\"\"\n        browser = logged_in_browser\n        browser.get(\"https://example.com/dashboard/new-project\")\n    \n        # Step 1: Fill out basic information\n        project_name = browser.find_element(\"id\", \"project-name\")\n        project_name.send_keys(\"Test Project\")\n    \n        description = browser.find_element(\"id\", \"project-description\")\n        description.send_keys(\"This is a test project created by automated UI tests.\")\n    \n        # Click next button\n        next_button = browser.find_element(\"id\", \"step-1-next\")\n        next_button.click()\n    \n        # Step 2: Project settings\n        # Simulate slow page transition\n        time.sleep(0.08)  # Shortened for speed\n    \n        # Select project type dropdown\n        project_type = browser.find_element(\"id\", \"project-type\")\n        project_type.click()\n    \n        # Select an option\n        option = browser.find_element(\"css\", \"#project-type-options li:nth-child(2)\")\n        option.click()\n    \n        # Click next button\n        next_button = browser.find_element(\"id\", \"step-2-next\")\n        next_button.click()\n    \n        # Step 3: Confirmation\n        # Another slow page transition\n        time.sleep(0.5)\n    \n        # Submit form\n        submit_button = browser.find_element(\"id\", \"submit-project\")\n        submit_button.click()\n    \n        # Verify success message\n        success_message = browser.find_element(\"class\", \"success-message\")\n>       assert \"Project created successfully\" in success_message.text\nE       AssertionError: assert 'Project created successfully' in 'Text for success-message'\nE        +  where 'Text for success-message' = <test_web_interface.MockWebElement object at 0x10bcf5d90>.text\n\ndemo-tests/realistic/realistic_ui/test_web_interface.py:298: AssertionError"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_ui/test_web_interface.py::test_edit_user_profile",
      "outcome": "failed",
      "start_time": "2025-05-28T23:55:46.973544+00:00",
      "stop_time": "2025-05-28T23:55:47.860544+00:00",
      "duration": 0.887,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "logged_in_browser = <test_web_interface.MockWebDriver object at 0x10bcd3c10>\n\n    @pytest.mark.dependency(depends=[\"test_user_profile_page_loads\"])\n    def test_edit_user_profile(logged_in_browser):\n        \"\"\"Test editing user profile (depends on profile page loading).\"\"\"\n        browser = logged_in_browser\n        browser.get(\"https://example.com/profile/edit\")\n    \n        # Find edit form elements\n        display_name = browser.find_element(\"id\", \"display-name\")\n>       bio = browser.find_element(\"id\", \"user-bio\")\n\ndemo-tests/realistic/realistic_ui/test_web_interface.py:325: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_web_interface.MockWebDriver object at 0x10bcd3c10>, by = 'id', value = 'user-bio'\n\n    def find_element(self, by, value):\n        # Always find login elements on login page\n        if self.current_url.endswith(\"/login\") and by == \"id\" and value in (\"username\", \"password\", \"login-button\"):\n            return MockWebElement(value, by, driver=self)\n        # Always find dashboard widgets on dashboard\n        if self.current_url.endswith(\"/dashboard\") and by == \"class\" and value == \"dashboard-widget\":\n            return MockWebElement(\"dashboard-widget\", by, driver=self)\n        # Always find profile elements on profile page\n        if self.current_url.endswith(\"/profile\") and by == \"id\" and value == \"profile-header\":\n            return MockWebElement(value, by, driver=self)\n        # Simulate element not found occasionally (except for above patches)\n        if random.random() < 0.08:\n            time.sleep(0.3)\n>           raise Exception(f\"No such element: {by}={value}\")\nE           Exception: No such element: id=user-bio\n\ndemo-tests/realistic/realistic_ui/test_web_interface.py:81: Exception"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_complete_order_workflow",
      "outcome": "skipped",
      "start_time": "2025-05-28T23:54:40.228925+00:00",
      "stop_time": "2025-05-28T23:54:41.569852+00:00",
      "duration": 1.340927,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "('/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py', 345, 'Skipped: Payment service unavailable')"
    },
    {
      "nodeid": "demo-tests/realistic/realistic_integration/test_service_workflows.py::test_concurrent_orders",
      "outcome": "skipped",
      "start_time": "2025-05-28T23:54:43.088176+00:00",
      "stop_time": "2025-05-28T23:54:43.377575+00:00",
      "duration": 0.289399,
      "caplog": "",
      "capstderr": "",
      "capstdout": "",
      "longreprtext": "('/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py', 406, 'Skipped: Authentication service unavailable')"
    }
  ],
  "rerun_test_groups": [],
  "warnings": [
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_api/test_user_endpoints.py",
      "lineno": 251,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_api/test_user_endpoints.py",
      "lineno": 261,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_api/test_user_endpoints.py",
      "lineno": 269,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_db/test_data_operations.py",
      "lineno": 399,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_db/test_data_operations.py",
      "lineno": 413,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_db/test_data_operations.py",
      "lineno": 435,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py",
      "lineno": 446,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py",
      "lineno": 454,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_integration/test_service_workflows.py",
      "lineno": 466,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_performance/test_load_scenarios.py",
      "lineno": 412,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_performance/test_load_scenarios.py",
      "lineno": 421,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_ui/test_web_interface.py",
      "lineno": 302,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    },
    {
      "nodeid": "",
      "when": "collect",
      "outcome": null,
      "message": "Unknown pytest.mark.dependency - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "filename": "/Users/jwr003/coding/pytest-recap/demo-tests/realistic/realistic_ui/test_web_interface.py",
      "lineno": 317,
      "longrepr": null,
      "sections": [],
      "keywords": [],
      "location": null
    }
  ],
  "errors": [],
  "session_stats": {
    "passed": 43,
    "failed": 5,
    "skipped": 2,
    "warnings": 0
  }
}