[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "refib"
version = "0.1.0"
authors = [
    {name = "David Li", email = "uncorrelited@fastmail.com"},
]
description = "A simple Python retry library using Fibonacci sequence delays"
readme = "README.rst"
license = {text = "MIT"}
requires-python = ">=3.6"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []
keywords = ["retry", "fibonacci", "backoff", "decorator", "resilience", "fault-tolerance"]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-timeout>=1.4",
    "black>=22.3.0",
    "flake8>=4.0",
    "mypy>=0.910",
    "tox>=3.24",
]

[project.urls]
"Homepage" = "https://github.com/uncorrelited/refib"
"Bug Tracker" = "https://github.com/uncorrelited/refib/issues"
"Source Code" = "https://github.com/uncorrelited/refib"

[tool.black]
line-length = 88
target-version = ['py36', 'py37', 'py38', 'py39', 'py310', 'py311']

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=refib --cov-report=term-missing"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["refib"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]