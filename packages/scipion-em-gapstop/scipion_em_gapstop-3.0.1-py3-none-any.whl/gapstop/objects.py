# -*- coding: utf-8 -*-
# **************************************************************************
# *
# * Authors:     Scipion Team
# *
# * National Center of Biotechnology, CSIC, Spain
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
from pyworkflow.object import String, Integer, Pointer
from tomo.objects import Tomogram, SetOfTomograms


class GapStopScoreTomogram(Tomogram):
    """ Object used to represent scored tomograms generated by gapstop_tm."""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._tomoFile = String()  # Path to the corresponding tomogram
        self._anglesMap = String()  # Path to the angles map file generated by gapstop_tm
        self._angleList = String()  # Path to the angles list file generated by gapstop_tm
        self._tomoNum = Integer()  # Numeric id required by gapstop_tm
        self._symmetry = String()

    def setAnglesMap(self, val: str):
        self._anglesMap.set(val)

    def setAnglesList(self, val: str):
        self._angleList.set(val)

    def setTomoNum(self, val: int):
        self._tomoNum.set(val)

    def setSymmetry(self, val: str):
        self._symmetry.set(val)

    def setTomoFile(self, val: str):
        self._tomoFile.set(val)

    def getAnglesMap(self):
        return self._anglesMap.get()

    def getAngleList(self):
        return self._angleList.get()

    def getTomoNum(self):
        return self._tomoNum.get()

    def getSymmetry(self):
        return self._symmetry.get()

    def getTomoFile(self):
        return self._tomoFile.get()


class SetOfGapStopScoreTomograms(SetOfTomograms):
    ITEM_TYPE = GapStopScoreTomogram
    EXPOSE_ITEMS = True

