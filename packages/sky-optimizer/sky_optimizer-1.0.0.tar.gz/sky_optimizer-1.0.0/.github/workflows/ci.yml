name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        torch-version: ['1.11.0', '1.13.0', '2.0.0', 'latest']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
          - torch-version: '1.11.0'
            python-version: '3.11'
          - torch-version: '1.11.0'
            python-version: '3.12'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        
        # Install PyTorch based on matrix
        if [ "${{ matrix.torch-version }}" = "latest" ]; then
          pip install torch torchvision
        else
          pip install torch==${{ matrix.torch-version }} torchvision
        fi
        
        # Install package with dev dependencies
        pip install -e .[dev,advanced]

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 sky_optimizer --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 sky_optimizer --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy sky_optimizer --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors for now

    - name: Test with pytest
      run: |
        # Run fast tests first
        pytest tests/ -v -m "not slow and not gpu" --cov=sky_optimizer --cov-report=xml --cov-report=term-missing
        
        # Run slow tests separately
        pytest tests/ -v -m "slow" --cov=sky_optimizer --cov-append --cov-report=xml
      env:
        PYTEST_TIMEOUT: 300

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-gpu:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install CUDA
      run: |
        # Install CUDA for GPU testing
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
        sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
        wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-ubuntu2004-11-8-local_11.8.0-520.61.05-1_amd64.deb
        sudo dpkg -i cuda-repo-ubuntu2004-11-8-local_11.8.0-520.61.05-1_amd64.deb
        sudo cp /var/cuda-repo-ubuntu2004-11-8-local/cuda-*-keyring.gpg /usr/share/keyrings/
        sudo apt-get update
        sudo apt-get -y install cuda-toolkit-11-8
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
        pip install -e .[dev,advanced]

    - name: Test GPU functionality
      run: |
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
        if [ "$(python -c 'import torch; print(torch.cuda.is_available())')" = "True" ]; then
          pytest tests/ -v -m "gpu" --tb=short
        else
          echo "GPU not available, skipping GPU tests"
        fi
      continue-on-error: true

  build-and-publish:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1.0.1
      with:
        config: .bandit
      continue-on-error: true

    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
      continue-on-error: true

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check README
      run: |
        python -c "
        import pkg_resources
        pkg_resources.require('readme_renderer')
        from readme_renderer.rst import render
        from readme_renderer.markdown import render as md_render
        
        with open('README.md', 'r') as f:
            content = f.read()
        
        rendered = md_render(content)
        if rendered is None:
            raise ValueError('README.md failed to render')
        print('README.md renders correctly')
        "
      continue-on-error: true