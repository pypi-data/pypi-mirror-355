# function.yaml
table: Function
columns:
  - name: attributes.name
    source_query: function_name
  - name: attributes.qualifiedName
    source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema, '/', function_name)
    source_columns: [connection_qualified_name, function_catalog, function_schema, function_name]
  - name: attributes.connectionQualifiedName
    source_query: connection_qualified_name
  - name: attributes.connectionName
    source_query: connection_name
  - name: attributes.description
    source_query: |
      CASE
        WHEN remarks IS NOT NULL THEN
          REGEXP_REPLACE(REGEXP_REPLACE(SUBSTRING(COALESCE(remarks, ''), 1, 100000), '<[^>]+>', ''), '\s+', ' ')
        ELSE
          NULL
      END
    source_columns: [remarks]
  - name: attributes.databaseName
    source_query: function_catalog
  - name: attributes.databaseQualifiedName
    source_query: concat(connection_qualified_name, '/', function_catalog)
    source_columns: [connection_qualified_name, function_catalog]
  - name: attributes.schemaName
    source_query: function_schema
  - name: attributes.schemaQualifiedName
    source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema)
    source_columns: [connection_qualified_name, function_catalog, function_schema]
  - name: attributes.functionType
    source_query: |
      CASE
        WHEN data_type LIKE '%TABLE%' THEN 'Tabular'
        ELSE 'Scalar'
      END
    source_columns: [data_type]
  - name: attributes.functionReturnType
    source_query: COALESCE(data_type, NULL)
    source_columns: [data_type]
  - name: attributes.functionLanguage
    source_query: COALESCE(function_language, NULL)
    source_columns: [function_language]
  - name: attributes.functionDefinition
    source_query: COALESCE(function_definition, NULL)
    source_columns: [function_definition]
  - name: attributes.functionArguments
    source_query: |
      CASE
        WHEN argument_signature IS NOT NULL THEN split(substring(argument_signature, 2, cast(length(argument_signature) - 2 as int)), ',')
        ELSE NULL
      END
    source_columns: [argument_signature]
  - name: attributes.functionIsSecure
    source_query: |
      CASE
        WHEN is_secure = 'YES' THEN TRUE
        ELSE FALSE
      END
    source_columns: [is_secure]
  - name: attributes.functionIsExternal
    source_query: |
      CASE
        WHEN is_external = 'YES' THEN TRUE
        ELSE FALSE
      END
    source_columns: [is_external]
  - name: attributes.functionIsDMF
    source_query: |
      CASE
        WHEN is_data_metric = 'YES' THEN TRUE
        ELSE FALSE
      END
    source_columns: [is_data_metric]
  - name: attributes.functionIsMemoizable
    source_query: |
      CASE
        WHEN is_memoizable = 'YES' THEN TRUE
        ELSE FALSE
      END
    source_columns: [is_memoizable]
  - name: attributes.functionSchema.typeName
    source_query: "'Schema'"
  - name: attributes.functionSchema.attributes.qualifiedName
    source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema)
    source_columns: [connection_qualified_name, function_catalog, function_schema]
  - name: attributes.functionSchema.attributes.name
    source_query: function_schema
  - name: attributes.functionSchema.isIncomplete
    source_query: TRUE
  - name: attributes.functionSchema.uniqueAttributes.qualifiedName
    source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema)
    source_columns: [connection_qualified_name, function_catalog, function_schema]
  - name: attributes.tenantId
    source_query: tenant_id
  - name: attributes.lastSyncWorkflowName
    source_query: last_sync_workflow_name
  - name: attributes.lastSyncRun
    source_query: last_sync_run
  - name: attributes.lastSyncRunAt
    source_query: last_sync_run_at
  - name: attributes.connectorName
    source_query: connector_name
  - name: typeName
    source_query: "'Function'"
  - name: status
    source_query: "'ACTIVE'"