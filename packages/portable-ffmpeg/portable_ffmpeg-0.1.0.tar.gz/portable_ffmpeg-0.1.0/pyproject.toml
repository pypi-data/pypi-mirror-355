[project]
name = "portable-ffmpeg"
version = "0.1.0"
description = "Downloads static ffmpeg builds for Windows, macOS, and Linux"
readme = "README.md"
authors = [
    { name = "Marko Bausch", email = "60338487+mrkbac@users.noreply.github.com" },
]
license = { text = "MIT" }
requires-python = ">=3.10"
dependencies = []
keywords = [
    "ffmpeg",
    "ffprobe",
    "video",
    "audio",
    "multimedia",
    "static",
    "portable",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Homepage = "https://github.com/mrkbac/portable-ffmpeg"
Repository = "https://github.com/mrkbac/portable-ffmpeg"
Issues = "https://github.com/mrkbac/portable-ffmpeg/issues"

[project.optional-dependencies]
dev = ["pytest>=8.4.0", "pytest-cov", "ruff", "pyright", "pre-commit"]

[project.scripts]
static_ffmpeg = "portable_ffmpeg:run_ffmpeg"
static_ffprobe = "portable_ffmpeg:run_ffprobe"
print_paths = "portable_ffmpeg:print_paths"
clear_cache = "portable_ffmpeg:clear_cache"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = ['ALL']
ignore = [
    "S310",    # Audit URL open (expected for downloading binaries)
    "S103",    # os.chmod setting permissive mask (need executable permissions)
    "S603",    # subprocess call: check for execution of untrusted input (expected for CLI entry points)
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "PLR2004", # Magic values (acceptable in some cases)
    "T201",    # print statement used
    "ERA001",  # Commented-out code
]
[tool.ruff.lint.per-file-ignores]
# relaxes in tests
"tests/*" = [
    "S101",    # Use of assert detected (legitimate in tests)
    "BLE001",  # Broad exception catching (acceptable in tests)
    "PT011",   # Broad pytest.raises (sometimes acceptable)
    "PERF203", # try-except in loop (acceptable in tests)
    "PLR2004", # Magic values (acceptable in tests)
    "D401",    # Imperative mood (less important in tests)
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pyright>=1.1.402",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.13",
]

[tool.pytest.ini_options]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
addopts = "--strict-markers --strict-config"

[tool.coverage.report]
fail_under = 100
show_missing = true
