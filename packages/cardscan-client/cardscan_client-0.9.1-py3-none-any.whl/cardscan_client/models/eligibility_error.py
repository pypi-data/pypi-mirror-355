# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API Clients.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class EligibilityError(BaseModel):
    """
    EligibilityError
    """
    field: Optional[StrictStr] = Field(default=None, description="The field that caused the error.")
    code: Optional[StrictStr] = Field(default=None, description="The error code.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the error.")
    followup_action: Optional[StrictStr] = Field(default=None, description="Suggested follow-up action for the error.")
    location: Optional[StrictStr] = Field(default=None, description="The location of the error.")
    possible_resolutions: Optional[StrictStr] = Field(default=None, description="Possible resolutions for the error.")
    __properties = ["field", "code", "description", "followup_action", "location", "possible_resolutions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def _json_serializer(self, obj):
        """JSON serializer function for datetime objects"""
        if isinstance(obj, datetime):
            return obj.isoformat()

        raise TypeError(f"Type {type(obj)} not serializable")

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(), default=self._json_serializer)

    @classmethod
    def from_json(cls, json_str: str) -> EligibilityError:
        """Create an instance of EligibilityError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EligibilityError:
        """Create an instance of EligibilityError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EligibilityError.parse_obj(obj)

        _obj = EligibilityError.parse_obj({
            "field": obj.get("field"),
            "code": obj.get("code"),
            "description": obj.get("description"),
            "followup_action": obj.get("followup_action"),
            "location": obj.get("location"),
            "possible_resolutions": obj.get("possible_resolutions")
        })
        return _obj


