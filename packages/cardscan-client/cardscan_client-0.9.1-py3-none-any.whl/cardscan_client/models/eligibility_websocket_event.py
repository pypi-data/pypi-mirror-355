# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API Clients.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from cardscan_client.models.card_state import CardState
from cardscan_client.models.websocket_error import WebsocketError

class EligibilityWebsocketEvent(BaseModel):
    """
    EligibilityWebsocketEvent
    """
    event_id: StrictStr = Field(...)
    type: StrictStr = Field(...)
    eligibility_id: StrictStr = Field(...)
    state: CardState = Field(...)
    created_at: datetime = Field(...)
    session_id: Optional[StrictStr] = None
    error: Optional[WebsocketError] = None
    card_id: Optional[StrictStr] = None
    __properties = ["event_id", "type", "eligibility_id", "state", "created_at", "session_id", "error", "card_id"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('eligibility'):
            raise ValueError("must be one of enum values ('eligibility')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def _json_serializer(self, obj):
        """JSON serializer function for datetime objects"""
        if isinstance(obj, datetime):
            return obj.isoformat()

        raise TypeError(f"Type {type(obj)} not serializable")

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(), default=self._json_serializer)

    @classmethod
    def from_json(cls, json_str: str) -> EligibilityWebsocketEvent:
        """Create an instance of EligibilityWebsocketEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EligibilityWebsocketEvent:
        """Create an instance of EligibilityWebsocketEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EligibilityWebsocketEvent.parse_obj(obj)

        _obj = EligibilityWebsocketEvent.parse_obj({
            "event_id": obj.get("event_id"),
            "type": obj.get("type"),
            "eligibility_id": obj.get("eligibility_id"),
            "state": obj.get("state"),
            "created_at": obj.get("created_at"),
            "session_id": obj.get("session_id"),
            "error": WebsocketError.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "card_id": obj.get("card_id")
        })
        return _obj


