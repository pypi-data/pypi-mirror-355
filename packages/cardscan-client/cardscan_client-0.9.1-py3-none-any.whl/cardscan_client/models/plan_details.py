# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API Clients.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class PlanDetails(BaseModel):
    """
    PlanDetails
    """
    plan_number: Optional[StrictStr] = Field(default=None, description="The plan number.")
    group_name: Optional[StrictStr] = Field(default=None, description="The name of the group associated with the plan.")
    group_number: Optional[StrictStr] = Field(default=None, description="The group number.")
    plan_start_date: Optional[date] = Field(default=None, description="The start date of the plan.")
    plan_end_date: Optional[date] = Field(default=None, description="The end date of the plan.")
    plan_eligibility_start_date: Optional[date] = Field(default=None, description="The eligibility start date of the plan.")
    plan_eligibility_end_date: Optional[date] = Field(default=None, description="The eligibility end date of the plan.")
    plan_name: Optional[StrictStr] = Field(default=None, description="The name of the plan.")
    plan_active: Optional[StrictBool] = Field(default=None, description="Indicates whether the plan is active.")
    __properties = ["plan_number", "group_name", "group_number", "plan_start_date", "plan_end_date", "plan_eligibility_start_date", "plan_eligibility_end_date", "plan_name", "plan_active"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def _json_serializer(self, obj):
        """JSON serializer function for datetime objects"""
        if isinstance(obj, datetime):
            return obj.isoformat()

        raise TypeError(f"Type {type(obj)} not serializable")

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict(), default=self._json_serializer)

    @classmethod
    def from_json(cls, json_str: str) -> PlanDetails:
        """Create an instance of PlanDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanDetails:
        """Create an instance of PlanDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanDetails.parse_obj(obj)

        _obj = PlanDetails.parse_obj({
            "plan_number": obj.get("plan_number"),
            "group_name": obj.get("group_name"),
            "group_number": obj.get("group_number"),
            "plan_start_date": obj.get("plan_start_date"),
            "plan_end_date": obj.get("plan_end_date"),
            "plan_eligibility_start_date": obj.get("plan_eligibility_start_date"),
            "plan_eligibility_end_date": obj.get("plan_eligibility_end_date"),
            "plan_name": obj.get("plan_name"),
            "plan_active": obj.get("plan_active")
        })
        return _obj


