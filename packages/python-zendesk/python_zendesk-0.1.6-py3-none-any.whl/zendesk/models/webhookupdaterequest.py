"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .apikeyauthentication import APIKeyAuthentication, APIKeyAuthenticationTypedDict
from .basicauthauthentication import (
    BasicAuthAuthentication,
    BasicAuthAuthenticationTypedDict,
)
from .bearertokenauthentication import (
    BearerTokenAuthentication,
    BearerTokenAuthenticationTypedDict,
)
from .webhooksigningsecret import WebhookSigningSecret, WebhookSigningSecretTypedDict
from enum import Enum
from typing import Dict, List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict
from zendesk.types import BaseModel


class WebhookUpdateRequestHTTPMethod(str, Enum):
    r"""HTTP method used for the webhook's requests. To subscribe the webhook to Zendesk events, this must be \"POST\" """

    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"


class WebhookUpdateRequestRequestFormat(str, Enum):
    r"""The format of the data that the webhook will send. To subscribe the webhook to Zendesk events, this must be \"json\" """

    JSON = "json"
    XML = "xml"
    FORM_ENCODED = "form_encoded"


class WebhookUpdateRequestStatus(str, Enum):
    r"""Current status of the webhook"""

    ACTIVE = "active"
    INACTIVE = "inactive"


WebhookUpdateRequestAuthenticationTypedDict = TypeAliasType(
    "WebhookUpdateRequestAuthenticationTypedDict",
    Union[
        BasicAuthAuthenticationTypedDict,
        BearerTokenAuthenticationTypedDict,
        APIKeyAuthenticationTypedDict,
    ],
)
r"""Adds authentication to the webhook's HTTP requests, if not specified, the webhook will be unauthenticated"""


WebhookUpdateRequestAuthentication = TypeAliasType(
    "WebhookUpdateRequestAuthentication",
    Union[BasicAuthAuthentication, BearerTokenAuthentication, APIKeyAuthentication],
)
r"""Adds authentication to the webhook's HTTP requests, if not specified, the webhook will be unauthenticated"""


class WebhookUpdateRequestExternalSourceTypedDict(TypedDict):
    r"""External source by which a webhook is created, e.g. Zendesk Marketplace"""

    name: NotRequired[str]
    r"""Name of the external source"""
    version: NotRequired[str]
    r"""Version of the external source"""


class WebhookUpdateRequestExternalSource(BaseModel):
    r"""External source by which a webhook is created, e.g. Zendesk Marketplace"""

    name: Optional[str] = None
    r"""Name of the external source"""

    version: Optional[str] = None
    r"""Version of the external source"""


class WebhookUpdateRequestWebhookTypedDict(TypedDict):
    name: str
    r"""Webhook name"""
    endpoint: str
    r"""The destination URL that the webhook notifies when Zendesk events occur"""
    http_method: WebhookUpdateRequestHTTPMethod
    r"""HTTP method used for the webhook's requests. To subscribe the webhook to Zendesk events, this must be \"POST\" """
    request_format: WebhookUpdateRequestRequestFormat
    r"""The format of the data that the webhook will send. To subscribe the webhook to Zendesk events, this must be \"json\" """
    status: WebhookUpdateRequestStatus
    r"""Current status of the webhook"""
    description: NotRequired[str]
    r"""Webhook description"""
    subscriptions: NotRequired[List[str]]
    r"""Event subscriptions for the webhook. To subscribe the webhook to Zendesk events, specify one or more event types.
    To connect the webhook to a trigger or automation, specify only \"conditional_ticket_events\" in the array

    """
    authentication: NotRequired[WebhookUpdateRequestAuthenticationTypedDict]
    r"""Adds authentication to the webhook's HTTP requests, if not specified, the webhook will be unauthenticated"""
    custom_headers: NotRequired[Dict[str, str]]
    r"""Custom headers to deliver additional non-credential info to destinations"""
    signing_secret: NotRequired[WebhookSigningSecretTypedDict]
    r"""Signing secret used to verify webhook requests"""
    external_source: NotRequired[WebhookUpdateRequestExternalSourceTypedDict]
    r"""External source by which a webhook is created, e.g. Zendesk Marketplace"""


class WebhookUpdateRequestWebhook(BaseModel):
    name: str
    r"""Webhook name"""

    endpoint: str
    r"""The destination URL that the webhook notifies when Zendesk events occur"""

    http_method: WebhookUpdateRequestHTTPMethod
    r"""HTTP method used for the webhook's requests. To subscribe the webhook to Zendesk events, this must be \"POST\" """

    request_format: WebhookUpdateRequestRequestFormat
    r"""The format of the data that the webhook will send. To subscribe the webhook to Zendesk events, this must be \"json\" """

    status: WebhookUpdateRequestStatus
    r"""Current status of the webhook"""

    description: Optional[str] = None
    r"""Webhook description"""

    subscriptions: Optional[List[str]] = None
    r"""Event subscriptions for the webhook. To subscribe the webhook to Zendesk events, specify one or more event types.
    To connect the webhook to a trigger or automation, specify only \"conditional_ticket_events\" in the array

    """

    authentication: Optional[WebhookUpdateRequestAuthentication] = None
    r"""Adds authentication to the webhook's HTTP requests, if not specified, the webhook will be unauthenticated"""

    custom_headers: Optional[Dict[str, str]] = None
    r"""Custom headers to deliver additional non-credential info to destinations"""

    signing_secret: Optional[WebhookSigningSecret] = None
    r"""Signing secret used to verify webhook requests"""

    external_source: Optional[WebhookUpdateRequestExternalSource] = None
    r"""External source by which a webhook is created, e.g. Zendesk Marketplace"""


class WebhookUpdateRequestTypedDict(TypedDict):
    webhook: WebhookUpdateRequestWebhookTypedDict


class WebhookUpdateRequest(BaseModel):
    webhook: WebhookUpdateRequestWebhook
