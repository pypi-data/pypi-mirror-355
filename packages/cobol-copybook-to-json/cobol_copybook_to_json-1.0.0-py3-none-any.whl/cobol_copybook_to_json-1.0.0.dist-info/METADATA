Metadata-Version: 2.4
Name: cobol-copybook-to-json
Version: 1.0.0
Summary: Convert COBOL copybooks to JSON schema format
Home-page: https://github.com/yourusername/cobol_copybook_to_json
Author: Your Name
Author-email: Arun Kumar <arun@example.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/arunkse/cobol_copybook_to_json
Project-URL: Bug Reports, https://github.com/arunkse/cobol_copybook_to_json/issues
Project-URL: Source, https://github.com/arunkse/cobol_copybook_to_json
Keywords: cobol,copybook,json,schema,converter,mainframe
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup :: XML
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# COBOL Copybook to JSON Schema Converter

A Python utility that converts COBOL copybooks to JSON schema format. This tool is particularly useful for mainframe modernization projects and data integration scenarios where you need to understand and work with COBOL data structures in modern applications.

## Features

- **Comprehensive COBOL Support**: Handles various COBOL data structures including:
  - Group items and elementary items
  - OCCURS clauses (arrays)
  - REDEFINES clauses
  - Different USAGE types (COMP, COMP-3, etc.)
  - PICTURE clauses with various data types
  - Signed and unsigned numeric fields

- **Dual Usage**: Can be used both as a command-line tool and as a Python library
- **Debug Support**: Built-in debugging capabilities for troubleshooting
- **Error Handling**: Comprehensive error handling with detailed messages

## Installation

```bash
pip install cobol-copybook-to-json
```

## Usage

### Command Line Tool

```bash
# Convert a COBOL copybook to JSON schema
cobol-to-json -c input_copybook.cpy -j output_schema.json

# Enable debug mode
cobol-to-json -c input_copybook.cpy -j output_schema.json -d
```

### Python Library

```python
from cobol_copybook_to_json import convert_copybook_to_json

# Read your COBOL copybook
with open('your_copybook.cpy', 'r') as f:
    copybook_content = f.read()

# Convert to JSON schema
result = convert_copybook_to_json(
    copybook_content=copybook_content,
    copybook_name="your_copybook.cpy",
    debug=False
)

if result["status"] == "success":
    print("JSON Schema:")
    print(result["json_string"])
    print(f"Record size: {result['record_size']} bytes")
    print(f"Field count: {result['field_count']}")
else:
    print(f"Error: {result['message']}")
```

## Example

### Input COBOL Copybook
```cobol
01  EMPLOYEE-RECORD.
    05  EMP-ID          PIC 9(6).
    05  EMP-NAME        PIC X(30).
    05  EMP-SALARY      PIC 9(7)V99 COMP-3.
    05  EMP-DEPT        PIC X(10).
    05  EMP-ADDRESSES   OCCURS 3 TIMES.
        10  ADDR-TYPE   PIC X(10).
        10  ADDR-LINE1  PIC X(35).
        10  ADDR-LINE2  PIC X(35).
```

### Output JSON Schema
The tool generates a comprehensive JSON schema that includes:
- Field names and types
- Data lengths and precision
- Array structures for OCCURS clauses
- Metadata about the original COBOL structure

## API Reference

### convert_copybook_to_json(copybook_content, copybook_name="copybook.cpy", debug=False)

**Parameters:**
- `copybook_content` (str or list): COBOL copybook content as string or list of strings
- `copybook_name` (str, optional): Name for the copybook (default: "copybook.cpy")
- `debug` (bool, optional): Enable debug output (default: False)

**Returns:**
Dictionary with the following keys:
- `status`: "success" or "error"
- `json_string`: Generated JSON schema (if successful)
- `record_size`: Total record size in bytes
- `field_count`: Number of fields processed
- `message`: Error message (if failed)
- `traceback`: Detailed error information (if debug enabled)

## Requirements

- Python 3.7 or higher
- No external dependencies

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Use Cases

- **Mainframe Modernization**: Convert legacy COBOL data structures for modern applications
- **Data Integration**: Understand COBOL data formats for ETL processes
- **API Development**: Generate schemas for APIs that interface with mainframe systems
- **Documentation**: Create readable documentation of COBOL data structures
