"""
Logger module for logging status messages.

"""

import json
from enum import Enum


class StatusCode(Enum):
    """Enumeration of possible status codes for logging."""

    SUCCESS = "success"     # Case: get flag successfully
    ERROR = "error"         # Case: get flag unsuccessfully [error in exploit returns an error]
    FAILED = "failed"       # Case: external error that not related to exploit
    FATAL = "fatal"         # Case: fatal error that requires immediate attention. Stop script's execution
    INFO = "info"           # Case: informative message


def log_status(
    status: StatusCode,
    message: str,
    team_id: int = 0,
    port_service: int = 0,
    flag_code: str = "",
    name_service: str = "",
) -> bool:
    """
    Logs a status message with additional information.

    Args:
        status (StatusCode): The status code to log.
        message (str): The message to log.
        team_id (int, optional): The ID of the team. Defaults to 0.
        port_service (int, optional): The port number of the service. Defaults to 0.
        flag_code (str, optional): The flag code. Defaults to "".
        name_service (str, optional): The name of the service. Defaults to "".

    Returns:
        bool: True if the status was logged successfully, False otherwise.
    """

    if not isinstance(status, StatusCode):
        return False

    print(
        json.dumps(
            {
                "status": status.value,
                "message": message,
                "team_id": team_id,
                "port_service": port_service,
                "flag_code": flag_code,
                "name_service": name_service,
            }
        ),
        flush=True,
    )
    return True
