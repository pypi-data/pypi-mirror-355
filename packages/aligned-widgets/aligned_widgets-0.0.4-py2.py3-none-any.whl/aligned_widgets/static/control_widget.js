// frontend/templates/control_widget.html
var control_widget_default = '<div class="widget control-widget">\n  <div class="control-buttons">\n    <button id="btn-toggle-play"></button>\n  </div>\n  <div class="progress-slider">\n    <input\n      type="range"\n      min="0"\n      max="1"\n      value="0"\n      step="0.01"\n      class="slider"\n      id="input-range-progress"\n    />\n  </div>\n  <div class="time-display">\n    <span id="span-current-time" class="time">00:00</span>\n    <span class="seperator">/</span>\n    <span id="span-total-time" class="time">00:00</span>\n  </div>\n</div>\n';

// frontend/control_widget.ts
var ControlWidget = class {
  constructor({ model, el }) {
    this.lastAnimationFrameTimestamp = null;
    this.animationFrameRequestId = null;
    this.model = model;
    this.el = el;
    this.currentTime = this.model.get("sync_time");
    this.el.innerHTML = control_widget_default;
    this.btnTogglePlay = el.querySelector("#btn-toggle-play");
    this.inputRangeProgress = el.querySelector("#input-range-progress");
    this.spanCurrentTime = el.querySelector("#span-current-time");
    this.spanTotalTime = el.querySelector("#span-total-time");
    this.btnTogglePlay.innerHTML = this.model.get("icons").play;
    this.spanTotalTime.innerHTML = this.formatTime(this.model.get("duration"));
    this.btnTogglePlay.addEventListener(
      "click",
      this.btnTogglePlayClicked.bind(this)
    );
    this.inputRangeProgress.addEventListener(
      "change",
      this.inputRangeProgressChanged.bind(this)
    );
  }
  inputRangeProgressChanged(event) {
    const value = +event.target.value;
    this.currentTime = value * this.model.get("duration");
    this.model.set("sync_time", this.currentTime);
    this.model.save_changes();
  }
  btnTogglePlayClicked() {
    this.model.set("sync_time", this.currentTime);
    this.model.set("is_running", !this.model.get("is_running"));
    this.model.save_changes();
  }
  step(timestamp) {
    if (!this.lastAnimationFrameTimestamp)
      this.lastAnimationFrameTimestamp = timestamp;
    const delta = timestamp - this.lastAnimationFrameTimestamp;
    this.lastAnimationFrameTimestamp = timestamp;
    if (this.model.get("is_running")) {
      const duration = this.model.get("duration");
      this.currentTime = Math.min(this.currentTime + delta / 1e3, duration);
      this.inputRangeProgress.value = (this.currentTime / duration).toFixed(2);
      this.spanCurrentTime.innerHTML = this.formatTime(this.currentTime);
    }
    this.animationFrameRequestId = requestAnimationFrame(this.step);
  }
  syncTimeChanged() {
    this.currentTime = this.model.get("sync_time");
    this.inputRangeProgress.value = (this.currentTime / this.model.get("duration")).toFixed(2);
  }
  isRunningChanged() {
    this.btnTogglePlay.innerHTML = !this.model.get("is_running") ? this.model.get("icons").play : this.model.get("icons").pause;
  }
  formatTime(seconds) {
    const hrs = Math.floor(seconds / 3600);
    const mins = Math.floor(seconds % 3600 / 60);
    const secs = Math.floor(seconds % 60);
    const paddedMins = String(mins).padStart(2, "0");
    const paddedSecs = String(secs).padStart(2, "0");
    return hrs > 0 ? `${String(hrs).padStart(2, "0")}:${paddedMins}:${paddedSecs}` : `${paddedMins}:${paddedSecs}`;
  }
  render() {
    this.model.on("change:sync_time", this.syncTimeChanged.bind(this));
    this.model.on("change:is_running", this.isRunningChanged.bind(this));
    this.step = this.step.bind(this);
    this.animationFrameRequestId = requestAnimationFrame(this.step);
  }
  destroy() {
    cancelAnimationFrame(this.animationFrameRequestId);
  }
};
var control_widget_default2 = {
  render(props) {
    const widget = new ControlWidget(props);
    widget.render();
    return () => widget.destroy();
  }
};
export {
  control_widget_default2 as default
};
//# sourceMappingURL=data:application/json;base64,
