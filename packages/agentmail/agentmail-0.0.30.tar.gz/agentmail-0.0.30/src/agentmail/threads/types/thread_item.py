# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...inboxes.types.inbox_id import InboxId
from .thread_attachments import ThreadAttachments
from .thread_event_id import ThreadEventId
from .thread_id import ThreadId
from .thread_labels import ThreadLabels
from .thread_message_count import ThreadMessageCount
from .thread_preview import ThreadPreview
from .thread_recipients import ThreadRecipients
from .thread_senders import ThreadSenders
from .thread_subject import ThreadSubject
from .thread_timestamp import ThreadTimestamp


class ThreadItem(UniversalBaseModel):
    inbox_id: InboxId
    thread_id: ThreadId
    event_id: ThreadEventId
    labels: ThreadLabels
    timestamp: ThreadTimestamp
    senders: ThreadSenders
    recipients: ThreadRecipients
    message_count: ThreadMessageCount
    subject: typing.Optional[ThreadSubject] = None
    preview: typing.Optional[ThreadPreview] = None
    attachments: typing.Optional[ThreadAttachments] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
