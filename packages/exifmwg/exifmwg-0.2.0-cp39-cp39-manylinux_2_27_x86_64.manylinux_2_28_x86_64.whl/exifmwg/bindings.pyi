from collections.abc import Sequence
import os
from typing import Optional, overload


class ImageMetadata:
    def __init__(self, image_height: int, image_width: int, title: Optional[str] = None, description: Optional[str] = None, region_info: Optional[RegionInfo] = None, orientation: Optional[int] = None, last_keyword_xmp: Optional[Sequence[str]] = None, tags_list: Optional[Sequence[str]] = None, catalog_sets: Optional[Sequence[str]] = None, hierarchical_subject: Optional[Sequence[str]] = None, keyword_info: Optional[KeywordInfo] = None, country: Optional[str] = None, city: Optional[str] = None, state: Optional[str] = None, location: Optional[str] = None) -> None: ...

    def __eq__(self, arg: ImageMetadata, /) -> bool: ...

    def __ne__(self, arg: ImageMetadata, /) -> bool: ...

    @property
    def image_height(self) -> int: ...

    @image_height.setter
    def image_height(self, arg: int, /) -> None: ...

    @property
    def image_width(self) -> int: ...

    @image_width.setter
    def image_width(self, arg: int, /) -> None: ...

    @property
    def title(self) -> Optional[str]: ...

    @title.setter
    def title(self, arg: str, /) -> None: ...

    @property
    def description(self) -> Optional[str]: ...

    @description.setter
    def description(self, arg: str, /) -> None: ...

    @property
    def region_info(self) -> Optional[RegionInfo]: ...

    @region_info.setter
    def region_info(self, arg: RegionInfo, /) -> None: ...

    @property
    def orientation(self) -> Optional[int]: ...

    @orientation.setter
    def orientation(self, arg: int, /) -> None: ...

    @property
    def last_keyword_xmp(self) -> Optional[list[str]]: ...

    @last_keyword_xmp.setter
    def last_keyword_xmp(self, arg: Sequence[str], /) -> None: ...

    @property
    def tags_list(self) -> Optional[list[str]]: ...

    @tags_list.setter
    def tags_list(self, arg: Sequence[str], /) -> None: ...

    @property
    def catalog_sets(self) -> Optional[list[str]]: ...

    @catalog_sets.setter
    def catalog_sets(self, arg: Sequence[str], /) -> None: ...

    @property
    def hierarchical_subject(self) -> Optional[list[str]]: ...

    @hierarchical_subject.setter
    def hierarchical_subject(self, arg: Sequence[str], /) -> None: ...

    @property
    def keyword_info(self) -> Optional[KeywordInfo]: ...

    @keyword_info.setter
    def keyword_info(self, arg: KeywordInfo, /) -> None: ...

    @property
    def country(self) -> Optional[str]: ...

    @country.setter
    def country(self, arg: str, /) -> None: ...

    @property
    def city(self) -> Optional[str]: ...

    @city.setter
    def city(self, arg: str, /) -> None: ...

    @property
    def state(self) -> Optional[str]: ...

    @state.setter
    def state(self, arg: str, /) -> None: ...

    @property
    def location(self) -> Optional[str]: ...

    @location.setter
    def location(self, arg: str, /) -> None: ...

class XmpArea:
    def __init__(self, h: float, w: float, x: float, y: float, unit: str, d: Optional[float] = None) -> None: ...

    def __eq__(self, arg: XmpArea, /) -> bool: ...

    @property
    def h(self) -> float: ...

    @h.setter
    def h(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    @property
    def d(self) -> Optional[float]: ...

    @d.setter
    def d(self, arg: float, /) -> None: ...

    @property
    def unit(self) -> str: ...

    @unit.setter
    def unit(self, arg: str, /) -> None: ...

class Dimensions:
    def __init__(self, h: float, w: float, unit: str) -> None: ...

    def __eq__(self, arg: Dimensions, /) -> bool: ...

    @property
    def h(self) -> float: ...

    @h.setter
    def h(self, arg: float, /) -> None: ...

    @property
    def w(self) -> float: ...

    @w.setter
    def w(self, arg: float, /) -> None: ...

    @property
    def unit(self) -> str: ...

    @unit.setter
    def unit(self, arg: str, /) -> None: ...

class Region:
    def __init__(self, area: XmpArea, name: str, type_: str, description: Optional[str] = None) -> None: ...

    def __eq__(self, arg: Region, /) -> bool: ...

    @property
    def area(self) -> XmpArea: ...

    @area.setter
    def area(self, arg: XmpArea, /) -> None: ...

    @property
    def name(self) -> str: ...

    @name.setter
    def name(self, arg: str, /) -> None: ...

    @property
    def type(self) -> str: ...

    @type.setter
    def type(self, arg: str, /) -> None: ...

    @property
    def description(self) -> Optional[str]: ...

    @description.setter
    def description(self, arg: str, /) -> None: ...

class RegionInfo:
    def __init__(self, applied_to_dimensions: Dimensions, region_list: Sequence[Region]) -> None: ...

    def __eq__(self, arg: RegionInfo, /) -> bool: ...

    @property
    def applied_to_dimensions(self) -> Dimensions: ...

    @applied_to_dimensions.setter
    def applied_to_dimensions(self, arg: Dimensions, /) -> None: ...

    @property
    def region_list(self) -> list[Region]: ...

    @region_list.setter
    def region_list(self, arg: Sequence[Region], /) -> None: ...

class Keyword:
    def __init__(self, keyword: str, children: Sequence[Keyword], applied: Optional[bool] = None) -> None: ...

    def __eq__(self, arg: Keyword, /) -> bool: ...

    @property
    def keyword(self) -> str: ...

    @keyword.setter
    def keyword(self, arg: str, /) -> None: ...

    @property
    def applied(self) -> Optional[bool]: ...

    @applied.setter
    def applied(self, arg: bool, /) -> None: ...

    @property
    def children(self) -> list[Keyword]: ...

    @children.setter
    def children(self, arg: Sequence[Keyword], /) -> None: ...

class KeywordInfo:
    @overload
    def __init__(self, hierarchy: Sequence[Keyword]) -> None: ...

    @overload
    def __init__(self, delimited_strings: Sequence[str]) -> None: ...

    @overload
    def __init__(self, delimited_strings: Sequence[str], delimiter: str) -> None: ...

    def __eq__(self, arg: KeywordInfo, /) -> bool: ...

    def __or__(self, arg: KeywordInfo, /) -> KeywordInfo: ...

    def __ior__(self, arg: KeywordInfo, /) -> KeywordInfo: ...

    @property
    def hierarchy(self) -> list[Keyword]: ...

    @hierarchy.setter
    def hierarchy(self, arg: Sequence[Keyword], /) -> None: ...

def read_metadata(arg: str | os.PathLike, /) -> ImageMetadata:
    """Read metadata from an image file"""

def write_metadata(arg0: str | os.PathLike, arg1: ImageMetadata, /) -> None:
    """Write metadata to an image file"""

def clear_existing_metadata(arg: str | os.PathLike, /) -> None:
    """Clear existing metadata from an image file"""

def exiv2_version() -> str:
    """Returns the Exiv2 library version string."""

def expat_version() -> str:
    """Returns the libexpat library version string."""
