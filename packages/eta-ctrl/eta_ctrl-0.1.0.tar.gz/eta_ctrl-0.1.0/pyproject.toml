[project]
name = "eta-ctrl"
version = "v0.1.0"
description = "A framework for researching energy optimization of factory operations."
license = "BSD-2-Clause"
readme = "README.rst"
requires-python = ">=3.10.16,<3.13"
dynamic = ["classifiers"]
authors = [
    {name = "Technical University of Darmstadt, Institute for Production Management, Technology and Machine Tools (PTW)", email="info@ptw.tu-darmstadt.de"}
]
maintainers = [
  {name = "Andreas Clement", email = "A.Clement@PTW.TU-Darmstadt.de"},
  {name = "Jerome Stock", email = "J.Stock@PTW.TU-Darmstadt.de"},
  {name= "Julius Balzer", email = "julius.balzer@stud.tu-darmstadt.de"}
]
keywords = [
  "rolling horizon optimization",
  "simulators",
  "industrial energy optimization"
]
dependencies = [
    "attrs (>=25.3.0,<26.0.0)",
    "python-dateutil (>=2.8.2,<3.0.0)",
    "numpy (>=2.0.0,<3.0.0)",
    "pandas (>=2.2.2,<2.3.0)",
    "fmpy (>=0.3.5,<0.4.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "toml (>=0.10.2,<0.11.0)",
    "torch (>=2.4.0,<2.5.0)",
    "gymnasium ==1.0.0", # no SemVer
    "stable-baselines3 (>=2.4.0,<3.0.0)", # no SemVer
    "tensorboard (>=2.14.0,<2.15.0)",
    "pyomo (>=6.9.2,<6.10.0)",
    "julia (>=0.6.2,<0.7.0)",
    "eta-nexus (>=0.0.1,<0.1.0)",
]
optional-dependencies.examples = [
    "matplotlib (>=3.9.2,<3.10.0)",
    "keyboard (>=0.13.5,<0.14.0)",
    "pygame (>=2.5.2,<2.6.0)",
    "pyglet <2.0.0",
    "onnxruntime ==1.21.0"
]
optional-dependencies.docs = [
    "sphinx (>=7.1.2,<8.0.0)",
    "sphinx-rtd-theme (>=1.3.0,<2.0.0)",
    "sphinx-copybutton (>=0.5.2,<1.0.0)"
]
[project.urls]
    Homepage = "https://www.ptw.tu-darmstadt.de"
    Repository = "https://github.com/PTW-TUDa/eta_ctrl/"
    Documentation = "https://eta-ctrl.readthedocs.io/"
    Issues = "https://git.ptw.maschinenbau.tu-darmstadt.de/eta-fabrik/public/eta-ctrl/-/issues"

[project.scripts]
    install-julia = "eta_ctrl:install_julia"
    update-julia-agent = "eta_ctrl:update_agent"

[tool.poetry]
requires-poetry = ">=2.0"
# Classifiers are defined in the poetry section to dynamically add the python version
classifiers = [
    "License :: OSI Approved :: BSD License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Manufacturing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]
include = [
    {path="examples/", format=["sdist", "wheel"]}
]

[tool.poetry.group.examples.dependencies]
# Versions defined above to ensure pip compatibility
matplotlib = "*"
keyboard = "*"
pygame = "*"
pyglet = "*"
onnxruntime = "*"

[tool.poetry.group.docs.dependencies]
# Versions defined above to ensure pip compatibility
sphinx = "*"
sphinx-rtd-theme = "*"
sphinx-copybutton = "*"

[tool.poetry.group.dev.dependencies]
# Dev install assumes poetry, so pip compatibility is not needed
# Specific requirements for tests
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-timeout = "^2.3.1"
# Specific requirements for CI tools
pre-commit = "^3.4.0"
ruff = "~0.11.2"
codespell = "^2.3.0"
# MyPy requirements and typing packages
mypy = "~1.9.0"
types-python-dateutil = "^2.8.19.14"
types-pytz = "^2024.1.0.20240203"

[tool.mypy]
python_version = "3.10"
files = ["eta_ctrl", "examples"]
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
show_column_numbers = true

exclude = [
    "docs/conf.py",
    "^test/",
]

[[tool.mypy.overrides]]
module = [
    "fmpy.*",
    "pandas.*",
    "gymnasium.*",
    "pyomo.*",
    "julia.*",
    "setuptools",
    "keyboard.*",
    "onnxruntime.*",
    "matplotlib.*",
    "torch.*",
    "toml.*",
    "yaml.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "test.*"
ignore_errors = true

[tool.pytest.ini_options]
addopts = ["--cov-config=pyproject.toml", "--color=yes"]
log_cli = true
log_cli_level = 20
log_cli_format = "[%(levelname)s: %(name)s] %(message)s"
testpaths = [
    "test",
]
markers = [
    "disable_logging: Disable logging for the marked test",
]

# Configuration for pytest-cov
[tool.coverage.run]
source = [
    "eta_ctrl",
]
omit = [
    "*/venv/*",
    "*/.venv/*",
    "*/docs/*",
    "*/build/*",
    "*/dist/*",
    "*/eta_ctrl/type_hints/*",
]

[tool.coverage.report]
exclude_lines = [
    # These lines are excluded from coverage because they are not meant to be tested
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
    'pass',
]

[tool.ruff]
line-length = 120
indent-width = 4
required-version = ">=0.11.2"
target-version= "py310"
output-format = "concise"
# Only fix with $ruff check --fix
fix = false

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401", "ANN001",  # Don't use `Any` as type annotation
    "ARG",      # Unused method arguments
    "C901",     # Complex logic
    "D",        # Docstrings
    "DTZ",      # Datetime timezone
    "FBT00",    # Boolean positional arguments
    "G004",     # Logging statement uses f-string
    "PERF203",  # try - except performance overhead in loop
    "PLR2004",  # Pylint: magic values
    "S60",      # Subprocess calls
    "SIM105",   # Force contextlib suppressor
    "TD002", "FIX",  # Ignore TODO authors
    # Recommended to ignore as they conflict with the formatter
    "W191", "E111", "E114", "E117", "D206", "D300", "COM812", "COM819", "ISC001",
]


[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["PLC0414"]
"test/*" = ["RUF012", "S", "ANN", "D", "SIM", "FBT00", "PLR2004", "SLF"]
"examples/*" = ["S10", "D"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.pylint]
max-args = 14
max-branches = 13
max-statements = 62
max-returns = 6

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.codespell]
skip = "*.lock, */Manifest.toml, ./docs/_build"
ignore-words-list = ["Temperatur"]
quiet-level = 3

[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"
