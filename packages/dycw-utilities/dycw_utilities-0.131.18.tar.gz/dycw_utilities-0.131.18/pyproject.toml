#

# build-system
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# dependency groups
[dependency-groups]
dev = [
  "aiohttp >= 3.12.12, < 3.13",  # for slack
  "aiolimiter >= 1.2.1, < 1.3",
  "aiosqlite >= 0.21.0, < 0.22",
  "altair >= 5.5.0, < 5.6",
  "asyncpg >= 0.30.0, < 0.31",  # for sqlalchemy async
  "atools >= 0.14.2, < 0.15",
  "cachetools >= 5.5.2, < 5.6",
  "click >= 8.2.1, < 8.3",
  "coloredlogs >= 15.0.1, < 15.1",
  "cryptography >= 45.0.4, < 45.1",
  "cvxpy >= 1.6.5, < 1.7",
  "eventkit >= 1.0.3, < 1.1",
  "fastapi >= 0.115.11, < 0.116",
  "fpdf2 >= 2.8.3, < 2.9",
  "greenlet >= 3.2.0, < 3.3",  # for sqlalchemy async
  "httpx >= 0.28.1, < 0.29",  # for fastapi
  "hypothesis >= 6.135.2, < 6.136",
  "img2pdf >= 0.6.0, < 0.7",
  "inflect >= 7.5.0, < 7.6",
  "lightweight-charts >= 2.1, < 2.2",
  "luigi >= 3.6.0, < 3.7",
  "memory-profiler >= 0.61.0, < 0.62",
  "more-itertools >= 10.7.0, < 10.8",
  "nest-asyncio >= 1.6.0, < 1.7",  # for sqlalchemy async
  "nox >= 2025.2.9, < 2025.3",
  "numpy >= 2.3.0, < 2.4",
  "libcst >= 1.8.0, < 1.9",
  "optuna >= 4.3.0, < 4.4",
  "orjson >= 3.10.18, < 3.11",
  "pathvalidate >= 3.2.3, < 3.3",
  "polars-lts-cpu >= 1.30.0, < 1.31",
  "polars-ols >= 0.3.5, < 0.4",
  "pottery >= 3.0.1, < 3.1",
  "pqdm >= 0.2.0, < 0.3",
  "psutil >= 7.0.0, < 7.1",
  "psycopg2-binary >= 2.9.10, < 2.10",  # for sqlalchemy
  "pydantic >= 2.11.4, < 2.12",
  "pyinstrument >= 5.0.2, < 5.1",
  "pyright[nodejs] >= 1.1.401, < 1.2",
  "pyrsistent >= 0.20.0, < 0.21",
  "pytest >= 8.3.5, < 8.4",
  "pytest-regressions >= 2.8.0, < 2.9",
  "python-dotenv >= 1.1.0, < 1.2",
  "redis >= 6.2.0, < 6.3",
  "rich >= 14.0.0, < 14.1",
  "scikit-learn >= 1.7.0, < 1.8",
  "scipy >= 1.15.3, < 1.16",
  "slack-sdk >= 3.35.0, < 3.36",
  "sqlalchemy >= 2.0.41, < 2.1",
  "statsmodels >= 0.14.4, < 0.15",
  "streamlit >= 1.45.0, < 1.46",
  "tomlkit >= 0.13.2, < 0.14",
  "typed-settings >= 24.6.0, < 24.7",
  "tzdata >= 2025.2, < 2025.3",
  "uvicorn >= 0.34.1, < 0.35",
  "vegafusion >= 2.0.2, < 2.1",
  "vegafusion-python-embed >= 1.6.9, < 1.7",
  "vl-convert-python >= 1.8.0, < 1.9",
  # test
  "coverage-conditional-plugin >= 0.9.0, < 0.10",
  "dycw-pytest-only >= 2.1.1, < 2.2",
  "pytest-asyncio >= 1.0.0, < 1.1",
  "pytest-cov >= 6.1.1, < 6.2",
  "pytest-instafail >= 0.5.0, < 0.6",
  "pytest-lazy-fixtures >= 1.1.4, < 1.2",
  "pytest-randomly >= 3.16.0, < 3.17",
  "pytest-rerunfailures >= 15.1, < 16",
  "pytest-rng >= 1.0.0, < 1.1",
  "pytest-timeout >= 2.4.0, < 2.5",
  "pytest-xdist >= 3.7.0, < 3.8",
  # CI
  "aiolimiter>=1.2.1",
]

# project
[project]
authors = [{name = "Derek Wan", email = "d.wan@icloud.com"}]
dependencies = [
  "atomicwrites >= 1.4.1, < 1.5",
  "typing-extensions >= 4.14.0, < 4.15",
  "tzlocal >= 5.3.1, < 5.4",
  "whenever >= 0.8.5, < 0.9",
]
name = "dycw-utilities"
readme = "README.md"
requires-python = ">= 3.12"
version = "0.131.18"

[project.optional-dependencies]
logging = [
  "coloredlogs >= 15.0.1, < 15.1",
]
test = [
  "dycw-pytest-only >= 2.1.1, < 2.2",
  "hypothesis >= 6.135.2, < 6.136",
  "pytest >= 8.3.5, < 8.4",
  "pytest-asyncio >= 1.0.0, < 1.1",
  "pytest-cov >= 6.1.1, < 6.2",
  "pytest-instafail >= 0.5.0, < 0.6",
  "pytest-lazy-fixtures >= 1.1.4, < 1.2",
  "pytest-randomly >= 3.16.0, < 3.17",
  "pytest-regressions >= 2.8.0, < 2.9",
  "pytest-rerunfailures >= 15.1, < 16",
  "pytest-rng >= 1.0.0, < 1.1",
  "pytest-timeout >= 2.4.0, < 2.5",
  "pytest-xdist >= 3.7.0, < 3.8",
]

[project.scripts]

# bump-my-version
[tool.bumpversion]
allow_dirty = true
current_version = "0.131.18"

[[tool.bumpversion.files]]
filename = "src/utilities/__init__.py"
replace = "__version__ = \"{new_version}\""
search = "__version__ = \"{current_version}\""

# coverage
[tool.coverage]

[tool.coverage.coverage_conditional_plugin.rules]
skipif-ci = '"CI" in os_environ'
skipif-ci-and-not-linux = '("CI" in os_environ) and (sys_platform != "linux")'
skipif-ci-and-not-windows = '("CI" in os_environ) and (sys_platform != "windows")'
skipif-ci-and-windows = '("CI" in os_environ) and (sys_platform != "windows")'
skipif-linux = 'sys_platform == "linux"'
skipif-mac = 'sys_platform == "darwin"'
skipif-not-linux = 'sys_platform != "linux"'
skipif-not-macos = 'sys_platform != "darwin"'
skipif-not-windows = 'sys_platform != "windows"'
skipif-windows = 'sys_platform == "windows"'

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.report]
exclude_also = [
  "@overload",
  "assert_never",
  "case _ as never:",
  "if TYPE_CHECKING:",
]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
data_file = ".coverage/data"
omit = ["src/utilities/streamlit.py"]
parallel = true
plugins = ["coverage_conditional_plugin"]
source = ["src/utilities"]

# hatch
[tool.hatch]

[tool.hatch.build.targets.sdist]
include = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/utilities"]

# nitpick
[tool.nitpick]
style = [
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.12.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
]

# pyright
[tool.pyright]
deprecateTypingAliases = true
enableReachabilityAnalysis = false
ignore = ["**/_typeshed/**"]
pythonVersion = "3.12"
reportAny = false
reportCallInDefaultInitializer = true
reportImplicitOverride = true
reportImplicitStringConcatenation = true
reportImportCycles = true
reportMissingSuperCall = true
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateUsage = false
reportPropertyTypeMismatch = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = true
reportUnusedCallResult = true
reportUnusedImport = false
reportUnusedVariable = false
typeCheckingMode = "strict"

# pytest
[tool.pytest]

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "-vv",
  "--color=auto",
  "--cov=utilities",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--durations=10",
  "--durations-min=10",
  "--strict-markers",
  "--timeout=300",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
filterwarnings = [
  "error",
  "ignore:.*utcfromtimestamp.* is deprecated and scheduled for removal in a future version:DeprecationWarning",  # luigi
  "ignore:Implicitly cleaning up <TemporaryDirectory '.*'>:ResourceWarning",
  "ignore:ResourceTracker called reentrantly for resource cleanup, which is unsupported:UserWarning",
  "ignore:Task .* without outputs has no custom complete.* method:UserWarning",  # luigi
  "ignore:The garbage collector is trying to clean up non-checked-in connection <AdaptedConnection <Connection(.*)>>:sqlalchemy.exc.SAWarning",  # sqlalchemy
  "ignore:There is no current event loop:DeprecationWarning",  # eventkit
  "ignore:Using fork.* can cause Polars to deadlock in the child process:RuntimeWarning",  # polars/pqdm
  "ignore:coroutine 'AsyncConnection.close' was never awaited:RuntimeWarning",
  "ignore:loop is closed:ResourceWarning",  # redis
  "ignore:unclosed <StreamWriter .*>:ResourceWarning",  # redis
  "ignore:unclosed <socket.*socket .*>:ResourceWarning",  # redis
  "ignore:unclosed Connection <redis.*asyncio.*connection.*Connection.*>:ResourceWarning",  # redis
  "ignore:unclosed connection <asyncpg.*connection.*Connection.*>:ResourceWarning",  # asyncpg
  "ignore:unclosed event loop <_UnixSelectorEventLoop .*>:ResourceWarning",  # redis
  "ignore:unclosed file <_io.*TextIOWrapper .*>:ResourceWarning",  # logging
  "ignore:unclosed transport <_SelectorSocketTransport .*>:ResourceWarning",  # redis
]
minversion = "8.0"
testpaths = ["src/tests"]
xfail_strict = true

# ruff
[tool.ruff]
src = ["src"]
target-version = "py312"
unsafe-fixes = true

[tool.ruff.format]
preview = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
explicit-preview-rules = true
fixable = ["ALL"]
ignore = [
  "ANN401",  # any-type
  "A005",  # stdlib-module-shadowing
  "ASYNC109",  # async-function-with-timeout
  "C901",  # complex-structure
  "D100",  # undocumented-public-module
  "D101",  # undocumented-public-class
  "D102",  # undocumented-public-method
  "D103",  # undocumented-public-function
  "D104",  # undocumented-public-package
  "D105",  # undocumented-magic-method
  "D106",  # undocumented-public-nested-class
  "D107",  # undocumented-public-init
  "D203",  # one-blank-line-before-class
  "D213",  # multi-line-summary-second-line
  "E501",  # line-too-long
  "PD",  # pandas-vet
  "PERF203",  # try-except-in-loop
  "PLR0911",  # too-many-return-statements
  "PLR0912",  # too-many-branches
  "PLR0913",  # too-many-arguments
  "PLR0915",  # too-many-statements
  "PLR2004",  # magic-value-comparison
  "PT013",  # pytest-incorrect-pytest-import
  "S311",  # suspicious-non-cryptographic-random-usage
  "S603",  # subprocess-without-shell-equals-true
  "S607",  # start-process-with-partial-path
  # preview
  "S101",  # assert
  # formatter
  "W191",  # tab-indentation
  "E111",  # indentation-with-invalid-multiple
  "E114",  # indentation-with-invalid-multiple-comment
  "E117",  # over-indented
  "D206",  # indent-with-spaces
  "D300",  # triple-single-quotes
  "Q000",  # bad-quotes-inline-string
  "Q001",  # bad-quotes-multiline-string
  "Q002",  # bad-quotes-docstring
  "Q003",  # avoidable-escaped-quote
  "COM812",  # missing-trailing-comma
  "COM819",  # prohibited-trailing-comma
  "ISC001",  # single-line-implicit-string-concatenation
  "ISC002",  # multi-line-implicit-string-concatenation
]
preview = true
select = [
  "ALL",
  "RUF022",  # unsorted-dunder-all
]

[tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = [
  "S101",  # assert
  "SLF001",  # private-member-access
]
"src/tests/test_typed_settings.py" = ["I002"]  # missing-required-import
"src/tests/test_typing_funcs/no_future.py" = ["I002"]  # missing-required-import

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false
