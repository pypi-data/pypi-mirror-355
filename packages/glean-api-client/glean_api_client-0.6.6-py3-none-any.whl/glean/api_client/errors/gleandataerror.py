"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client import utils
from glean.api_client.models import (
    errormessage as models_errormessage,
    invalidoperatorvalueerror as models_invalidoperatorvalueerror,
)
from glean.api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated


class GleanDataErrorData(BaseModel):
    bad_gmail_token: Annotated[
        Optional[bool], pydantic.Field(alias="badGmailToken")
    ] = None
    r"""Indicates the gmail results could not be fetched due to bad token."""

    bad_outlook_token: Annotated[
        Optional[bool], pydantic.Field(alias="badOutlookToken")
    ] = None
    r"""Indicates the outlook results could not be fetched due to bad token."""

    invalid_operators: Annotated[
        Optional[List[models_invalidoperatorvalueerror.InvalidOperatorValueError]],
        pydantic.Field(alias="invalidOperators"),
    ] = None
    r"""Indicates results could not be fetched due to invalid operators in the query."""

    error_messages: Annotated[
        Optional[List[models_errormessage.ErrorMessage]],
        pydantic.Field(alias="errorMessages"),
    ] = None


class GleanDataError(Exception):
    data: GleanDataErrorData

    def __init__(self, data: GleanDataErrorData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, GleanDataErrorData)
