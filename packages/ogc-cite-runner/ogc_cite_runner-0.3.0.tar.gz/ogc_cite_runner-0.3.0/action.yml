name: 'ogc-cite-runner'

description: 'Runner for OGC CITE'

branding:
  icon: 'award'
  color: 'blue'

inputs:
  test_suite_identifier:
    description: 'Identifier of the Executable Test Suite (etscode) to be run. Example: ogcapi-features-1.0'
  test_session_arguments:
    description: >
      Space-separated string with arguments that are to be sent for running the test session. example:
      'iut=http://pygeoapi:5000'
  teamengine_url:
    required: false
    description: >
      URL for the teamengine instance to use for running the test suite. If not provided, this will spin up a docker
      container using the [ogccite/teamengine-production:1.0-SNAPSHOT](https://hub.docker.com/r/ogccite/teamengine-production) image.
      If you specify a custom teamengine URL you may also optonally supply authentication credentials by defining
      them as secrets - Expected secret names are: `teamengine_username` and `teamengine_password`.
  teamengine_username:
    required: false
    default: "ogctest"
    description: Username for accessing teamengine
  teamengine_password:
    required: false
    default: "ogctest"
    description: Password for accessing teamengine
  network_timeout_seconds:
    required: false
    default: "120"
    description: Timeout value for network requests
  with_failed:
    required: false
    default: "false"
    description: Whether the output report should include information about failed tests
  with_skipped:
    required: false
    default: "false"
    description: Whether the output report should include information about skipped tests
  with_passed:
    required: false
    default: "false"
    description: Whether the output report should include information about passed tests
  exit_with_error:
    required: false
    default: "true"
    description: Whether the action exits with an error if the test suite execution shows a result of failed.

outputs:
  json_report:
    description: "Full test suite execution result as JSON"
    value: '${{ steps.run_cite_runner.outputs.JSON_REPORT }}'

runs:
  using: 'composite'
  steps:
    - name: "Add action path to the global path"
      shell: bash
      run: echo "${{ github.action_path }}" >> ${GITHUB_PATH}
    - name: "normalize action path"
      id: normalize_action_path
      shell: "bash"
      run: |
        echo "ACTION_NORMALIZED_PATH=$(realpath -m ${{ github.action_path }})" >> "${GITHUB_OUTPUT}"
    - name: "Install uv"
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.6.13"
        enable-cache: true
        cache-dependency-glob: "${{ steps.normalize_action_path.outputs.ACTION_NORMALIZED_PATH }}/uv.lock"
    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: "${{ github.action_path }}/pyproject.toml"
    - name: "Install ogc-cite-runner"
      env:
#        GITHUB_CONTEXT: ${{ toJSON(github) }}
#        ENV_CONTEXT: ${{ toJSON(env) }}
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ github.action_ref == 'main' && 'v0.0.0.dev' || github.action_ref }}
      shell: "bash"
      run: |
        cd ${{ github.action_path }}
        uv sync --frozen
    - name: "Start TEAM engine container"
      if: ${{ !inputs.teamengine_url }}
      shell: "bash"
      run: >
        docker run
        --detach
        --rm
        --name teamengine
        --add-host=host.docker.internal:host-gateway
        --publish 9080:8080
        ogccite/teamengine-production:1.0-SNAPSHOT
    - name: "Run ogc-cite-runner"
      id: "run_cite_runner"
      shell: "bash --noprofile --norc -o pipefail {0}"
      run: |
        cd ${{ github.action_path }}
        RAW_PATH=raw-result.xml
        uv run ogc-cite-runner \
            --network-timeout=${{ inputs.network_timeout_seconds }} \
            execute-test-suite-from-github-actions \
            ${{ inputs.teamengine_url || 'http://localhost:9080/teamengine' }} \
            ${{ inputs.test_suite_identifier }} \
            --output-format=raw \
            --teamengine-username=${{ inputs.teamengine_username }} \
            --teamengine-password=${{ inputs.teamengine_password }} \
            $(echo -e ${{ inputs.test_session_arguments }}) 1> ${RAW_PATH}
        if [ $? -ne 0 ]; then
            echo "Unable to use TeamEngine to execute test suite ${{ inputs.test_suite_identifier }} with arguments ${{ inputs.test_session_arguments }}"
            exit 1
        fi
        echo "RAW_RESULT_OUTPUT_PATH=${{ steps.normalize_action_path.outputs.ACTION_NORMALIZED_PATH }}/${RAW_PATH}" >> "${GITHUB_OUTPUT}"
        echo "::group::ogc-cite-runner suite execution results"
        uv run ogc-cite-runner parse-result \
            --output-format console \
            ${{ fromJSON(inputs.exit_with_error) && '--exit-with-error \' || '--exit-without-error \'}}
            --with-summary \
            --with-failed \
            --with-skipped \
            --with-passed \
            ${RAW_PATH}
        echo "CITE_RUNNER_EXIT_CODE=$?" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
        MARKDOWN_PATH=test-result.md
        uv run ogc-cite-runner parse-result \
            --output-format markdown \
            --with-summary \
            ${{ fromJSON(inputs.with_failed) && '--with-failed \' || '--without-failed \'}}
            ${{ fromJSON(inputs.with_skipped) && '--with-skipped \' || '--without-skipped \'}}
            ${{ fromJSON(inputs.with_passed) && '--with-passed \' || '--without-passed \'}}
            ${RAW_PATH} 1> ${MARKDOWN_PATH}
        cat ${MARKDOWN_PATH} >> ${GITHUB_STEP_SUMMARY}
        echo "MARKDOWN_RESULT_OUTPUT_PATH=${{ steps.normalize_action_path.outputs.ACTION_NORMALIZED_PATH }}/${MARKDOWN_PATH}" >> "${GITHUB_OUTPUT}"
        echo "JSON_REPORT=$(uv run ogc-cite-runner parse-result \
            --output-format json \
            ${RAW_PATH}
        )" >> "${GITHUB_OUTPUT}"
    - name: "Store execution results as artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: 'execution-results-${{ inputs.test_suite_identifier }}'
        path: |
          ${{ steps.run_cite_runner.outputs.RAW_RESULT_OUTPUT_PATH }}
          ${{ steps.run_cite_runner.outputs.MARKDOWN_RESULT_OUTPUT_PATH }}
    - name: "Stop teamengine container"
      if: ${{ always() && !inputs.teamengine_url }}
      shell: "bash"
      run: docker stop teamengine
    - name: "Set action exit code"
      shell: "bash"
      run: |
        if [ ${{ steps.run_cite_runner.outputs.CITE_RUNNER_EXIT_CODE}} -eq 0 ]; then
            echo "::notice::Test suite has passed"
            exit 0
        else
            echo "::warning::Test suite has failed"
            exit 1
        fi
