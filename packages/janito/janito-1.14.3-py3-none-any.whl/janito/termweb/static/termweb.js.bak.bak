// Directory/File browser logic for explorer with right-side preview and URL sync (using /path)
let explorerView = localStorage.getItem('explorerView') || 'list';
let currentExplorerPath = '.';

function getParentPath(path) {
    // Normalize slashes
    path = (path || '').replace(/\\/g, '/').replace(/^\/+|\/+$/g, '');
    if (!path || path === '.' || path === '') return '.';
    const parts = path.split('/');
    if (parts.length <= 1) return '.';
    parts.pop();
    const parent = parts.join('/');
    return parent === '' ? '.' : parent;
}


function setExplorerView(view) {
    explorerView = view;
    localStorage.setItem('explorerView', view);
    document.getElementById('view-list').classList.toggle('active', view === 'list');
    document.getElementById('view-icons').classList.toggle('active', view === 'icons');
}

function normalizeExplorerPath(path) {
    if (!path || path === '/' || path === '' || path === '.') return '.';
    return path.replace(/^\/+|\/+$/g, '');
}

function updateExplorerUrl(path, push=true) {
    let url = '/';
    if (path && path !== '.' && path !== '/') {
        url = '/' + path.replace(/^\/+|\/+$/g, '');
    }
    if (push) {
        console.log('[DEBUG] updateExplorerUrl: pushing url', url, 'for path', path);
        window.history.pushState({ explorerPath: path }, '', url);
    } else {
        console.log('[DEBUG] updateExplorerUrl: not pushing, url would be', url, 'for path', path);
    }
}

function renderExplorer(path, pushUrl=true) {
    currentExplorerPath = normalizeExplorerPath(path);
    console.log('[DEBUG] renderExplorer: path', path, 'normalized to', currentExplorerPath, 'pushUrl:', pushUrl);
    fetch(`/api/explorer/${encodeURIComponent(currentExplorerPath)}`)
        .then(resp => resp.json())
        .then(data => {
            const main = document.getElementById('explorer-main');
            if (!main) return;
            if (data.error) {
                main.innerHTML = `<div class='error'>${data.error}</div>`;
                return;
            }
            if (data.type === 'dir') {
                let html = `<h3>Directory: ${data.path}</h3>`;
                if (explorerView === 'list') {
                    html += `<ul class='explorer-list'>`;
                    if (data.path !== '.') {
                        const parent = getParentPath(data.path);
                        html += `<li><a href='#' data-path='${parent}' class='explorer-link'>(.. parent)</a></li>`;
                    }
                    for (const entry of data.entries) {
                        const entryPath = data.path === '.' ? entry.name : data.path + '/' + entry.name;
                        if (entry.is_dir) {
                            html += `<li><a href='#' data-path='${entryPath}' class='explorer-link'>üìÅ ${entry.name}</a></li>`;
                        } else {
                            html += `<li><a href='#' data-path='${entryPath}' class='explorer-link file-link'>üìÑ ${entry.name}</a></li>`;
                        }
                    }
                    html += '</ul>';
                } else {
                    html += `<div class='explorer-icons'>`;
                    if (data.path !== '.') {
                        const parent = getParentPath(data.path);
                        html += `<div class='explorer-icon'><a href='#' data-path='${parent}' class='explorer-link' title='Parent'>(..)</a></div>`;
                    }
                    for (const entry of data.entries) {
                        const entryPath = data.path === '.' ? entry.name : data.path + '/' + entry.name;
                        if (entry.is_dir) {
                            html += `<div class='explorer-icon'><a href='#' data-path='${entryPath}' class='explorer-link' title='${entry.name}'>üìÅ<br>${entry.name}</a></div>`;
                        } else {
                            html += `<div class='explorer-icon'><a href='#' data-path='${entryPath}' class='explorer-link file-link' title='${entry.name}'>üìÑ<br>${entry.name}</a></div>`;
                        }
                    }
                    html += '</div>';
                }
                main.innerHTML = html;
                // Clear preview panel when changing directories
                const preview = document.getElementById('explorer-preview');
                if (preview) preview.innerHTML = '';
                if (pushUrl) updateExplorerUrl(currentExplorerPath, true);
            }
            // Attach click handlers
            document.querySelectorAll('.explorer-link').forEach(link => {
                link.onclick = function(e) {
                    e.preventDefault();
                    const p = this.getAttribute('data-path');
                    // If file, show preview; if dir, update explorer
                    if (this.classList.contains('file-link')) {
                        const preview = document.getElementById('explorer-preview');
                        if (preview) {
                            preview.innerHTML = `<div class='spinner' style='display:inline-block;vertical-align:middle;'></div> <span style='vertical-align:middle;'>Loading file...</span>`;
                        }
                        fetch(`/api/explorer/${encodeURIComponent(p)}`)
                            .then(resp => resp.json())
                            .then(fileData => {
                                if (preview && fileData.type === 'file') {
                                    preview.innerHTML = `<h3>File: ${fileData.path}</h3><pre class='explorer-file'>${escapeHtml(fileData.content)}</pre>`;
                                }
                            });
                    } else {
                        console.log('[DEBUG] explorer-link click: navigating to dir', p);
                        renderExplorer(p, true);
                    }
                };
            });
        });
}

function escapeHtml(text) {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return text.replace(/[&<>"']'/g, m => map[m]);
}

function getExplorerPathFromLocation() {
    let path = window.location.pathname;
    // Remove leading slash
    if (path.startsWith('/')) path = path.slice(1);
    // If empty, root, or dot, treat as '.'
    if (!path || path === '' || path === '.' || path === '/') return '.';
    // Remove trailing slashes
    path = path.replace(/\/+$/g, '');
    console.log('[DEBUG] getExplorerPathFromLocation: extracted', path, 'from', window.location.pathname);
    return path;
}

document.addEventListener('DOMContentLoaded', function() {
    const initialPath = getExplorerPathFromLocation();
    console.log('[DEBUG] DOMContentLoaded: initialPath', initialPath);
    currentExplorerPath = initialPath; // Ensure currentExplorerPath matches URL
    setExplorerView(localStorage.getItem('explorerView') || 'list');
    renderExplorer(initialPath, false);
    document.getElementById('view-list').onclick = function() {
        setExplorerView('list');
        renderExplorer(currentExplorerPath, false);
    };
    document.getElementById('view-icons').onclick = function() {
        setExplorerView('icons');
        renderExplorer(currentExplorerPath, false);
    };
});

window.addEventListener('popstate', function(event) {
    const path = (event.state && event.state.explorerPath) || getExplorerPathFromLocation();
    console.log('[DEBUG] popstate: path', path, 'event.state:', event.state);
    renderExplorer(path, false);
});
