# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .......core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .......core.pydantic_utilities import IS_PYDANTIC_V2


class DiscoverDnsSubdomainConfig_Active(UniversalBaseModel):
    discovery_type: typing.Literal["active"] = pydantic.Field(alias="discoveryType", default="active")
    domain: str
    subdomains: typing.Optional[typing.List[str]] = None
    subdomain_lists: typing.Optional[typing.List[str]] = pydantic.Field(alias="subdomainLists", default=None)
    threads: typing.Optional[int] = None
    max_depth: typing.Optional[int] = pydantic.Field(alias="maxDepth", default=None)
    timeout: typing.Optional[int] = None
    dns_resolver: typing.Optional[str] = pydantic.Field(alias="dnsResolver", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class DiscoverDnsSubdomainConfig_Passive(UniversalBaseModel):
    discovery_type: typing.Literal["passive"] = pydantic.Field(alias="discoveryType", default="passive")
    domain: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


DiscoverDnsSubdomainConfig = typing.Union[DiscoverDnsSubdomainConfig_Active, DiscoverDnsSubdomainConfig_Passive]
