import pytest
from standard_open_inflation_package.content_loader import parse_response_data, _remove_csrf_prefixes
import json
from io import BytesIO


class TestCSRFRemoval:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è CSRF-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
    
    def test_google_style_prefixes(self):
        """–¢–µ—Å—Ç Google-—Å—Ç–∏–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
        test_cases = [
            (")]}'\\n{\"data\": \"test\"}", {"data": "test"}),
            (")]}{\"data\": \"test\"}", {"data": "test"}),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_facebook_style_prefixes(self):
        """–¢–µ—Å—Ç Facebook-—Å—Ç–∏–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
        test_cases = [
            ("while(1);{\"data\": \"test\"}", {"data": "test"}),
            ("for(;;);{\"data\": \"test\"}", {"data": "test"}),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_unknown_prefixes(self):
        """–¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö CSRF-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
        test_cases = [
            ('SECURITY_PREFIX_123{"data": "test"}', {"data": "test"}),
            ('/*some comment*/{"data": "test"}', {"data": "test"}),
            ('random_text_here{"data": "test"}', {"data": "test"}),
            ('12345{"data": "test"}', {"data": "test"}),
            ('üîíSECURITYüîí{"data": "test"}', {"data": "test"}),
            (';;;;;;;{"data": "test"}', {"data": "test"}),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_array_responses(self):
        """–¢–µ—Å—Ç –º–∞—Å—Å–∏–≤–æ–≤ —Å CSRF-–ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        test_cases = [
            (')]}\\\'\\n[1,2,3]', [1,2,3]),
            ('prefix[{"a":1},{"b":2}]', [{"a":1},{"b":2}]),
            (')]}\\\'\\n[[[["test"]]]]', [[[["test"]]]]),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_complex_structures(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö JSON —Å—Ç—Ä—É–∫—Ç—É—Ä"""
        test_cases = [
            (')]}\\\'\\n{"nested": {"data": [1,2,3]}}', {"nested": {"data": [1,2,3]}}),
            ('prefix{"users": [{"id": 1, "name": "John"}]}', {"users": [{"id": 1, "name": "John"}]}),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_no_prefix(self):
        """–¢–µ—Å—Ç JSON –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
        test_cases = [
            ('{"data": "test"}', {"data": "test"}),
            ('[1,2,3]', [1,2,3]),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_with_spaces(self):
        """–¢–µ—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ"""
        test_cases = [
            ('  )]"}\'\\n  {"data": "test"}', {"data": "test"}),
            ('\\t\\n  prefix{"data": "test"}', {"data": "test"}),
        ]
        
        for input_data, expected in test_cases:
            result = parse_response_data(input_data, "application/json")
            assert result == expected, f"Failed for input: {input_data}"
    
    def test_bytes_input(self):
        """–¢–µ—Å—Ç —Å bytes –Ω–∞ –≤—Ö–æ–¥–µ"""
        input_data = b')]}\\\'\\n{"data": "test"}'
        expected = {"data": "test"}
        result = parse_response_data(input_data, "application/json")
        assert result == expected
    
    def test_multiple_json_objects(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON"""
        input_data = 'prefix{"first": 1}{"second": 2}'
        result = parse_response_data(input_data, "application/json")
        assert result == {"first": 1}
    
    def test_malformed_json(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON"""
        input_data = 'prefix{invalid json}'
        result = parse_response_data(input_data, "application/json")
        assert isinstance(result, str)  # Should return as string
        assert result == input_data
    
    def test_no_json_found(self):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ"""
        input_data = 'just some text without json'
        result = parse_response_data(input_data, "application/json")
        assert result == input_data  # Should return original string


class TestResponseDataParsing:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞"""
    
    def test_json_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö"""
        data = '{"key": "value"}'
        result = parse_response_data(data, "application/json")
        assert result == {"key": "value"}
    
    def test_text_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = "Hello, world!"
        result = parse_response_data(data, "text/plain")
        assert result == "Hello, world!"
    
    def test_binary_data_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = b"\\x89PNG\\r\\n\\x1a\\n"  # PNG header
        result = parse_response_data(data, "image/png")
        assert isinstance(result, BytesIO)
        assert result.name.endswith('.png')
    
    def test_bytes_to_string_conversion(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ bytes –≤ string"""
        data = b"Hello, world!"
        result = parse_response_data(data, "text/plain")
        assert result == "Hello, world!"
    
    def test_unicode_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode"""
        data = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç"
        result = parse_response_data(data, "text/plain")
        assert result == "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç"


class TestCSRFPrefixFunction:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ _remove_csrf_prefixes"""
    
    def test_direct_csrf_removal(self):
        """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è CSRF"""
        test_cases = [
            (')]}\\\'\\n{"test": true}', '{"test": true}'),
            ('while(1);[1,2,3]', '[1,2,3]'),
            ('prefix{"data": "value"}', '{"data": "value"}'),
            ('{"clean": "json"}', '{"clean": "json"}'),  # no prefix
        ]
        
        for input_text, expected in test_cases:
            result = _remove_csrf_prefixes(input_text)
            # Parse both to ensure they're equivalent JSON
            assert json.loads(result) == json.loads(expected)


if __name__ == "__main__":
    pytest.main([__file__])
