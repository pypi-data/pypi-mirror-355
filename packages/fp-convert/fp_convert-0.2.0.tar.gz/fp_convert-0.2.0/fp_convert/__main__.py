#!/usr/bin/env python3
"""
A program to invoke Freeplane mindmap to PDF conversion utility. If the
mindmap is constructed, following certain conventions, one can produce
print-quality PDF documents using this program. It uses freeplane-io and
pylatex packages for the heavy-lifting.

Author: K Raghu Prasad <raghuprasad AT duck.com>
Copyright: Â©2024-25 K. Raghu Prasad <raghuprasad AT duck.com>
ALL RIGHTS RESERVED.
"""
import argparse
import os
import shutil
import sys
import tempfile
from importlib import import_module
from pathlib import Path

# from fp_convert import templates
from fp_convert.errors import FPConvertException, UnsupportedFileException


def main():
    parser = argparse.ArgumentParser(
        description="""
    Program to convert a Freeplane mindmap's content into a print-quality PDF
    document. If only relative file-paths are used to define the resources
    (like images) used in the mindmap, then run this program from the folder in
    which the mindmap file is situated. In case absolute paths are used in the
    resource-paths within the mindmap, then this program can be executed from
    anywhere, as long as appropriate input and output file-paths are provided to
    it. Apprropirate options are provided using which the TeX file generated by
    this program can be preserved. Then it can be used to inspect the structure
    of the mindmap before conversion to PDF. The generated TeX file can be
    compiled using pdflatex in any folder on the same machine on which
    fp-convert was executed to generate it.
    """
    )
    parser.add_argument(
        "mindmap_file", nargs="?", help="input freeplane mindmap file-path"
    )
    parser.add_argument("output_file", nargs="?", help="output PDF file-path")
    parser.add_argument(
        "-t",
        "--template",
        metavar="<template-name>",
        help="template to be used for converting to TeX/LaTeX file",
        default="psdoc",
    )
    parser.add_argument(
        "-k",
        "--keep-tex",
        help="keep intermediate TeX/LaTeX file",
        action="store_true",
    )
    parser.add_argument(
        "-f",
        "--font-family",
        metavar="<font-family-name:font-family-options>",
        help=(
            """font-family to be used while building the PDF file
        Correct LaTeX options are required to be passed-on while supplying this
        parameter. Incorrect options, if supplied, would result in
        TeX-compilation failures. The option -k can be used to debug such
        issues by preserving the resultant TeX file for further inspection.
        Examples: roboto (The Roboto family of fonts to be used),
        roboto:sfdefault (The Roboto family along with LaTeX option sfdefault),
        roboto:sfdefault:scaled=1.1 (The Roboto family along with LaTeX options
        sfdefault and scaled=1.1 which are applicable on this font family),
        roboto:scaled=1.1 (The Roboto family of fonts scaled to 1.1), etc.
        You need to ensure that invalid options for the chosen font-family
        do not get supplied here.
        """
        ),
        default="lmodern",
    )
    parser.add_argument(
        "-c",
        "--config",
        metavar="<config-file-path>",
        help=(
            "path to the YAML file with pertinent configuration "
            "parameters required for converting a mindmap to PDF "
            "document"
        ),
    )

    parser.add_argument(
        "-d",
        "--debug",
        help="preserve all intermediate files for debugging purpose",
        action="store_true",
    )

    parser.add_argument(
        "-g",
        "--generate-config",
        metavar="<config-file-path>",
        help=(
            "generates a sample configuration file of YAML type which "
            "contains all pertinent configuration parameters with their "
            "default values"
        ),
    )

    args = parser.parse_args()

    # Import to template module to use its utility-functions
    try:
        tplmodule = import_module(f"fp_convert.templates.{args.template}")
    except ModuleNotFoundError:
        raise UnsupportedFileException("Invalid document template-name is supplied")

    # Validate argument-setup
    if args.generate_config and (
        args.mindmap_file
        or args.output_file
        or args.config
        or args.debug
        or args.keep_tex
    ):
        print(
            "Either generate a configuration file (using -g or "
            "--generate-config) or use other allowed arguments to "
            "generate a PDF document. Cannot use both at the same time."
        )
        sys.exit(1)

    if args.generate_config:
        if os.path.exists(args.generate_config):
            print("The file {} already exists".format(args.generate_config))
            sys.exit(1)

        with open(args.generate_config, "w") as f:
            f.write(tplmodule.get_sample_config())
        print(
            "Generated a sample configuration file in {}".format(args.generate_config)
        )
        sys.exit(0)

    elif args.mindmap_file is None or args.output_file is None:
        parser.print_help()
        sys.exit(1)

    # Get the input and output file-paths
    #
    mindmap_file_path = args.mindmap_file
    mm_filepath = Path(mindmap_file_path)
    output_pdf_path = args.output_file
    pdf_filepath = Path(output_pdf_path)

    temp_dir = tempfile.TemporaryDirectory(prefix="fp-convert-", delete=False)

    doc_kwargs: dict = {
        "working_dir": temp_dir.name,
    }
    if args.font_family:
        details = args.font_family.split(":")
        ff = list()
        ff_opts = list()
        ff.append(str.strip(details[0]))
        if len(details) > 1:
            for item in details[1:]:
                ff_opts.append(str.strip(item))
        ff.append(ff_opts)
        doc_kwargs["font_family"] = ff
    else:
        doc_kwargs["font_family"] = ["lmodern", []]

    if args.config:
        theme = tplmodule.create_theme_from_config(args.config)
        doc_kwargs["theme"] = theme

    doc = tplmodule.Doc(mm_filepath, **doc_kwargs)
    temp_output = Path(temp_dir.name, f"{pdf_filepath.name}")

    try:  # Try building the PDF
        doc.generate_pdf(temp_output, clean=args.debug, clean_tex=(not args.keep_tex))
    except FPConvertException as e:
        print(e)
        sys.exit(1)

    shutil.copy2(str(temp_output), str(pdf_filepath))
    if args.keep_tex:
        shutil.copy2(
            Path(temp_dir.name, (pdf_filepath.stem + ".tex")),
            Path(pdf_filepath.parent, (pdf_filepath.stem + ".tex")),
        )
        if not args.debug:
            temp_dir.cleanup()
        else:
            print(
                "Intermediate files have been preserved in directory: "
                f"{temp_dir.name}"
            )


if __name__ == "__main__":
    main()
