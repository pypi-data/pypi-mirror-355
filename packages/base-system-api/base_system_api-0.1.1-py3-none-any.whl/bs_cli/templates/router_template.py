"""Template for FastAPI routers."""

ROUTER_TEMPLATE = '''
"""
{{ model_name }} Router
Generated by BS FastAPI CLI
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List
from bs__connection.database import get_db
from bs__security.auth import get_current_user
from orm.orm{{ model_name }} import {{ model_name }}ORM
from schemas.schema{{ model_name }} import (
    {{ model_name }}Create,
    {{ model_name }}Update,
    {{ model_name }}Response,
    {{ model_name }}ListResponse
)

router = APIRouter()

@router.post("/{{ model_name_plural }}/", response_model={{ model_name }}Response)
async def create_{{ model_name_lower }}(
    {{ model_name_lower }}: {{ model_name }}Create,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """Create a new {{ model_name_lower }}."""
    try:
        return {{ model_name }}ORM.create(db=db, {{ model_name_lower }}={{ model_name_lower }})
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error creating {{ model_name_lower }}: {str(e)}")

@router.get("/{{ model_name_plural }}/", response_model={{ model_name }}ListResponse)
async def get_{{ model_name_plural }}(
    page: int = Query(1, ge=1, description="Page number"),
    size: int = Query(10, ge=1, le=100, description="Page size"),
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """Get all {{ model_name_plural }} with pagination."""
    skip = (page - 1) * size
    items = {{ model_name }}ORM.get_all(db=db, skip=skip, limit=size)
    total = {{ model_name }}ORM.count(db=db)
    pages = (total + size - 1) // size
    
    return {{ model_name }}ListResponse(
        items=items,
        total=total,
        page=page,
        size=size,
        pages=pages
    )

@router.get("/{{ model_name_plural }}/{{ '{' }}{{ model_name_lower }}_id{{ '}' }}", response_model={{ model_name }}Response)
async def get_{{ model_name_lower }}(
    {{ model_name_lower }}_id: int,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """Get {{ model_name_lower }} by ID."""
    {{ model_name_lower }} = {{ model_name }}ORM.get_by_id(db=db, {{ model_name_lower }}_id={{ model_name_lower }}_id)
    if not {{ model_name_lower }}:
        raise HTTPException(status_code=404, detail="{{ model_name }} not found")
    return {{ model_name_lower }}

@router.put("/{{ model_name_plural }}/{{ '{' }}{{ model_name_lower }}_id{{ '}' }}", response_model={{ model_name }}Response)
async def update_{{ model_name_lower }}(
    {{ model_name_lower }}_id: int,
    {{ model_name_lower }}_update: {{ model_name }}Update,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """Update {{ model_name_lower }}."""
    {{ model_name_lower }} = {{ model_name }}ORM.update(db=db, {{ model_name_lower }}_id={{ model_name_lower }}_id, {{ model_name_lower }}_update={{ model_name_lower }}_update)
    if not {{ model_name_lower }}:
        raise HTTPException(status_code=404, detail="{{ model_name }} not found")
    return {{ model_name_lower }}

@router.delete("/{{ model_name_plural }}/{{ '{' }}{{ model_name_lower }}_id{{ '}' }}")
async def delete_{{ model_name_lower }}(
    {{ model_name_lower }}_id: int,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """Delete {{ model_name_lower }}."""
    success = {{ model_name }}ORM.delete(db=db, {{ model_name_lower }}_id={{ model_name_lower }}_id)
    if not success:
        raise HTTPException(status_code=404, detail="{{ model_name }} not found")
    return {"message": "{{ model_name }} deleted successfully"}

@router.get("/{{ model_name_plural }}/count")
async def count_{{ model_name_plural }}(
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """Get total count of {{ model_name_plural }}."""
    total = {{ model_name }}ORM.count(db=db)
    return {"total": total}
'''
