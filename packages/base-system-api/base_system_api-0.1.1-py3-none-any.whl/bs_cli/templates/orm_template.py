"""Template for ORM operations."""

ORM_TEMPLATE = '''
"""
{{ model_name }} ORM Operations
Generated by BS FastAPI CLI
"""

from sqlalchemy.orm import Session
from models.models{{ model_name }} import {{ model_name }}
from schemas.schema{{ model_name }} import {{ model_name }}Create, {{ model_name }}Update
from typing import List, Optional

class {{ model_name }}ORM:
    
    @staticmethod
    def create(db: Session, {{ model_name_lower }}: {{ model_name }}Create) -> {{ model_name }}:
        """Create a new {{ model_name_lower }}."""
        db_{{ model_name_lower }} = {{ model_name }}(**{{ model_name_lower }}.dict())
        db.add(db_{{ model_name_lower }})
        db.commit()
        db.refresh(db_{{ model_name_lower }})
        return db_{{ model_name_lower }}
    
    @staticmethod
    def get_by_id(db: Session, {{ model_name_lower }}_id: int) -> Optional[{{ model_name }}]:
        """Get {{ model_name_lower }} by ID."""
        return db.query({{ model_name }}).filter({{ model_name }}.id == {{ model_name_lower }}_id).first()
    
    @staticmethod
    def get_all(db: Session, skip: int = 0, limit: int = 100) -> List[{{ model_name }}]:
        """Get all {{ model_name_plural }}."""
        return db.query({{ model_name }}).offset(skip).limit(limit).all()
    
    @staticmethod
    def update(db: Session, {{ model_name_lower }}_id: int, {{ model_name_lower }}_update: {{ model_name }}Update) -> Optional[{{ model_name }}]:
        """Update {{ model_name_lower }}."""
        db_{{ model_name_lower }} = db.query({{ model_name }}).filter({{ model_name }}.id == {{ model_name_lower }}_id).first()
        if db_{{ model_name_lower }}:
            update_data = {{ model_name_lower }}_update.dict(exclude_unset=True)
            for field, value in update_data.items():
                setattr(db_{{ model_name_lower }}, field, value)
            db.commit()
            db.refresh(db_{{ model_name_lower }})
        return db_{{ model_name_lower }}
    
    @staticmethod
    def delete(db: Session, {{ model_name_lower }}_id: int) -> bool:
        """Delete {{ model_name_lower }}."""
        db_{{ model_name_lower }} = db.query({{ model_name }}).filter({{ model_name }}.id == {{ model_name_lower }}_id).first()
        if db_{{ model_name_lower }}:
            db.delete(db_{{ model_name_lower }})
            db.commit()
            return True
        return False
    
    @staticmethod
    def count(db: Session) -> int:
        """Count total {{ model_name_plural }}."""
        return db.query({{ model_name }}).count()
'''
