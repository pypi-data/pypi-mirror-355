"""Template for Pydantic schemas."""

SCHEMA_TEMPLATE = '''
"""
{{ model_name }} Schemas
Generated by BS FastAPI CLI
"""

from pydantic import BaseModel, ConfigDict
from typing import Optional
from datetime import datetime

class {{ model_name }}Base(BaseModel):
    """Base {{ model_name }} schema."""
    {% for field in fields -%}
    {% if field.name != 'id' -%}
    {% if field.type == 'int' -%}
    {{ field.name }}: Optional[int] = None
    {% elif field.type == 'str' -%}
    {{ field.name }}: Optional[str] = None
    {% elif field.type == 'bool' -%}
    {{ field.name }}: Optional[bool] = False
    {% elif field.type == 'text' -%}
    {{ field.name }}: Optional[str] = None
    {% elif field.type == 'datetime' -%}
    {{ field.name }}: Optional[datetime] = None
    {% else -%}
    {{ field.name }}: Optional[str] = None
    {% endif %}
    {% endif %}
    {% endfor %}

class {{ model_name }}Create({{ model_name }}Base):
    """Schema for creating {{ model_name }}."""
    {% for field in fields -%}
    {% if field.name != 'id' and field.name != 'created_at' -%}
    {% if field.type == 'str' and field.name == 'name' -%}
    {{ field.name }}: str  # Required field
    {% endif %}
    {% endif %}
    {% endfor %}
    pass

class {{ model_name }}Update({{ model_name }}Base):
    """Schema for updating {{ model_name }}."""
    pass

class {{ model_name }}InDB({{ model_name }}Base):
    """Schema for {{ model_name }} in database."""
    {% for field in fields -%}
    {% if field.name == 'id' -%}
    id: int
    {% endif %}
    {% endfor %}
    
    model_config = ConfigDict(from_attributes=True)

class {{ model_name }}Response({{ model_name }}InDB):
    """Schema for {{ model_name }} response."""
    pass

# Pagination schema
class {{ model_name }}ListResponse(BaseModel):
    """Schema for paginated {{ model_name }} list response."""
    items: list[{{ model_name }}Response]
    total: int
    page: int
    size: int
    pages: int
'''
