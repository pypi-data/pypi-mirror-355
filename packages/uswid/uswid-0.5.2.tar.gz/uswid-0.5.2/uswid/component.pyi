from .entity import uSwidEntity as uSwidEntity, uSwidEntityRole as uSwidEntityRole
from .enums import uSwidVersionScheme as uSwidVersionScheme
from .errors import NotSupportedError as NotSupportedError
from .evidence import uSwidEvidence as uSwidEvidence
from .link import uSwidLink as uSwidLink, uSwidLinkRel as uSwidLinkRel
from .patch import uSwidPatch as uSwidPatch
from .payload import uSwidPayload as uSwidPayload
from .problem import uSwidProblem as uSwidProblem
from .purl import uSwidPurl as uSwidPurl
from .vex_statement import uSwidVexStatement as uSwidVexStatement
from _typeshed import Incomplete
from enum import Enum

class uSwidComponentType(Enum):
    FIRMWARE = 'firmware'
    APPLICATION = 'application'
    LIBRARY = 'library'
    @staticmethod
    def from_str(value: str) -> uSwidComponentType: ...

class uSwidComponent:
    purl: uSwidPurl | None
    tag_version: int
    software_version: str | None
    version_scheme: uSwidVersionScheme | None
    summary: str | None
    product: str | None
    type: uSwidComponentType
    colloquial_version: str | None
    revision: str | None
    edition: str | None
    persistent_id: str | None
    cpe: str | None
    lang: str | None
    generator: Incomplete
    payloads: list[uSwidPayload]
    evidences: list[uSwidEvidence]
    vex_statements: list[uSwidVexStatement]
    source_filenames: list[str]
    source_dir: str | None
    activation_status: str | None
    ancestors: list[uSwidComponent]
    patches: list[uSwidPatch]
    def __init__(self, tag_id: str | None = None, tag_version: int = 0, software_name: str | None = None, software_version: str | None = None, generator: str | None = 'uSWID') -> None: ...
    def add_source_filename(self, source_file: str) -> None: ...
    @property
    def software_name(self) -> str | None: ...
    @software_name.setter
    def software_name(self, software_name: str | None) -> None: ...
    @property
    def generator_href(self) -> str | None: ...
    @property
    def tag_id(self) -> str | None: ...
    @tag_id.setter
    def tag_id(self, tag_id: str | None) -> None: ...
    def problems(self) -> list[uSwidProblem]: ...
    def add_vex_statement(self, vex_statement: uSwidVexStatement) -> None: ...
    def merge(self, component_new: uSwidComponent) -> None: ...
    def add_entity(self, entity: uSwidEntity) -> None: ...
    def add_link(self, link: uSwidLink) -> None: ...
    def remove_link(self, link: uSwidLink) -> None: ...
    def add_payload(self, payload: uSwidPayload) -> None: ...
    def get_payload_by_name(self, name: str) -> uSwidPayload | None: ...
    def get_entity_by_name(self, name: str) -> uSwidEntity | None: ...
    def get_entity_by_role(self, role: uSwidEntityRole) -> uSwidEntity | None: ...
    def get_link_by_rel(self, rel: uSwidLinkRel) -> uSwidLink | None: ...
    def add_evidence(self, evidence: uSwidEvidence) -> None: ...
    @property
    def links(self) -> list[uSwidLink]: ...
    @property
    def entities(self) -> list[uSwidEntity]: ...
