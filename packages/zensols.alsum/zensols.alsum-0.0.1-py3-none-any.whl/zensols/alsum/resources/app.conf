#@meta {desc: 'app CLI config', date: '2024-04-30'}

[alsum_default]
results_dir = ~/Desktop/amr-graph

[cli]
apps = list: ${cli_config_default:apps}, clear_cli, app, capp, papp
cleanups = list: ${cli_config_default:cleanups}, clear_cli, capp, capp_decorator, papp, app_decorator

[log_cli]
format = %%(asctime)s[%%(levelname)s]:%%(module)s %%(message)s
default_app_level = warn
loggers = dict: {
  'transformers': 'err',
  'zensols.cli.lib': 'info',
  'zensols.cli.lib.config': 'info',
  'zensols.amr.docparser': 'info',
  'zensols.amr.coref': 'info'}

[clear_cli]
class_name = zensols.cli.CacheClearer
clearables = tuple:
  amr_default:clearables,
  calamr_default:clearables

[import]
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/escape.conf,
  resource(zensols.util): resources/cli.conf,
  resource(zensols.util): resources/cli-config.conf,
  resource(zensols.util): resources/cleaner.conf

[config_cli]
expect = False
cache_path = path: ${default:data_dir}/app-config.dat

[config_import]
references = list: conf_esc, package, default
sections = list: app_conf_imp

[app_conf_imp]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list: 
  ^{config_path}, ^{override},
  resource(zensols.deeplearn): resources/default.conf,
  resource(zensols.deepnlp): resources/default.conf,
  resource(zensols.amr): resources/default.conf,
  resource(zensols.propbankdb): resources/default.conf,
  resource(zensols.rend): resources/default.conf,
  resource(zensols.calamr): resources/default.conf,
  resource(zensols.alsum): resources/default.conf,
  ^{config_path}, ^{override},
  resource(zensols.nlp): resources/obj.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/score.yml,
  resource(zensols.deeplearn): resources/obj.conf,
  resource(zensols.deepnlp): resources/obj.conf,
  resource(zensols.amr): resources/obj.conf,
  resource(zensols.amr): resources/annotate.conf,
  resource(zensols.amr): resources/align.yml,
  resource(zensols.amr): resources/coref.conf,
  resource(zensols.amr): resources/model/inference.conf,
  resource(zensols.propbankdb): resources/obj.yml,
  resource(zensols.propbankdb): resources/embed.yml,
  resource(zensols.rend): resources/obj.conf,
  resource(zensols.calamr): resources/obj.conf,
  resource(zensols.calamr): resources/corpus.conf,
  resource(zensols.alsum): resources/obj.yml,
  ^{config_path}, ^{override}

[app]
class_name = zensols.alsum.Application
reduced_graph_stash = instance: alsum_reduced_graph_stash

[app_decorator]
option_excludes = set: reduced_graph_stash

[capp]
class_name = zensols.calamr.CorpusApplication
resource = instance: calamr_resource
results_dir = path: ${alsum_default:results_dir}

[capp_decorator]
option_excludes = set: config_factory, doc_parser, anon_doc_stash,
  serialized_factory, doc_graph_factory, doc_graph_aligner, results_dir,
  doc_scorer, result_analyzer
option_overrides = dict: {
  'output_file': {'long_name': 'output', 'short_name': 'o'},
  'output_dir': {'long_name': 'outdir', 'short_name': 'o',
                  'metavar': 'DIR',
                  'default': '${alsum_default:results_dir}'},
  'report_file': {'long_name': 'agg', 'short_name': None,
                   'default': '${alsum_default:results_dir}'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'render_level': {'long_name': 'rendlevel', 'short_name': 'r'},
  'use_cached': {'long_name': 'cached', 'short_name': None},
  'keys': {'metavar': '<STRING|ALL>'}}
mnemonic_overrides = dict: {
  'write_adhoc_corpus': 'mkadhoc',
  'write_keys': 'keys',
  'dump_annotated': 'dump',
  'align_corpus': 'aligncorp',
  'create_mismatch_proxy_corpus': 'miscorp',
  'clear_doc_cache': 'cleardoc'}
mnemonic_excludes = set: get_annotated_summary

[papp]
class_name = zensols.alsum.PrototypeApplication
app = instance: app
