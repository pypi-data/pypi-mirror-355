name: Build Documentation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  docs:
    name: Build and upload
    runs-on: ubuntu-latest
    outputs:
      DOCNAME: ${{ steps.prep.outputs.DOCNAME }}
      DEST_DIR: ${{ steps.prep.outputs.DEST_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
          sudo apt-get install graphviz
      - name: Pre-deploy
        id: prep
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          RELEASE: ${{ github.event_name == 'release' && github.event.action == 'published' }}
          RELEASE_VERSION: ${{ github.event.release.tag_name }}

        run: |
          if [[ $RELEASE == "true" ]]; then
            echo "This is a release!"
            echo $RELEASE
            DOCNAME="${RELEASE_VERSION##*v}"
          elif [[ $BRANCH_NAME =~ "release" ]]; then
            echo "This is a release branch!"
            VERSION="${BRANCH_NAME##*/}"
            DOCNAME="${VERSION}-beta"
          elif [[ $BRANCH_NAME == "develop" ]]; then
            echo "This is the develop branch!"
            DOCNAME="develop"
          elif [[ $BRANCH_NAME == "main" ]]; then
            echo "This is the main branch!"
            DOCNAME="latest"
          else
            DOCNAME="${BRANCH_NAME}"
            echo "Not sure how to handle $BRANCH_NAME"
            exit 1
          fi
          echo "Using $DOCNAME"
          echo "DOCNAME=$DOCNAME" >> $GITHUB_OUTPUT
          echo "DEST_DIR=${DOCNAME%%-*}" >> $GITHUB_OUTPUT

      - name: Build docs
        env:
          DOCNAME: ${{ steps.prep.outputs.DOCNAME }}
          DEST_DIR: ${{ steps.prep.outputs.DEST_DIR }}
        run: |
          cd docs
          make html
          cd ..
          cp docs/source/versions.json docs/build/html/versions.json
          cp docs/source/redirect.html docs/build/html/redirect.html
          # mkdir -p docs/build/temp/${DEST_DIR}
          # cp -r docs/build/html docs/build/temp/${DEST_DIR}
      
      # - name: Upload
      #   uses: actions/upload-artifact@v3
      #   env:
      #     DOCNAME: ${{ steps.prep.outputs.DOCNAME }}
      #     DEST_DIR: ${{ steps.prep.outputs.DEST_DIR }}
      #   with:
      #     name: ${DOCNAME}
      #     path: docs/build/html
  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: docs
  #   permissions:
  #     id-token: write
  #     pages: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #     DOCNAME: ${{ j }}
  #   steps:
  #     - name: Download
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: ${{ jobs.docs.outputs.DOCNAME }}
  #         path: ${{ jobs.docs.outputs.DEST_DIR }}
  #     - name: Deploy
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  #       with:
  #         artifact_name: ${{ jobs.docs.outputs.DOCNAME }}

      
      - name: Deploy
        env:
          DOCNAME: ${{ steps.prep.outputs.DOCNAME }}
          DEST_DIR: ${{ steps.prep.outputs.DEST_DIR }}
        run : |
          set -e
          git fetch origin gh-pages
          git checkout gh-pages
          git pull origin gh-pages
          cp -r docs/build/html ${DEST_DIR}/
          cp ${DEST_DIR}/versions.json versions.json
          cp ${DEST_DIR}/redirect.html index.html
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add versions.json
          git add index.html
          git add ${DEST_DIR}/
          git commit -m "Update ${DOCNAME}"
          git push origin gh-pages




      # - name: Deploy
      #   uses: peaceiris/actions-gh-pages@v4        
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./docs/build/temp
      #     publish_branch: gh-pages
      #     keep_files: true
      #     force_orphan: true
      # - name: Copy versions.json
      #   run: |
      #     git fetch
      #     git checkout gh-pages
      #     cp ${{ steps.prep.outputs.DEST_DIR }}/versions.json versions.json
      #     cp ${{ steps.prep.outputs.DEST_DIR }}/redirect.html index.html
      #     if [[ -z $(git status --porcelain) ]]; then
      #       echo "No changes"
      #     else
      #       git config user.name 'github-actions[bot]'
      #       git config user.email 'github-actions[bot]@users.noreply.github.com'
      #       git add versions.json
      #       git add index.html
      #       git commit -m "Update versions.json and index.html"
      #       git push origin gh-pages
      #     fi