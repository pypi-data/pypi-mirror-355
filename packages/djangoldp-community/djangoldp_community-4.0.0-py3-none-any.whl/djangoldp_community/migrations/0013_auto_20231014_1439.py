# Generated by Django 4.2.3 on 2023-10-14 12:39
from django.db import migrations

def create_group(apps, community, field_name, permissions):
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    GroupObjectPermission = apps.get_model("guardian", "GroupObjectPermission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    group = Group.objects.create(name=f'LDP_{community._meta.model_name}_{field_name}_{community.id}')
    setattr(community, field_name, group)
    for perm_name in permissions:
        ctype = ContentType.objects.get(model='community')
        permission = Permission.objects.get(content_type=ctype, codename=f'{perm_name}_community')
        GroupObjectPermission.objects.get_or_create(permission=permission, group=group, content_type=ctype, object_pk=community.pk)

def migrate_groups(apps, schema_editor):
    '''copies the members and admins of the communities into new groups'''
    community = apps.get_model('djangoldp_community', 'community')
    for community in community.objects.all():
        create_group(apps, community, 'members', ['view'])
        create_group(apps, community, 'admins', ['view', 'change', 'control'])

        for member in community.oldmembers.all():
            community.members.user_set.add(member.user)
            if member.is_admin:
                community.admins.user_set.add(member.user)
        community.save()

def reverse_migrate_groups(apps, schema_editor):
    '''copies the members of the communities into the old member model'''
    community = apps.get_model('djangoldp_community', 'community')
    CommunityMember = apps.get_model('djangoldp_community', 'CommunityMember')
    for community in community.objects.all():
        if community.members:
            for user in community.members.user_set.all():
                if not CommunityMember.objects.filter(user=user, community=community).exists():
                    is_admin = user in community.admins.user_set.all()
                    CommunityMember.objects.create(user=user, community=community, is_admin=is_admin)
            community.members.delete()
        if community.admins:
            community.admins.delete()


class Migration(migrations.Migration):
    dependencies = [
        ('djangoldp_community', '0012_alter_community_options_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_groups, reverse_migrate_groups),
    ]