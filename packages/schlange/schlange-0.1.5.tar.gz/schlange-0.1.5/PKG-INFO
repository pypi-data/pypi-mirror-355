Metadata-Version: 2.1
Name: schlange
Version: 0.1.5
Summary: Python auf Deutsch - Deutsche Schl√ºsselw√∂rter f√ºr Python
Home-page: https://github.com/yourusername/schlange
Author: Konja Rehm
Author-email: Konja Rehm <private@konja-rehm.de>
License: MIT
Project-URL: Homepage, https://github.com/Nokohokon/schlange
Project-URL: Bug Reports, https://github.com/Nokohokon/schlange/issues
Project-URL: Source, https://github.com/Nokohokon/schlange
Project-URL: Documentation, https://github.com/Nokohokon/schlange#readme
Keywords: deutsch,german,python,education,programming,localization
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: German
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Education
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Localization
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# Schlange üêç

**Python auf Deutsch** - Ein Python-Package, das deutsche Schl√ºsselw√∂rter f√ºr Python bereitstellt.

## √úberblick

Schlange erm√∂glicht es, Python-Code mit deutschen Schl√ºsselw√∂rtern zu schreiben. Anstatt `if`, `for`, `while` etc. k√∂nnen Sie deutsche Begriffe wie `wenn`, `f√ºr`, `solange` verwenden.

## Installation

```bash
pip install schlange
```

## Schnellstart

### Methode 1: Deutsche Funktionen direkt verwenden

```python
from schlange.functions import drucke, bereich, l√§nge

drucke("Hallo Welt!")
for i in bereich(1, 6):
    drucke(f"Zahl: {i}")
```

### Methode 2: Deutsche Syntax mit Transformation

```python
from schlange.transformer import f√ºhre_aus

deutscher_code = """
funktion begr√º√üe(name):
    drucke(f"Hallo {name}!")
    gib_zur√ºck f"Begr√º√üung f√ºr {name}"

wenn 5 > 3:
    nachricht = begr√º√üe("Welt")
    drucke(nachricht)
"""

f√ºhre_aus(deutscher_code)
```

### Methode 3: CLI-Tool f√ºr deutsche .py-Dateien

Erstellen Sie eine Datei `mein_programm.py`:
```python
von schlange importiere *

drucke("Deutsches Python!")
f√ºr i in bereich(5):
    drucke(f"Zahl {i}")
```

F√ºhren Sie aus:
```bash
python -m schlange.cli mein_programm.py
```

## Verwendung

### Methode 1: Deutsche Funktionen direkt verwenden

```python
from schlange import drucke, bereich, laenge

drucke("Hallo Welt!")
f√ºr i in bereich(1, 6):
    drucke(f"Zahl: {i}")
```

### Methode 2: Deutsche Syntax mit deutsch() Funktion

```python
from schlange import deutsch

deutsch("""
funktion begr√º√üe(name):
    drucke(f"Hallo {name}!")
    zur√ºckgeben f"Begr√º√üung f√ºr {name}"

wenn 5 > 3:
    nachricht = begr√º√üe("Welt")
    drucke(nachricht)
""")
```

### Methode 3: CLI-Tool f√ºr deutsche .py-Dateien

Erstellen Sie eine Datei `mein_programm.py`:
```python
# Datei: mein_programm.py
drucke("Deutsches Python!")
f√ºr i in bereich(5):
    drucke(f"Zahl {i}")
```

F√ºhren Sie aus:
```bash
python -m schlange.cli mein_programm.py
```

### üÜï Methode 4: .schlange Dateien verwenden

Erstellen Sie eine Datei `mein_programm.schlange`:
```python
# Datei: mein_programm.schlange
drucke("Hallo aus einer .schlange Datei!")

mein_name = "Python Schlange"
alter = 25

wenn alter >= 18:
    drucke(f"{mein_name} ist erwachsen!")

# Funktion definieren
funktion gr√º√üe(name):
    drucke(f"Hallo {name}!")
    zur√ºckgeben f"Gr√º√üe an {name}"

resultat = gr√º√üe("Entwickler")
drucke(resultat)
```

Verwenden Sie in Python:
```python
import schlange

# Direkte Ausf√ºhrung
schlange.fuehre_schlange_aus("mein_programm.schlange")

# Oder mit Namespace-Zugriff
namespace = schlange.lade_schlange_datei("mein_programm.schlange")
print("Name:", namespace['mein_name'])
print("Alter:", namespace['alter'])

# Funktionen aufrufen
greet_func = namespace['gr√º√üe']
result = greet_func("Welt")
print("Ergebnis:", result)
```

## Deutsche Schl√ºsselw√∂rter

| Deutsch | English | Beschreibung |
|---------|---------|--------------|
| `wenn` | `if` | Bedingte Anweisung |
| `sonst` | `else` | Alternative Anweisung |
| `sonstwenn` | `elif` | Weitere Bedingung |
| `f√ºr` | `for` | Schleife |
| `solange` | `while` | Bedingte Schleife |
| `funktion` | `def` | Funktionsdefinition |
| `klasse` | `class` | Klassendefinition |
| `importiere` | `import` | Modul importieren |
| `von` | `from` | Import von spezifischen Elementen |
| `zur√ºckgeben` | `return` | R√ºckgabewert |
| `gib_zur√ºck` | `return` | R√ºckgabewert (Alternative) |
| `versuche` | `try` | Fehlerbehandlung |
| `au√üer` | `except` | Ausnahmebehandlung |
| `endlich` | `finally` | Abschlussblock |
| `Wahr` | `True` | Boolean True |
| `Falsch` | `False` | Boolean False |
| `Nichts` | `None` | None-Wert |
| `und` | `and` | Logisches UND |
| `oder` | `or` | Logisches ODER |
| `nicht` | `not` | Logisches NICHT |
| `in` | `in` | Enthaltensein-Operator |

## .schlange Dateien

`.schlange` Dateien sind eine neue Funktion, die es erm√∂glicht, vollst√§ndig deutsche Python-Programme zu schreiben:

### Vorteile:
- ‚úÖ Vollst√§ndig deutsche Syntax ohne Mischung
- ‚úÖ Keine `deutsch()` Wrapper-Funktion n√∂tig
- ‚úÖ Direkter Zugriff auf Variablen und Funktionen
- ‚úÖ Bessere Lesbarkeit f√ºr deutsche Entwickler
- ‚úÖ Einfache Integration in bestehende Projekte

### Beispiel:

**Datei: `mathematik.schlange`**
```python
funktion addiere(a, b):
    zur√ºckgeben a + b

funktion multipliziere(a, b):
    zur√ºckgeben a * b

zahlen = [1, 2, 3, 4, 5]
drucke(f"Liste hat {laenge(zahlen)} Elemente")

f√ºr zahl in zahlen:
    resultat = multipliziere(zahl, 2)
    drucke(f"{zahl} * 2 = {resultat}")
```

**Verwendung in Python:**
```python
import schlange

# Direkte Ausf√ºhrung
schlange.fuehre_schlange_aus("mathematik.schlange")

# Mit Namespace-Zugriff
namespace = schlange.lade_schlange_datei("mathematik.schlange")
add_func = namespace['addiere']
result = add_func(10, 5)
print(f"10 + 5 = {result}")
```

üìñ **Weitere Informationen:** Siehe [SCHLANGE_DATEIEN.md](SCHLANGE_DATEIEN.md) f√ºr eine detaillierte Anleitung.
| `ist` | `is` | Identit√§ts-Operator |
| `durchbrechen` | `break` | Schleife verlassen |
| `fortsetzen` | `continue` | N√§chste Iteration |
| `bestehen` | `pass` | Leere Anweisung |

## Funktionen

| Deutsch | English | Beschreibung |
|---------|---------|--------------|
| `drucke()` | `print()` | Ausgabe |
| `eingabe()` | `input()` | Benutzereingabe |
| `l√§nge()` | `len()` | L√§nge ermitteln |
| `bereich()` | `range()` | Zahlenbereich |
| `typ()` | `type()` | Typ ermitteln |
| `liste()` | `list()` | Liste erstellen |
| `w√∂rterbuch()` | `dict()` | Dictionary erstellen |

## Beispiele

### Einfaches Programm

```python
from schlange import *

name = eingabe("Wie hei√üt du? ")
drucke(f"Hallo {name}!")

wenn l√§nge(name) > 10:
    drucke("Du hast einen langen Namen!")
sonst:
    drucke("Dein Name ist sch√∂n kurz.")
```

### Klasse definieren

```python
from schlange import *

klasse Person:
    funktion __init__(selbst, name, alter):
        selbst.name = name
        selbst.alter = alter
    
    funktion vorstellen(selbst):
        drucke(f"Ich bin {selbst.name} und {selbst.alter} Jahre alt.")

person = Person("Max", 25)
person.vorstellen()
```

## Lizenz

MIT License
