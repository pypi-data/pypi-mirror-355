Metadata-Version: 2.4
Name: pyquerytracker
Version: 0.1.0
Summary: A lightweight, decorator-based query performance tracking library for Python applications. Monitor and analyze database query performance with ease.
Author-email: MuddyHope <daktarisun@gmail.com>
License: MIT
Project-URL: Repository, https://github.com/MuddyHope/pyquerytracker
Project-URL: Issues, https://github.com/MuddyHope/pyquerytracker/issues
Keywords: performance,database,query,decorator,tracking
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# üêç pyquerytracker

**pyquerytracker** is a lightweight Python utility to **track and analyze database query performance** using simple decorators. It enables developers to gain visibility into SQL execution time, log metadata, and export insights in JSON format ‚Äî with optional FastAPI integration and scheduled reporting.

---

## üöÄ Features

- ‚úÖ Easy-to-use decorator to track function execution (e.g., SQL queries)
- ‚úÖ Capture runtime, function name, args, return values, and more

## TODO Features
- ‚úÖ Export logs to JSON or CSV
- ‚úÖ FastAPI integration to expose tracked metrics via REST API
- ‚úÖ Schedule periodic exports using `APScheduler`
- ‚úÖ Plug-and-play with any Python database client (SQLAlchemy, psycopg2, etc.)
- ‚úÖ Modular and extensible design

---

## üì¶ Installation

```bash
pip install pyquerytracker
```

## Usage
### Basic Usage
```python
import time
from pyquerytracker import TrackQuery

@TrackQuery()
def run_query():
    time.sleep(0.3)  # Simulate SQL execution
    return "SELECT * FROM users;"

run_query()
```
### Output
```bash
2025-06-14 14:23:00,123 - pyquerytracker - INFO - Function run_query executed successfully in 305.12ms
```

### With Configure
```
import logging
from pyquerytracker.config import configure

configure(
    slow_log_threshold_ms=200,     # Log queries slower than 200ms
    slow_log_level=logging.DEBUG   # Use DEBUG level for slow logs
)
```

### Output
```bash
2025-06-14 14:24:45,456 - pyquerytracker - WARNING - Slow execution: run_query took 501.87ms
```



