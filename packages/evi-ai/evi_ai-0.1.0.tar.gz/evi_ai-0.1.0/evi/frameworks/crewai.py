"""
CrewAI framework implementation for the evi package.
"""
import os
import json
from pathlib import Path
from typing import Dict, Any
from jinja2 import Environment, FileSystemLoader

from .base import BaseFramework

# Default CrewAI system prompt
CREWAI_SYSTEM_PROMPT = """
You are an agent system designer specializing in CrewAI. Your task is to take a natural language description of an agent system and convert it to a structured JSON configuration that can be used to generate CrewAI Python code.

The JSON should include:
1. agents: List of agents with name, role, goal, and backstory
2. tasks: List of tasks with name, description, agent (name of agent assigned to task), and dependencies (list of task names)
3. workflow: Either "sequential" or "hierarchical"
4. tools: List of tools each agent can use
5. output_file: Name of the output file to save the generated code

For each agent, provide:
- name: A unique identifier for the agent
- role: The professional role of the agent
- goal: What the agent is trying to achieve
- backstory: Background information about the agent
- tools: List of tools the agent can use (optional)
- verbose: Boolean to determine if the agent should be verbose (optional)

For each task, provide:
- name: A unique identifier for the task
- description: Detailed description of what the task involves
- agent: The name of the agent assigned to this task
- dependencies: List of task names that must be completed before this task (optional)
- expected_output: Description of what output is expected (optional)

Return just the JSON, ensuring it's properly formatted and valid.
"""

class CrewAIFramework(BaseFramework):
    """
    Framework handler for CrewAI agent framework.
    """
    
    def __init__(self):
        """Initialize the CrewAI framework handler."""
        # Locate the templates directory relative to this file
        self.template_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "templates")
        self.template_file = "crewai.py.j2"
    
    def get_system_prompt(self) -> str:
        """
        Get the system prompt for the CrewAI framework.
        
        Returns:
            The system prompt as a string
        """
        return CREWAI_SYSTEM_PROMPT
    
    def generate_code(self, config: Dict[str, Any]) -> str:
        """
        Generate CrewAI code from a JSON configuration.
        
        Args:
            config: The JSON configuration for the agent system
            
        Returns:
            The generated code as a string
            
        Raises:
            Exception: If code generation fails
        """
        try:
            # Validate the configuration
            if not self.validate_config(config):
                raise ValueError("Invalid CrewAI configuration")
                
            # Set up the Jinja2 environment
            env = Environment(
                loader=FileSystemLoader(self.template_dir),
                trim_blocks=True,
                lstrip_blocks=True
            )
            
            # Load the template
            try:
                template = env.get_template(self.template_file)
            except Exception as e:
                # If template not found, create a default template using a string
                template_str = """# CrewAI Agent System
# Generated by evi - Multi-Agent Framework Generator

from crewai import Agent, Task, Crew
from langchain.tools import DuckDuckGoSearchRun

# Initialize tools
search_tool = DuckDuckGoSearchRun()

# Define the agents
agents = [
{% for agent in agents %}
    Agent(
        name="{{ agent.name }}",
        role="{{ agent.role }}",
        goal="{{ agent.goal }}",
        backstory="{{ agent.backstory }}",
        {% if agent.tools %}
        tools=[{{ agent.tools|join(', ') }}],
        {% endif %}
        {% if agent.verbose is not none %}
        verbose={{ agent.verbose|lower }},
        {% endif %}
    ),
{% endfor %}
]

# Define the tasks
tasks = [
{% for task in tasks %}
    Task(
        name="{{ task.name }}",
        description="{{ task.description }}",
        agent=agents[{{ loop.index0 }}],
        {% if task.dependencies %}
        dependencies=[{% for dep in task.dependencies %}tasks[{{ dep }}]{% if not loop.last %}, {% endif %}{% endfor %}],
        {% endif %}
        {% if task.expected_output %}
        expected_output="{{ task.expected_output }}",
        {% endif %}
    ),
{% endfor %}
]

# Create the crew
crew = Crew(
    agents=agents,
    tasks=tasks,
    verbose=True,
    {% if workflow %}
    process="{{ workflow }}"
    {% else %}
    process="sequential"
    {% endif %}
)

# Run the crew
result = crew.run()
print(result)
"""
                # Create a template from the string
                template = env.from_string(template_str)
            
            # Render the template with the configuration
            rendered_code = template.render(**config)
            
            return rendered_code
            
        except Exception as e:
            raise Exception(f"Error generating CrewAI code: {str(e)}")
    
    def get_default_config(self) -> Dict[str, Any]:
        """
        Get a default configuration for the CrewAI framework.
        
        Returns:
            A dictionary containing the default configuration
        """
        return {
            "agents": [
                {
                    "name": "Researcher",
                    "role": "Senior Research Analyst",
                    "goal": "Find comprehensive information on the given topic",
                    "backstory": "You are a diligent researcher with years of experience finding relevant information quickly and efficiently.",
                    "tools": ["search_tool"],
                    "verbose": True
                },
                {
                    "name": "Writer",
                    "role": "Content Writer",
                    "goal": "Create well-written, engaging content based on the research",
                    "backstory": "You are a skilled writer who turns complex information into clear, engaging content.",
                    "tools": [],
                    "verbose": True
                }
            ],
            "tasks": [
                {
                    "name": "research_task",
                    "description": "Research the topic thoroughly using the search tool and compile relevant information.",
                    "agent": "Researcher",
                    "dependencies": [],
                    "expected_output": "A comprehensive collection of facts and information about the topic."
                },
                {
                    "name": "writing_task",
                    "description": "Using the research provided, create a well-structured article on the topic.",
                    "agent": "Writer",
                    "dependencies": ["research_task"],
                    "expected_output": "A complete article that presents the information in a clear and engaging way."
                }
            ],
            "workflow": "sequential",
            "output_file": "crewai_agent_system.py"
        }
    
    def get_required_keys(self) -> list:
        """
        Get the required keys for the CrewAI framework configuration.
        
        Returns:
            A list of required keys
        """
        return ["agents", "tasks"]
