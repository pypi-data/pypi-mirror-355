
import os
import json
from typing import Dict, Any
from jinja2 import Environment, FileSystemLoader

from .base import BaseFramework

# Default ReAct system prompt
REACT_SYSTEM_PROMPT = """
You are an agent system designer specializing in ReAct (Reasoning and Acting) agents. Your task is to take a natural language description of an agent system and convert it to a structured JSON configuration that can be used to generate ReAct Python code.

The JSON should include:
1. agents: List of agents with name, description, and system_prompt
2. tools: List of tools that agents can use with name, description, and parameters
3. reasoning_steps: Maximum number of reasoning steps per agent before responding
4. memory: Configuration for agent memory including type and capacity
5. output_file: Name of the output file to save the generated code

For each agent, provide:
- name: A unique identifier for the agent
- description: What the agent does and its purpose
- system_prompt: The system prompt that guides the agent's behavior
- tools: List of tool names this agent can access

For each tool, provide:
- name: A unique identifier for the tool
- description: What the tool does and how it should be used
- parameters: List of parameters with name and type
- return_type: What type of data the tool returns

For the memory configuration, specify:
- type: Either "simple" (just keeps recent messages) or "vectorstore" (for semantic retrieval)
- capacity: Number of messages or documents to retain
- embedding_model: Model for vectorstore embeddings (only if type is "vectorstore")

Return just the JSON, ensuring it's properly formatted and valid.
"""

class ReActFramework(BaseFramework):
    """
    Framework handler for ReAct agent framework.
    """
    
    def __init__(self):
        """Initialize the ReAct framework handler."""
        # Locate the templates directory relative to this file
        self.template_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "templates")
        self.template_file = "react.py.j2"
    
    def get_system_prompt(self) -> str:
        """
        Get the system prompt for the ReAct framework.
        
        Returns:
            The system prompt as a string
        """
        return REACT_SYSTEM_PROMPT
    
    def generate_code(self, config: Dict[str, Any]) -> str:
        """
        Generate ReAct code from a JSON configuration.
        
        Args:
            config: The JSON configuration for the agent system
            
        Returns:
            The generated code as a string
            
        Raises:
            Exception: If code generation fails
        """
        try:
            # Validate the configuration
            if not self.validate_config(config):
                raise ValueError("Invalid ReAct configuration")
                
            # Set up the Jinja2 environment
            env = Environment(
                loader=FileSystemLoader(self.template_dir),
                trim_blocks=True,
                lstrip_blocks=True
            )
            
            # Load the template
            try:
                template = env.get_template(self.template_file)
            except Exception as e:
                # If template not found, create a default template using a string
                template_str = """# ReAct Agent System
# Generated by evi - Multi-Agent Framework Generator

import os
from typing import List, Dict, Any, Callable, Optional
import openai
from langchain.prompts import ChatPromptTemplate
from langchain.tools import BaseTool, StructuredTool
from langchain.agents import AgentExecutor, Tool
from langchain.agents import create_react_agent
from langchain.memory import ConversationBufferMemory
{% if memory.type == "vectorstore" %}
from langchain.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings
from langchain.memory import VectorStoreRetrieverMemory
{% endif %}

# Set up API keys
# You should set up your API keys as environment variables
# or use a tool like python-dotenv to load them from a .env file

# Define tools
{% for tool in tools %}
def {{ tool.name }}({{ ", ".join([f"{param.name}: {param.type}" for param in tool.parameters]) }}) -> {{ tool.return_type }}:
    \"\"\"{{ tool.description }}
    {% for param in tool.parameters %}
    Args:
        {{ param.name }}: {{ param.description }}
    {% endfor %}
    Returns:
        {{ tool.return_type }}: {{ tool.return_description or "Result of the operation" }}
    \"\"\"
    # TODO: Implement this tool
    return "Tool result"

{% endfor %}

# Create tool instances
tools = [
{% for tool in tools %}
    Tool(
        name="{{ tool.name }}",
        func={{ tool.name }},
        description="{{ tool.description }}"
    ),
{% endfor %}
]

# Set up memory
{% if memory.type == "simple" %}
memory = ConversationBufferMemory(
    memory_key="chat_history",
    return_messages=True,
    max_token_limit={{ memory.capacity }}
)
{% elif memory.type == "vectorstore" %}
embeddings = OpenAIEmbeddings()
vectorstore = Chroma(embedding_function=embeddings)
retriever = vectorstore.as_retriever(search_kwargs={"k": {{ memory.capacity }}})
memory = VectorStoreRetrieverMemory(retriever=retriever)
{% else %}
memory = ConversationBufferMemory(
    memory_key="chat_history",
    return_messages=True
)
{% endif %}

{% for agent in agents %}
# Define {{ agent.name }} agent
{{ agent.name }}_system_prompt = \"\"\"{{ agent.system_prompt }}\"\"\"

{{ agent.name }}_prompt = ChatPromptTemplate.from_messages([
    ("system", {{ agent.name }}_system_prompt),
    ("human", "{input}"),
    ("human", "Reasoning steps: {reasoning}")
])

{{ agent.name }}_tools = [tool for tool in tools if tool.name in [{% for tool_name in agent.tools %}"{{ tool_name }}"{% if not loop.last %}, {% endif %}{% endfor %}]]

{% if "OPENAI_API_KEY" in env_vars %}
{{ agent.name }}_llm = ChatOpenAI(temperature=0)
{% elif "GEMINI_API_KEY" in env_vars %}
{{ agent.name }}_llm = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0)
{% else %}
{{ agent.name }}_llm = ChatOpenAI(temperature=0)
{% endif %}

{{ agent.name }}_agent = create_react_agent(
    llm={{ agent.name }}_llm,
    tools={{ agent.name }}_tools,
    prompt={{ agent.name }}_prompt
)

{{ agent.name }}_executor = AgentExecutor(
    agent={{ agent.name }}_agent,
    tools={{ agent.name }}_tools,
    memory=memory,
    verbose=True,
    max_iterations={{ reasoning_steps or 5 }},
    return_intermediate_steps=True
)

{% endfor %}

# Main function to run the agent system
def run_agent_system(query: str) -> Dict[str, Any]:
    \"\"\"
    Run the agent system with the given query.
    
    Args:
        query: The user query to process
        
    Returns:
        The final result and intermediate steps
    \"\"\"
    # Use the first agent as the main entry point
    # You can customize this logic as needed
    result = {{ agents[0].name }}_executor.invoke({"input": query})
    return result

# Example usage
if __name__ == "__main__":
    user_query = "Sample query for the agent system"
    response = run_agent_system(user_query)
    print(f"Final answer: {response['output']}")
    
    # Print reasoning steps
    print("\\nReasoning steps:")
    for i, step in enumerate(response.get("intermediate_steps", [])):
        print(f"Step {i+1}: {step}")
"""
                # Create a template from the string
                template = env.from_string(template_str)
            
            # Add environment variables to the config
            if "env_vars" not in config:
                config["env_vars"] = ["OPENAI_API_KEY"]
            
            # Render the template with the configuration
            rendered_code = template.render(**config)
            
            return rendered_code
            
        except Exception as e:
            raise Exception(f"Error generating ReAct code: {str(e)}")
    
    def get_default_config(self) -> Dict[str, Any]:
        """
        Get a default configuration for the ReAct framework.
        
        Returns:
            A dictionary containing the default configuration
        """
        return {
            "agents": [
                {
                    "name": "researcher",
                    "description": "An agent that researches information on a given topic",
                    "system_prompt": "You are a research assistant that helps find information on various topics. Use your tools to search for and provide detailed, accurate information.",
                    "tools": ["search_tool", "summarize_tool"]
                },
                {
                    "name": "analyst",
                    "description": "An agent that analyzes and evaluates information",
                    "system_prompt": "You are an analytical expert that evaluates information for accuracy, relevance, and implications. Provide thoughtful analysis based on the information you receive.",
                    "tools": ["calculator_tool"]
                }
            ],
            "tools": [
                {
                    "name": "search_tool",
                    "description": "Search the internet for information on a topic",
                    "parameters": [
                        {
                            "name": "query",
                            "type": "str",
                            "description": "The search query"
                        }
                    ],
                    "return_type": "str",
                    "return_description": "Search results as text"
                },
                {
                    "name": "summarize_tool",
                    "description": "Summarize a long text",
                    "parameters": [
                        {
                            "name": "text",
                            "type": "str",
                            "description": "The text to summarize"
                        },
                        {
                            "name": "max_length",
                            "type": "int",
                            "description": "Maximum length of the summary in words"
                        }
                    ],
                    "return_type": "str",
                    "return_description": "A summary of the input text"
                },
                {
                    "name": "calculator_tool",
                    "description": "Perform calculations",
                    "parameters": [
                        {
                            "name": "expression",
                            "type": "str",
                            "description": "Mathematical expression to evaluate"
                        }
                    ],
                    "return_type": "float",
                    "return_description": "Result of the calculation"
                }
            ],
            "reasoning_steps": 5,
            "memory": {
                "type": "simple",
                "capacity": 10
            },
            "output_file": "react_agent_system.py"
        }
    
    def get_required_keys(self) -> list:
        """
        Get the required keys for the ReAct framework configuration.
        
        Returns:
            A list of required keys
        """
        return ["agents", "tools", "reasoning_steps"]
