# ReAct Agent System
# Generated by evi - Multi-Agent Framework Generator

import os
from typing import List, Dict, Any, Callable, Optional
from langchain.agents import AgentExecutor, Tool
from langchain.agents import create_react_agent
from langchain.prompts import ChatPromptTemplate
{% if "OPENAI_API_KEY" in env_vars %}
from langchain_openai import ChatOpenAI
{% endif %}
{% if "GEMINI_API_KEY" in env_vars %}
from langchain_google_genai import ChatGoogleGenerativeAI
{% endif %}
from langchain.memory import ConversationBufferMemory
{% if memory and memory.type == "vectorstore" %}
from langchain.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings
from langchain.memory import VectorStoreRetrieverMemory
{% endif %}

# Set up API keys
# You should set up your API keys as environment variables
# or use a tool like python-dotenv to load them from a .env file

# Define tools
{% for tool in tools %}
def {{ tool.name }}({{ ", ".join([f"{param.name}: {param.type}" for param in tool.parameters]) }}) -> {{ tool.return_type }}:
    """{{ tool.description }}
    {% for param in tool.parameters %}
    Args:
        {{ param.name }}: {{ param.description }}
    {% endfor %}
    Returns:
        {{ tool.return_type }}: {{ tool.return_description or "Result of the operation" }}
    """
    # TODO: Implement this tool
    return "Tool result"

{% endfor %}

# Create tool instances
tools = [
{% for tool in tools %}
    Tool(
        name="{{ tool.name }}",
        func={{ tool.name }},
        description="{{ tool.description }}"
    ),
{% endfor %}
]

# Set up memory
{% if memory and memory.type == "simple" %}
memory = ConversationBufferMemory(
    memory_key="chat_history",
    return_messages=True,
    max_token_limit={{ memory.capacity }}
)
{% elif memory and memory.type == "vectorstore" %}
embeddings = OpenAIEmbeddings()
vectorstore = Chroma(embedding_function=embeddings)
retriever = vectorstore.as_retriever(search_kwargs={"k": {{ memory.capacity }}})
memory = VectorStoreRetrieverMemory(retriever=retriever)
{% else %}
memory = ConversationBufferMemory(
    memory_key="chat_history",
    return_messages=True
)
{% endif %}

{% for agent in agents %}
# Define {{ agent.name }} agent
{{ agent.name }}_system_prompt = """{{ agent.system_prompt }}"""

{{ agent.name }}_prompt = ChatPromptTemplate.from_messages([
    ("system", {{ agent.name }}_system_prompt),
    ("human", "{input}"),
    ("human", "Reasoning steps: {reasoning}")
])

{{ agent.name }}_tools = [tool for tool in tools if tool.name in [{% for tool_name in agent.tools %}"{{ tool_name }}"{% if not loop.last %}, {% endif %}{% endfor %}]]

{% if "OPENAI_API_KEY" in env_vars %}
{{ agent.name }}_llm = ChatOpenAI(temperature=0)
{% elif "GEMINI_API_KEY" in env_vars %}
{{ agent.name }}_llm = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0)
{% else %}
{{ agent.name }}_llm = ChatOpenAI(temperature=0)
{% endif %}

{{ agent.name }}_agent = create_react_agent(
    llm={{ agent.name }}_llm,
    tools={{ agent.name }}_tools,
    prompt={{ agent.name }}_prompt
)

{{ agent.name }}_executor = AgentExecutor(
    agent={{ agent.name }}_agent,
    tools={{ agent.name }}_tools,
    memory=memory,
    verbose=True,
    max_iterations={{ reasoning_steps or 5 }},
    return_intermediate_steps=True
)

{% endfor %}

# Main function to run the agent system
def run_agent_system(query: str) -> Dict[str, Any]:
    """
    Run the agent system with the given query.
    
    Args:
        query: The user query to process
        
    Returns:
        The final result and intermediate steps
    """
    # Use the first agent as the main entry point
    # You can customize this logic as needed
    result = {{ agents[0].name }}_executor.invoke({"input": query})
    return result

# Example usage
if __name__ == "__main__":
    user_query = "Sample query for the agent system"
    response = run_agent_system(user_query)
    print(f"Final answer: {response['output']}")
    
    # Print reasoning steps
    print("\nReasoning steps:")
    for i, step in enumerate(response.get("intermediate_steps", [])):
        print(f"Step {i+1}: {step}")
