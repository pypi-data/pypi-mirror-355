name: Claude Auto-Approve

on:
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

jobs:
  auto-approve:
    if: |
      (github.event_name == 'pull_request_review' && 
       github.event.review.user.login == 'claude[bot]' && 
       contains(github.event.review.body, 'APPROVE')) ||
      (github.event_name == 'issue_comment' && 
       github.event.comment.user.login == 'claude[bot]' && 
       contains(github.event.comment.body, 'APPROVED'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
      checks: read
      statuses: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get PR number
        id: pr_number
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if PR can be auto-approved
        id: check_approval
        run: |
          pr_number="${{ steps.pr_number.outputs.pr_number }}"
          
          # Get PR details
          pr_data=$(gh pr view $pr_number --json author,title,baseRefName,mergeable,reviewDecision)
          pr_author=$(echo "$pr_data" | jq -r '.author.login')
          pr_title=$(echo "$pr_data" | jq -r '.title')
          pr_base=$(echo "$pr_data" | jq -r '.baseRefName')
          pr_mergeable=$(echo "$pr_data" | jq -r '.mergeable')
          review_decision=$(echo "$pr_data" | jq -r '.reviewDecision')
          
          echo "PR Author: $pr_author"
          echo "PR Title: $pr_title" 
          echo "PR Base: $pr_base"
          echo "PR Mergeable: $pr_mergeable"
          echo "Review Decision: $review_decision"
          
          # Check if this is an eligible PR for auto-approval
          auto_approve=false
          
          if [[ "$pr_author" == "devops-mindhive" ]] && \
             [[ "$pr_title" =~ ^(fix|chore|release): ]] && \
             [[ "$pr_mergeable" == "MERGEABLE" ]]; then
            auto_approve=true
          fi
          
          echo "auto_approve=$auto_approve" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Approve PR
        if: steps.check_approval.outputs.auto_approve == 'true'
        run: |
          pr_number="${{ steps.pr_number.outputs.pr_number }}"
          
          # Create formal approval review
          gh pr review $pr_number --approve --body "‚úÖ **Auto-approved by Claude**

          This PR has been automatically approved based on:
          - Comprehensive Claude review completed
          - All CI checks passed
          - Changes meet project quality standards
          - No security or compatibility issues identified
          
          Ready for merge after all required status checks pass."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-merge if ready
        if: steps.check_approval.outputs.auto_approve == 'true'
        run: |
          pr_number="${{ steps.pr_number.outputs.pr_number }}"
          
          # Wait a moment for review to register
          sleep 5
          
          # Check if PR is ready to merge
          pr_data=$(gh pr view $pr_number --json mergeable,reviewDecision,statusCheckRollup)
          mergeable=$(echo "$pr_data" | jq -r '.mergeable')
          review_decision=$(echo "$pr_data" | jq -r '.reviewDecision')
          
          echo "Mergeable: $mergeable"
          echo "Review Decision: $review_decision"
          
          if [[ "$mergeable" == "MERGEABLE" ]] && [[ "$review_decision" == "APPROVED" ]]; then
            echo "üöÄ Auto-merging PR $pr_number"
            gh pr merge $pr_number --squash --delete-branch
          else
            echo "‚è≥ PR not ready for auto-merge yet (waiting for status checks or additional approvals)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}