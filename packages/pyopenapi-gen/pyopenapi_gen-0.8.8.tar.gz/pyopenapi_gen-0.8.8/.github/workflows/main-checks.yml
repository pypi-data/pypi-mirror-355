name: Main Branch Checks

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  comprehensive-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install --extras dev

    - name: Run full test suite with coverage
      run: |
        poetry run pytest -n 2 --timeout=120 --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html --cov-fail-under=85

    - name: Run all quality checks
      run: |
        poetry run black --check src/ tests/
        poetry run ruff check src/ tests/
        poetry run mypy src/ --strict --no-warn-no-return

    - name: Test package build
      run: |
        poetry build

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  performance-tests:
    runs-on: ubuntu-latest
    needs: [comprehensive-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
    
    - name: Install dependencies
      run: |
        poetry install --extras dev

    - name: Test large specification processing
      run: |
        # Test with business swagger (large spec)
        timeout 300 poetry run pyopenapi-gen gen input/business_swagger.json --project-root ./perf_test --output-package large_client --force --no-postprocess
        
    - name: Verify performance test results
      run: |
        test -f ./perf_test/large_client/__init__.py
        test -f ./perf_test/large_client/client.py
        echo "Large specification processed successfully"