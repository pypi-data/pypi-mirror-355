from __future__ import annotations
from typing import Protocol, Optional
from ..rng import RNG

class Continuous[T](Protocol):
    def pdf(self, x: T) -> float: ...
    def ln_pdf(self, x: T) -> float: ...

class ContinuousCDF[T](Continuous[T], Protocol):
    def cdf(self, x: T) -> float: ...
    def sf(self, x: T) -> float: ...
    def inverse_cdf(self, p: float) -> T: ...
    @property
    def lower(self) -> T: ...
    @property
    def upper(self) -> T: ...

class Discrete[T](Protocol):
    def pmf(self, x: T) -> float: ...
    def ln_pmf(self, x: T) -> float: ...

class DiscreteCDF[T](Discrete[T], Protocol):
    def cdf(self, x: T) -> float: ...
    def sf(self, x: T) -> float: ...
    def inverse_cdf(self, p: float) -> T: ...
    @property
    def lower(self) -> T: ...
    @property
    def upper(self) -> T: ...

class Distribution(Protocol):
    def mean(self) -> Optional[float]: ...
    def median(self) -> Optional[float]: ...
    def variance(self) -> Optional[float]: ...
    def std_dev(self) -> Optional[float]: ...
    def entropy(self) -> Optional[float]: ...
    def skewness(self) -> Optional[float]: ...

class Sample[T](Protocol):
    def sample(self, rng: RNG) -> T: ...

# Concrete distributions

class Beta(ContinuousCDF, Continuous, Distribution, Sample):
    def __init__(self, shape_a: float, shape_b: float): ...
    @property
    def shape_a(self) -> float: ...
    @property
    def shape_b(self) -> float: ...

class BetaError:
    InvalidAlpha: BetaError
    InvalidBeta: BetaError

class Exp(ContinuousCDF, Continuous[float], Distribution, Sample[float]):
    def __init__(self, rate: float): ...
    @property
    def rate(self) -> float: ...

class ExpError:
    RateInvalid: ExpError

class Gamma(ContinuousCDF, Continuous, Distribution, Sample):
    def __init__(self, shape: float, rate: float): ...
    @property
    def shape(self) -> float: ...
    @property
    def rate(self) -> float: ...

class GammaError:
    ShapeInvalid: GammaError
    RateInvalid: GammaError
    ShapeAndRateInfinite: GammaError

class InverseGamma(ContinuousCDF, Continuous, Distribution, Sample):
    def __init__(self, shape: float, rate: float): ...
    @property
    def shape(self) -> float: ...
    @property
    def rate(self) -> float: ...

class InverseGammaError:
    ShapeInvalid: InverseGammaError
    RateInvalid: InverseGammaError

class Laplace(ContinuousCDF, Continuous[float], Distribution, Sample[float]):
    def __init__(self, location: float, scale: float): ...
    @property
    def location(self) -> float: ...
    @property
    def scale(self) -> float: ...

class LaplaceError:
    LocationInvalid: LaplaceError
    ScaleInvalid: LaplaceError

class LogNormal(ContinuousCDF, Continuous[float], Distribution, Sample[float]):
    def __init__(self, location: float, scale: float): ...
    @property
    def location(self) -> float: ...
    @property
    def scale(self) -> float: ...

class LogNormalError:
    LocationInvalid: LogNormalError
    ScaleInvalid: LogNormalError

class Normal(ContinuousCDF, Continuous[float], Distribution, Sample[float]):
    def __init__(self, mean: float, std_dev: float): ...

class NormalError:
    MeanInvalid: NormalError
    StandardDeviationInvalid: NormalError

class Poisson(DiscreteCDF, Discrete[float], Distribution, Sample[int]):
    def __init__(self, lambda_: float): ...
    @property
    def lambda_(self) -> float: ...

class PoissonError:
    LambdaInvalid: PoissonError

class Uniform(ContinuousCDF, Continuous[float], Distribution, Sample[float]):
    def __init__(self, min: float, max: float): ...
    @property
    def min(self) -> float: ...
    @property
    def max(self) -> float: ...

class UniformError:
    MinInvalid: UniformError
    MaxInvalid: UniformError
    MaxNotGreaterThanMin: UniformError
