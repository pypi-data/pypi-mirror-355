# coding: utf-8

"""
    Battery Data API

    A standard API for accessing battery experiment datasets and metadata  # noqa: E501

    The version of the OpenAPI document: 2.11.1
    Contact: martin.robinson@cs.ox.ac.uk
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from galv import schemas  # noqa: F401


class ObservedFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "has_required_columns",
            "parquet_partitions",
            "summary",
            "mapping",
            "first_sample_no",
            "last_observed_time",
            "png",
            "team",
            "url",
            "harvester",
            "last_observed_size_bytes",
            "last_sample_no",
            "path",
            "parser",
            "extra_metadata",
            "permissions",
            "uploader",
            "num_rows",
            "id",
            "state",
            "applicable_mappings",
            "upload_errors",
        }
        
        class properties:
            url = schemas.StrSchema
            id = schemas.UUIDSchema
            path = schemas.StrSchema
            harvester = schemas.StrSchema
            
            
            class uploader(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uploader':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class team(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'team':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RETRY IMPORT": "RETRY_IMPORT",
                        "IMPORT FAILED": "IMPORT_FAILED",
                        "UNSTABLE": "UNSTABLE",
                        "GROWING": "GROWING",
                        "STABLE": "STABLE",
                        "IMPORTING": "IMPORTING",
                        "AWAITING MAP ASSIGNMENT": "AWAITING_MAP_ASSIGNMENT",
                        "MAP ASSIGNED": "MAP_ASSIGNED",
                        "AWAITING STORAGE": "AWAITING_STORAGE",
                        "IMPORTED": "IMPORTED",
                    }
                
                @schemas.classproperty
                def RETRY_IMPORT(cls):
                    return cls("RETRY IMPORT")
                
                @schemas.classproperty
                def IMPORT_FAILED(cls):
                    return cls("IMPORT FAILED")
                
                @schemas.classproperty
                def UNSTABLE(cls):
                    return cls("UNSTABLE")
                
                @schemas.classproperty
                def GROWING(cls):
                    return cls("GROWING")
                
                @schemas.classproperty
                def STABLE(cls):
                    return cls("STABLE")
                
                @schemas.classproperty
                def IMPORTING(cls):
                    return cls("IMPORTING")
                
                @schemas.classproperty
                def AWAITING_MAP_ASSIGNMENT(cls):
                    return cls("AWAITING MAP ASSIGNMENT")
                
                @schemas.classproperty
                def MAP_ASSIGNED(cls):
                    return cls("MAP ASSIGNED")
                
                @schemas.classproperty
                def AWAITING_STORAGE(cls):
                    return cls("AWAITING STORAGE")
                
                @schemas.classproperty
                def IMPORTED(cls):
                    return cls("IMPORTED")
            
            
            class parser(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parser':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class upload_errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'upload_errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class num_rows(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'num_rows':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class first_sample_no(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'first_sample_no':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_sample_no(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_sample_no':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_observed_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_observed_time':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            last_observed_size_bytes = schemas.IntSchema
            mapping = schemas.StrSchema
            has_required_columns = schemas.BoolSchema
            
            
            class parquet_partitions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parquet_partitions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            extra_metadata = schemas.StrSchema
            summary = schemas.StrSchema
            
            
            class png(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'png':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            applicable_mappings = schemas.StrSchema
            
            
            class permissions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        read = schemas.BoolSchema
                        write = schemas.BoolSchema
                        create = schemas.BoolSchema
                        destroy = schemas.BoolSchema
                        __annotations__ = {
                            "read": read,
                            "write": write,
                            "create": create,
                            "destroy": destroy,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["read"]) -> MetaOapg.properties.read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["write"]) -> MetaOapg.properties.write: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["create"]) -> MetaOapg.properties.create: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["destroy"]) -> MetaOapg.properties.destroy: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["read", "write", "create", "destroy", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["read"]) -> typing.Union[MetaOapg.properties.read, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["write"]) -> typing.Union[MetaOapg.properties.write, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["create"]) -> typing.Union[MetaOapg.properties.create, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["destroy"]) -> typing.Union[MetaOapg.properties.destroy, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["read", "write", "create", "destroy", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    read: typing.Union[MetaOapg.properties.read, bool, schemas.Unset] = schemas.unset,
                    write: typing.Union[MetaOapg.properties.write, bool, schemas.Unset] = schemas.unset,
                    create: typing.Union[MetaOapg.properties.create, bool, schemas.Unset] = schemas.unset,
                    destroy: typing.Union[MetaOapg.properties.destroy, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        *_args,
                        read=read,
                        write=write,
                        create=create,
                        destroy=destroy,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class read_access_level(
                schemas.EnumBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        4: "POSITIVE_4",
                        3: "POSITIVE_3",
                        2: "POSITIVE_2",
                        1: "POSITIVE_1",
                        0: "POSITIVE_0",
                        schemas.NoneClass.NONE: "NONE",
                    }
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'read_access_level':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class edit_access_level(
                schemas.EnumBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        4: "POSITIVE_4",
                        3: "POSITIVE_3",
                        2: "POSITIVE_2",
                        1: "POSITIVE_1",
                        schemas.NoneClass.NONE: "NONE",
                    }
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edit_access_level':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class delete_access_level(
                schemas.EnumBase,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        4: "POSITIVE_4",
                        3: "POSITIVE_3",
                        schemas.NoneClass.NONE: "NONE",
                    }
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delete_access_level':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "url": url,
                "id": id,
                "path": path,
                "harvester": harvester,
                "uploader": uploader,
                "team": team,
                "state": state,
                "parser": parser,
                "upload_errors": upload_errors,
                "num_rows": num_rows,
                "first_sample_no": first_sample_no,
                "last_sample_no": last_sample_no,
                "last_observed_time": last_observed_time,
                "last_observed_size_bytes": last_observed_size_bytes,
                "mapping": mapping,
                "has_required_columns": has_required_columns,
                "parquet_partitions": parquet_partitions,
                "extra_metadata": extra_metadata,
                "summary": summary,
                "png": png,
                "applicable_mappings": applicable_mappings,
                "permissions": permissions,
                "name": name,
                "read_access_level": read_access_level,
                "edit_access_level": edit_access_level,
                "delete_access_level": delete_access_level,
            }
    
    has_required_columns: MetaOapg.properties.has_required_columns
    parquet_partitions: MetaOapg.properties.parquet_partitions
    summary: MetaOapg.properties.summary
    mapping: MetaOapg.properties.mapping
    first_sample_no: MetaOapg.properties.first_sample_no
    last_observed_time: MetaOapg.properties.last_observed_time
    png: MetaOapg.properties.png
    team: MetaOapg.properties.team
    url: MetaOapg.properties.url
    harvester: MetaOapg.properties.harvester
    last_observed_size_bytes: MetaOapg.properties.last_observed_size_bytes
    last_sample_no: MetaOapg.properties.last_sample_no
    path: MetaOapg.properties.path
    parser: MetaOapg.properties.parser
    extra_metadata: MetaOapg.properties.extra_metadata
    permissions: MetaOapg.properties.permissions
    uploader: MetaOapg.properties.uploader
    num_rows: MetaOapg.properties.num_rows
    id: MetaOapg.properties.id
    state: MetaOapg.properties.state
    applicable_mappings: MetaOapg.properties.applicable_mappings
    upload_errors: MetaOapg.properties.upload_errors
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["harvester"]) -> MetaOapg.properties.harvester: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uploader"]) -> MetaOapg.properties.uploader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parser"]) -> MetaOapg.properties.parser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_errors"]) -> MetaOapg.properties.upload_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_rows"]) -> MetaOapg.properties.num_rows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_sample_no"]) -> MetaOapg.properties.first_sample_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_sample_no"]) -> MetaOapg.properties.last_sample_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_observed_time"]) -> MetaOapg.properties.last_observed_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_observed_size_bytes"]) -> MetaOapg.properties.last_observed_size_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mapping"]) -> MetaOapg.properties.mapping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_required_columns"]) -> MetaOapg.properties.has_required_columns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parquet_partitions"]) -> MetaOapg.properties.parquet_partitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_metadata"]) -> MetaOapg.properties.extra_metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["png"]) -> MetaOapg.properties.png: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_mappings"]) -> MetaOapg.properties.applicable_mappings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["read_access_level"]) -> MetaOapg.properties.read_access_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_access_level"]) -> MetaOapg.properties.edit_access_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_access_level"]) -> MetaOapg.properties.delete_access_level: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "id", "path", "harvester", "uploader", "team", "state", "parser", "upload_errors", "num_rows", "first_sample_no", "last_sample_no", "last_observed_time", "last_observed_size_bytes", "mapping", "has_required_columns", "parquet_partitions", "extra_metadata", "summary", "png", "applicable_mappings", "permissions", "name", "read_access_level", "edit_access_level", "delete_access_level", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["harvester"]) -> MetaOapg.properties.harvester: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uploader"]) -> MetaOapg.properties.uploader: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parser"]) -> MetaOapg.properties.parser: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_errors"]) -> MetaOapg.properties.upload_errors: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_rows"]) -> MetaOapg.properties.num_rows: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_sample_no"]) -> MetaOapg.properties.first_sample_no: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_sample_no"]) -> MetaOapg.properties.last_sample_no: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_observed_time"]) -> MetaOapg.properties.last_observed_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_observed_size_bytes"]) -> MetaOapg.properties.last_observed_size_bytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mapping"]) -> MetaOapg.properties.mapping: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_required_columns"]) -> MetaOapg.properties.has_required_columns: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parquet_partitions"]) -> MetaOapg.properties.parquet_partitions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_metadata"]) -> MetaOapg.properties.extra_metadata: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["png"]) -> MetaOapg.properties.png: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_mappings"]) -> MetaOapg.properties.applicable_mappings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["read_access_level"]) -> typing.Union[MetaOapg.properties.read_access_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_access_level"]) -> typing.Union[MetaOapg.properties.edit_access_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_access_level"]) -> typing.Union[MetaOapg.properties.delete_access_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "id", "path", "harvester", "uploader", "team", "state", "parser", "upload_errors", "num_rows", "first_sample_no", "last_sample_no", "last_observed_time", "last_observed_size_bytes", "mapping", "has_required_columns", "parquet_partitions", "extra_metadata", "summary", "png", "applicable_mappings", "permissions", "name", "read_access_level", "edit_access_level", "delete_access_level", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        has_required_columns: typing.Union[MetaOapg.properties.has_required_columns, bool, ],
        parquet_partitions: typing.Union[MetaOapg.properties.parquet_partitions, list, tuple, ],
        summary: typing.Union[MetaOapg.properties.summary, str, ],
        mapping: typing.Union[MetaOapg.properties.mapping, str, ],
        first_sample_no: typing.Union[MetaOapg.properties.first_sample_no, None, decimal.Decimal, int, ],
        last_observed_time: typing.Union[MetaOapg.properties.last_observed_time, None, str, datetime, ],
        png: typing.Union[MetaOapg.properties.png, None, str, ],
        team: typing.Union[MetaOapg.properties.team, None, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        harvester: typing.Union[MetaOapg.properties.harvester, str, ],
        last_observed_size_bytes: typing.Union[MetaOapg.properties.last_observed_size_bytes, decimal.Decimal, int, ],
        last_sample_no: typing.Union[MetaOapg.properties.last_sample_no, None, decimal.Decimal, int, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        parser: typing.Union[MetaOapg.properties.parser, None, str, ],
        extra_metadata: typing.Union[MetaOapg.properties.extra_metadata, str, ],
        permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, ],
        uploader: typing.Union[MetaOapg.properties.uploader, None, str, ],
        num_rows: typing.Union[MetaOapg.properties.num_rows, None, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        applicable_mappings: typing.Union[MetaOapg.properties.applicable_mappings, str, ],
        upload_errors: typing.Union[MetaOapg.properties.upload_errors, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        read_access_level: typing.Union[MetaOapg.properties.read_access_level, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        edit_access_level: typing.Union[MetaOapg.properties.edit_access_level, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delete_access_level: typing.Union[MetaOapg.properties.delete_access_level, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObservedFile':
        return super().__new__(
            cls,
            *_args,
            has_required_columns=has_required_columns,
            parquet_partitions=parquet_partitions,
            summary=summary,
            mapping=mapping,
            first_sample_no=first_sample_no,
            last_observed_time=last_observed_time,
            png=png,
            team=team,
            url=url,
            harvester=harvester,
            last_observed_size_bytes=last_observed_size_bytes,
            last_sample_no=last_sample_no,
            path=path,
            parser=parser,
            extra_metadata=extra_metadata,
            permissions=permissions,
            uploader=uploader,
            num_rows=num_rows,
            id=id,
            state=state,
            applicable_mappings=applicable_mappings,
            upload_errors=upload_errors,
            name=name,
            read_access_level=read_access_level,
            edit_access_level=edit_access_level,
            delete_access_level=delete_access_level,
            _configuration=_configuration,
            **kwargs,
        )
