---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/stickytape_explicit_relative_import_single_dot/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
def __cribo_init___cribo_e3b0c4_greetings():
    if '__cribo_e3b0c4_greetings' in sys.modules:
        return sys.modules['__cribo_e3b0c4_greetings']
    module = types.ModuleType('__cribo_e3b0c4_greetings')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_e3b0c4_greetings'] = module
    sys.modules['greetings'] = module
    return module
def __cribo_init___cribo_cf5a45_greetings_greeting():
    if '__cribo_cf5a45_greetings_greeting' in sys.modules:
        return sys.modules['__cribo_cf5a45_greetings_greeting']
    module = types.ModuleType('__cribo_cf5a45_greetings_greeting')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_cf5a45_greetings_greeting'] = module
    sys.modules['greetings.greeting'] = module
    messages = sys.modules['greetings.messages']
    __all__ = ["message"]
    message = messages.message
    module.message = message
    module.__all__ = ['message']
    return module
def __cribo_init___cribo_e6b571_greetings_messages():
    if '__cribo_e6b571_greetings_messages' in sys.modules:
        return sys.modules['__cribo_e6b571_greetings_messages']
    module = types.ModuleType('__cribo_e6b571_greetings_messages')
    module.__file__ = __file__ if '__file__' in globals() else None
    sys.modules['__cribo_e6b571_greetings_messages'] = module
    sys.modules['greetings.messages'] = module
    message = "Hello"
    module.message = message
    return module
__cribo_modules = {'greetings': '__cribo_e3b0c4_greetings', 'greetings.greeting': '__cribo_cf5a45_greetings_greeting', 'greetings.messages': '__cribo_e6b571_greetings_messages'}
__cribo_init_functions = {'__cribo_e3b0c4_greetings': __cribo_init___cribo_e3b0c4_greetings, '__cribo_cf5a45_greetings_greeting': __cribo_init___cribo_cf5a45_greetings_greeting, '__cribo_e6b571_greetings_messages': __cribo_init___cribo_e6b571_greetings_messages}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_e6b571_greetings_messages()
__cribo_init___cribo_e3b0c4_greetings()
__cribo_init___cribo_cf5a45_greetings_greeting()
greetings = sys.modules['greetings']
greetings.greeting = sys.modules['greetings.greeting']
print(greetings.greeting.message)
