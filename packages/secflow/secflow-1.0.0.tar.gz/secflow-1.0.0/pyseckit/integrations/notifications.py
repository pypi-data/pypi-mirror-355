"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è PySecKit.
"""

import json
import requests
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, List, Optional
from pyseckit.core.scanner import ScanResult


class BaseNotifier(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.enabled = config.get('enabled', False)
    
    @abstractmethod
    def send_notification(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        pass
    
    def format_scan_summary(self, scan_result: ScanResult) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        total_findings = len(scan_result.findings)
        duration = (scan_result.end_time - scan_result.start_time).total_seconds()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ severity
        severity_counts = {}
        for finding in scan_result.findings:
            severity = finding.get('severity', 'INFO')
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        summary = f"""üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**
üéØ **–¶–µ–ª—å:** {scan_result.target}
üîç **–°–∫–∞–Ω–µ—Ä:** {scan_result.scanner_name}
‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration:.1f} —Å–µ–∫
üìã **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:** {total_findings}"""
        
        if severity_counts:
            summary += "\n\n**–ü–æ —É—Ä–æ–≤–Ω—è–º:**"
            severity_emojis = {
                'HIGH': 'üî¥',
                'MEDIUM': 'üü°', 
                'LOW': 'üü¢',
                'INFO': '‚ÑπÔ∏è'
            }
            
            for severity, count in severity_counts.items():
                emoji = severity_emojis.get(severity, '‚ö™')
                summary += f"\n{emoji} {severity}: {count}"
        
        return summary


class SlackNotifier(BaseNotifier):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Slack."""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.webhook_url = config.get('webhook_url')
        self.channel = config.get('channel', '#security')
        self.username = config.get('username', 'PySecKit')
        self.icon_emoji = config.get('icon_emoji', ':shield:')
    
    def send_notification(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack."""
        if not self.enabled or not self.webhook_url:
            return False
        
        try:
            payload = self._build_slack_payload(title, message, scan_result)
            
            response = requests.post(
                self.webhook_url,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            return response.status_code == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _build_slack_payload(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç payload –¥–ª—è Slack API."""
        color = self._get_color_for_scan(scan_result) if scan_result else "#36a64f"
        
        attachment = {
            "color": color,
            "title": title,
            "text": message,
            "footer": "PySecKit Security Scanner",
            "ts": int(datetime.now().timestamp())
        }
        
        if scan_result:
            attachment["fields"] = self._build_slack_fields(scan_result)
        
        return {
            "channel": self.channel,
            "username": self.username,
            "icon_emoji": self.icon_emoji,
            "attachments": [attachment]
        }
    
    def _build_slack_fields(self, scan_result: ScanResult) -> List[Dict[str, Any]]:
        """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª—è –¥–ª—è Slack attachment."""
        fields = [
            {
                "title": "–¶–µ–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "value": scan_result.target,
                "short": True
            },
            {
                "title": "–°–∫–∞–Ω–µ—Ä",
                "value": scan_result.scanner_name,
                "short": True
            },
            {
                "title": "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫",
                "value": str(len(scan_result.findings)),
                "short": True
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        high_severity_findings = [
            f for f in scan_result.findings 
            if f.get('severity') == 'HIGH'
        ][:3]
        
        if high_severity_findings:
            critical_list = []
            for finding in high_severity_findings:
                critical_list.append(f"‚Ä¢ {finding.get('title', 'Unknown issue')}")
            
            fields.append({
                "title": "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
                "value": "\n".join(critical_list),
                "short": False
            })
        
        return fields
    
    def _get_color_for_scan(self, scan_result: ScanResult) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        high_count = sum(1 for f in scan_result.findings if f.get('severity') == 'HIGH')
        medium_count = sum(1 for f in scan_result.findings if f.get('severity') == 'MEDIUM')
        
        if high_count > 0:
            return "#ff0000"  # –ö—Ä–∞—Å–Ω—ã–π
        elif medium_count > 0:
            return "#ffaa00"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            return "#36a64f"  # –ó–µ–ª–µ–Ω—ã–π


class TeamsNotifier(BaseNotifier):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Microsoft Teams."""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.webhook_url = config.get('webhook_url')
    
    def send_notification(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Teams."""
        if not self.enabled or not self.webhook_url:
            return False
        
        try:
            payload = self._build_teams_payload(title, message, scan_result)
            
            response = requests.post(
                self.webhook_url,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            return response.status_code == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Teams —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _build_teams_payload(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç payload –¥–ª—è Teams API."""
        color = self._get_theme_color_for_scan(scan_result) if scan_result else "good"
        
        payload = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": color,
            "summary": title,
            "sections": [
                {
                    "activityTitle": title,
                    "activitySubtitle": "PySecKit Security Scanner",
                    "activityImage": "https://example.com/pyseckit-icon.png",
                    "text": message,
                    "markdown": True
                }
            ]
        }
        
        if scan_result:
            payload["sections"][0]["facts"] = self._build_teams_facts(scan_result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            payload["potentialAction"] = [
                {
                    "@type": "OpenUri",
                    "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç",
                    "targets": [
                        {
                            "os": "default",
                            "uri": f"file://{scan_result.target}"
                        }
                    ]
                }
            ]
        
        return payload
    
    def _build_teams_facts(self, scan_result: ScanResult) -> List[Dict[str, str]]:
        """–°—Ç—Ä–æ–∏—Ç —Ñ–∞–∫—Ç—ã –¥–ª—è Teams card."""
        duration = (scan_result.end_time - scan_result.start_time).total_seconds()
        
        facts = [
            {"name": "–¶–µ–ª—å", "value": scan_result.target},
            {"name": "–°–∫–∞–Ω–µ—Ä", "value": scan_result.scanner_name},
            {"name": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "value": f"{duration:.1f} —Å–µ–∫"},
            {"name": "–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫", "value": str(len(scan_result.findings))}
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ severity
        severity_counts = {}
        for finding in scan_result.findings:
            severity = finding.get('severity', 'INFO')
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        if severity_counts:
            severity_str = ", ".join([f"{k}: {v}" for k, v in severity_counts.items()])
            facts.append({"name": "–ü–æ —É—Ä–æ–≤–Ω—è–º", "value": severity_str})
        
        return facts
    
    def _get_theme_color_for_scan(self, scan_result: ScanResult) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–º—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        high_count = sum(1 for f in scan_result.findings if f.get('severity') == 'HIGH')
        medium_count = sum(1 for f in scan_result.findings if f.get('severity') == 'MEDIUM')
        
        if high_count > 0:
            return "attention"  # –ö—Ä–∞—Å–Ω—ã–π
        elif medium_count > 0:
            return "warning"   # –ñ–µ–ª—Ç—ã–π
        else:
            return "good"      # –ó–µ–ª–µ–Ω—ã–π


class EmailNotifier(BaseNotifier):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.smtp_server = config.get('smtp_server')
        self.smtp_port = config.get('smtp_port', 587)
        self.username = config.get('username')
        self.password = config.get('password')
        self.from_email = config.get('from_email')
        self.to_emails = config.get('to_emails', [])
        self.use_tls = config.get('use_tls', True)
    
    def send_notification(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        if not self.enabled or not all([self.smtp_server, self.username, self.password, self.from_email, self.to_emails]):
            return False
        
        try:
            import smtplib
            from email.mime.text import MIMEText
            from email.mime.multipart import MIMEMultipart
            
            msg = MIMEMultipart('alternative')
            msg['Subject'] = title
            msg['From'] = self.from_email
            msg['To'] = ', '.join(self.to_emails)
            
            # –°–æ–∑–¥–∞–µ–º HTML –≤–µ—Ä—Å–∏—é
            html_content = self._build_html_content(title, message, scan_result)
            html_part = MIMEText(html_content, 'html')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            text_content = self._build_text_content(title, message, scan_result)
            text_part = MIMEText(text_content, 'plain')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                if self.use_tls:
                    server.starttls()
                server.login(self.username, self.password)
                server.send_message(msg)
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _build_html_content(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> str:
        """–°—Ç—Ä–æ–∏—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ email."""
        html = f"""
        <html>
        <body>
            <h2>{title}</h2>
            <p>{message.replace('\n', '<br>')}</p>
        """
        
        if scan_result:
            html += f"""
            <h3>–î–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
            <table border="1" style="border-collapse: collapse;">
                <tr><td><b>–¶–µ–ª—å:</b></td><td>{scan_result.target}</td></tr>
                <tr><td><b>–°–∫–∞–Ω–µ—Ä:</b></td><td>{scan_result.scanner_name}</td></tr>
                <tr><td><b>–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫:</b></td><td>{len(scan_result.findings)}</td></tr>
            </table>
            """
        
        html += """
        <br>
        <p><i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ PySecKit Security Scanner</i></p>
        </body>
        </html>
        """
        
        return html
    
    def _build_text_content(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ email."""
        content = f"{title}\n\n{message}\n"
        
        if scan_result:
            content += f"\n–î–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            content += f"–¶–µ–ª—å: {scan_result.target}\n"
            content += f"–°–∫–∞–Ω–µ—Ä: {scan_result.scanner_name}\n"
            content += f"–í—Å–µ–≥–æ –Ω–∞—Ö–æ–¥–æ–∫: {len(scan_result.findings)}\n"
        
        content += "\n--\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ PySecKit Security Scanner"
        
        return content


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.notifiers: List[BaseNotifier] = []
        
        self._initialize_notifiers()
    
    def _initialize_notifiers(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–∏—Ç–µ–ª–∏."""
        if 'slack' in self.config:
            self.notifiers.append(SlackNotifier(self.config['slack']))
        
        if 'teams' in self.config:
            self.notifiers.append(TeamsNotifier(self.config['teams']))
        
        if 'email' in self.config:
            self.notifiers.append(EmailNotifier(self.config['email']))
    
    def send_scan_completed(self, scan_result: ScanResult) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        title = f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {scan_result.scanner_name}"
        message = self.notifiers[0].format_scan_summary(scan_result) if self.notifiers else ""
        
        return self.send_notification(title, message, scan_result)
    
    def send_critical_findings(self, scan_result: ScanResult) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ö–æ–¥–∫–∞—Ö."""
        critical_findings = [
            f for f in scan_result.findings 
            if f.get('severity') == 'HIGH'
        ]
        
        if not critical_findings:
            return {}
        
        title = f"üö® –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!"
        message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(critical_findings)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ {scan_result.target}"
        
        return self.send_notification(title, message, scan_result)
    
    def send_notification(self, title: str, message: str, scan_result: Optional[ScanResult] = None) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã."""
        results = {}
        
        for notifier in self.notifiers:
            notifier_name = notifier.__class__.__name__
            try:
                success = notifier.send_notification(title, message, scan_result)
                results[notifier_name] = success
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ {notifier_name}: {e}")
                results[notifier_name] = False
        
        return results
    
    def test_notifications(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        title = "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π PySecKit"
        message = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        
        return self.send_notification(title, message) 