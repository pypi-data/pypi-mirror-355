[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "secflow"
version = "1.0.0"
description = "Enterprise Security Framework for DevSecOps Integration"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "SecFlow Team", email = "team@secflow.dev"},
]
maintainers = [
    {name = "SecFlow Team", email = "team@secflow.dev"},
]
keywords = ["security", "sast", "dast", "devsecops", "ci-cd", "vulnerability", "scanning"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.25.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "jinja2>=3.0.0",
    "rich>=12.0.0",
    "python-gitlab>=3.0.0",
    "pygithub>=1.55",
    "boto3>=1.20.0",
    "elasticsearch>=8.0.0",
    "pandas>=1.3.0",
    "plotly>=5.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "checkov>=2.0.0",
    "semgrep>=1.0.0",
    "truffleHog>=2.0.0",
    "gitpython>=3.1.0",
    "psutil>=5.8.0",
    "cryptography>=3.4.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
cloud = [
    "azure-identity>=1.7.0",
    "azure-storage-blob>=12.8.0",
    "google-cloud-storage>=1.42.0",
    "kubernetes>=18.0.0",
]
enterprise = [
    "ldap3>=2.9.0",
    "pyjwt>=2.3.0",
    "celery>=5.2.0",
    "redis>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/WaiperOK/SecFlow"
Documentation = "https://github.com/WaiperOK/SecFlow/wiki"
Repository = "https://github.com/WaiperOK/SecFlow"
Changelog = "https://github.com/WaiperOK/SecFlow/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/WaiperOK/SecFlow/issues"

[project.scripts]
secflow = "pyseckit.cli:main"
sf = "pyseckit.cli:main"

[project.entry-points."pyseckit.scanners"]
bandit = "pyseckit.sast.bandit:BanditScanner"
semgrep = "pyseckit.sast.semgrep:SemgrepScanner"
safety = "pyseckit.sast.safety:SafetyScanner"
zap = "pyseckit.dast.zap:ZapScanner"
gitleaks = "pyseckit.secret_scan.gitleaks:GitleaksScanner"
trufflehog = "pyseckit.secret_scan.trufflehog:TruffleHogScanner"
checkov = "pyseckit.cloud.checkov:CheckovScanner"

[tool.setuptools.packages.find]
where = ["."]
include = ["pyseckit*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["pyseckit"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 