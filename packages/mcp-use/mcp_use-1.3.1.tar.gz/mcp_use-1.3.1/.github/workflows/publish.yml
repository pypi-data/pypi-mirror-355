name: Release

on:
  workflow_run:
    workflows: ["Python Tests"]
    branches:
      - main
    types:
      - completed

# Required for PyPI trusted publishing
permissions:
  id-token: write
  contents: write  # Required for creating tags and releases

jobs:
  check-version-and-publish:
    # Only proceed if the referenced workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel tomli

      - name: Check for version bump
        id: check-version
        run: |
          # Extract current version directly from pyproject.toml
          # This is more reliable than using importlib.metadata
          CURRENT_VERSION=$(python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)
          print(data['project']['version'])
                    ")

          echo "Current version: $CURRENT_VERSION"

          # Check if this version already has a tag
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Version $CURRENT_VERSION already has a tag. Skipping release."
            echo "is_new_version=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: $CURRENT_VERSION"
            echo "is_new_version=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        if: steps.check-version.outputs.is_new_version == 'true'
        run: |
          python -m build

      - name: Create Release
        if: steps.check-version.outputs.is_new_version == 'true'
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.check-version.outputs.new_version }}
          name: Release v${{ steps.check-version.outputs.new_version }}
          draft: false
          prerelease: false
          generateReleaseNotes: true

      - name: Update Docs Changelog
        if: steps.check-version.outputs.is_new_version == 'true'
        run: |
          # Get the release notes from the created release
          RELEASE_NOTES=$(gh release view v${{ steps.check-version.outputs.new_version }} --json body --jq '.body')

          # Get current date in the required format
          CURRENT_DATE=$(date +"%Y‑%m‑%d")

          # Create the new changelog entry
          NEW_ENTRY="<Update label=\"$CURRENT_DATE\">
            ## v${{ steps.check-version.outputs.new_version }}
            $RELEASE_NOTES
          </Update>

          "

          # Read the current changelog and insert the new entry after the front matter
          python -c "
          import re

          # Read the current changelog
          with open('docs/changelog.mdx', 'r') as f:
              content = f.read()

          # Find the end of the front matter
          front_matter_end = content.find('---', content.find('---') + 1) + 3

          # Split content into front matter and body
          front_matter = content[:front_matter_end]
          body = content[front_matter_end:]

          # Create new entry
          new_entry = '''$NEW_ENTRY'''

          # Combine and write back
          new_content = front_matter + '\n\n' + new_entry + body.lstrip()

          with open('docs/changelog.mdx', 'w') as f:
              f.write(new_content)
          "

          # Commit and push the updated changelog
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/changelog.mdx
          git commit -m "docs: update changelog for v${{ steps.check-version.outputs.new_version }}" || echo "No changes to commit"
          git push || echo "No changes to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: steps.check-version.outputs.is_new_version == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
