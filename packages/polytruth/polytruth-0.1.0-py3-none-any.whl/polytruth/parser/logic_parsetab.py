
# logic_parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIFFrightIMPLIESleftORleftANDrightNOTrightFORALLEXISTSAND COLON COMMA EXISTS FORALL IFF IMPLIES INDENT LPAREN NOT OR RPARENlabel : INDENT COLON expression\nexpression : FORALL INDENT expression\n           | EXISTS INDENT expression\nexpression : expression AND expressionexpression : expression OR expressionexpression : expression IMPLIES expressionexpression : expression IFF expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : INDENT LPAREN term_list RPARENexpression : INDENTterm_list : term\n| term COMMA term_list\nterm : INDENT'
    
_lr_action_items = {'INDENT':([0,3,6,7,8,9,10,11,12,13,14,15,16,30,],[2,4,15,16,4,4,19,4,4,4,4,4,4,19,]),'$end':([1,4,5,17,22,23,24,25,26,27,28,29,],[0,-11,-1,-8,-4,-5,-6,-7,-2,-3,-9,-10,]),'COLON':([2,],[3,]),'FORALL':([3,8,9,11,12,13,14,15,16,],[6,6,6,6,6,6,6,6,6,]),'EXISTS':([3,8,9,11,12,13,14,15,16,],[7,7,7,7,7,7,7,7,7,]),'NOT':([3,8,9,11,12,13,14,15,16,],[8,8,8,8,8,8,8,8,8,]),'LPAREN':([3,4,8,9,11,12,13,14,15,16,],[9,10,9,9,9,9,9,9,9,9,]),'AND':([4,5,17,18,22,23,24,25,26,27,28,29,],[-11,11,-8,11,-4,11,11,11,11,11,-9,-10,]),'OR':([4,5,17,18,22,23,24,25,26,27,28,29,],[-11,12,-8,12,-4,-5,12,12,12,12,-9,-10,]),'IMPLIES':([4,5,17,18,22,23,24,25,26,27,28,29,],[-11,13,-8,13,-4,-5,13,13,13,13,-9,-10,]),'IFF':([4,5,17,18,22,23,24,25,26,27,28,29,],[-11,14,-8,14,-4,-5,-6,14,14,14,-9,-10,]),'RPAREN':([4,17,18,19,20,21,22,23,24,25,26,27,28,29,31,],[-11,-8,28,-14,29,-12,-4,-5,-6,-7,-2,-3,-9,-10,-13,]),'COMMA':([19,21,],[-14,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'label':([0,],[1,]),'expression':([3,8,9,11,12,13,14,15,16,],[5,17,18,22,23,24,25,26,27,]),'term_list':([10,30,],[20,31,]),'term':([10,30,],[21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> label","S'",1,None,None,None),
  ('label -> INDENT COLON expression','label',3,'p_label','__init__.py',84),
  ('expression -> FORALL INDENT expression','expression',3,'p_expression_quantifier','__init__.py',91),
  ('expression -> EXISTS INDENT expression','expression',3,'p_expression_quantifier','__init__.py',92),
  ('expression -> expression AND expression','expression',3,'p_expression_and','__init__.py',97),
  ('expression -> expression OR expression','expression',3,'p_expression_or','__init__.py',101),
  ('expression -> expression IMPLIES expression','expression',3,'p_expression_implies','__init__.py',105),
  ('expression -> expression IFF expression','expression',3,'p_expression_iff','__init__.py',109),
  ('expression -> NOT expression','expression',2,'p_expression_not','__init__.py',113),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','__init__.py',117),
  ('expression -> INDENT LPAREN term_list RPAREN','expression',4,'p_expression_predicate','__init__.py',121),
  ('expression -> INDENT','expression',1,'p_expression_atomic','__init__.py',126),
  ('term_list -> term','term_list',1,'p_term_list','__init__.py',130),
  ('term_list -> term COMMA term_list','term_list',3,'p_term_list','__init__.py',131),
  ('term -> INDENT','term',1,'p_term_INDENT','__init__.py',139),
]
