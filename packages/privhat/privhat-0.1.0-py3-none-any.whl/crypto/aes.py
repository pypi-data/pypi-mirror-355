# aes.py 
from dh import generate_private_key, compute_public_key, compute_shared_secret, p_2048, g_2048
import hashlib
class AES:
    def __init__(self, key: bytes):
        assert len(key) == 16, "Only AES-128 supported (16-byte key)"
        self.key = key
        self.Nb = 4          # Block size in 32-bit words
        self.Nk = 4          # Key length in 32-bit words (AES-128)
        self.Nr = 10         # Number of rounds (AES-128)
        self.round_keys = self.key_expansion(key)

    def key_expansion(self, key: bytes):
        # Initial 4 words (4 bytes each)
        W = [key[i:i+4] for i in range(0, 16, 4)]
        for i in range(4, 4 * (self.Nr + 1)):
            temp = W[i - 1]
            if i % self.Nk == 0:
                temp = self.sub_word(self.rot_word(temp))
                temp = bytes([temp[0] ^ self.rcon(i // self.Nk)] + list(temp[1:]))
            W.append(bytes(a ^ b for a, b in zip(W[i - self.Nk], temp)))
        return W

    def sub_word(self, word: bytes) -> bytes:
        return bytes([self.s_box[b] for b in word])

    def rot_word(self, word: bytes) -> bytes:
        return word[1:] + word[:1]

    def rcon(self, i):
        r = 1
        for _ in range(1, i):
            r = (r << 1) ^ (0x1B if (r & 0x80) else 0)
            r &= 0xFF
        return r

    @property
    def s_box(self):
        return [
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
            0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
            0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
            0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
            0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
            0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
            0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
            0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
            0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
            0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
            0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
            0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
            0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
            0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
            0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
            0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
            0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
        ]

    def encrypt_block(self, plaintext_block: bytes) -> bytes:
        assert len(plaintext_block) == 16, "Block size must be 16 bytes"
        state = [[0]*4 for _ in range(4)]
        for i in range(16):
            state[i % 4][i // 4] = plaintext_block[i]

        state = self.add_round_key(state, 0)

        for round in range(1, self.Nr):
            state = self.sub_bytes(state)
            state = self.shift_rows(state)
            state = self.mix_columns(state)
            state = self.add_round_key(state, round)

        state = self.sub_bytes(state)
        state = self.shift_rows(state)
        state = self.add_round_key(state, self.Nr)

        ciphertext = bytes(state[i % 4][i // 4] for i in range(16))
        return ciphertext

    def sub_bytes(self, state):
        for r in range(4):
            for c in range(4):
                state[r][c] = self.s_box[state[r][c]]
        return state

    def shift_rows(self, state):
        for r in range(1, 4):
            state[r] = state[r][r:] + state[r][:r]
        return state

    def xtime(self, a):
        return ((a << 1) ^ 0x1B) & 0xFF if (a & 0x80) else (a << 1) & 0xFF

    def mix_columns(self, state):
        for c in range(4):
            a = [state[r][c] for r in range(4)]
            b = [self.xtime(x) for x in a]
            state[0][c] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]
            state[1][c] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]
            state[2][c] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]
            state[3][c] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]
        return state

    def add_round_key(self, state, round):
        for c in range(4):
            word = self.round_keys[round * 4 + c]
            for r in range(4):
                state[r][c] ^= word[r]
        return state

    def decrypt_block(self, ciphertext_block: bytes) -> bytes:
        assert len(ciphertext_block) == 16, "Block size must be 16 bytes"
        state = [[0]*4 for _ in range(4)]
        for i in range(16):
            state[i % 4][i // 4] = ciphertext_block[i]

        state = self.add_round_key(state, self.Nr)

        for round in range(self.Nr - 1, 0, -1):
            state = self.inv_shift_rows(state)
            state = self.inv_sub_bytes(state)
            state = self.add_round_key(state, round)
            state = self.inv_mix_columns(state)

        state = self.inv_shift_rows(state)
        state = self.inv_sub_bytes(state)
        state = self.add_round_key(state, 0)

        plaintext = bytes(state[i % 4][i // 4] for i in range(16))
        return plaintext

    def inv_sub_bytes(self, state):
        for r in range(4):
            for c in range(4):
                state[r][c] = self.inv_s_box[state[r][c]]
        return state

    def inv_shift_rows(self, state):
        for r in range(1, 4):
            state[r] = state[r][-r:] + state[r][:-r]
        return state

    def inv_mix_columns(self, state):
        for c in range(4):
            a = [state[r][c] for r in range(4)]
            state[0][c] = self.gmul(a[0], 0x0e) ^ self.gmul(a[1], 0x0b) ^ self.gmul(a[2], 0x0d) ^ self.gmul(a[3], 0x09)
            state[1][c] = self.gmul(a[0], 0x09) ^ self.gmul(a[1], 0x0e) ^ self.gmul(a[2], 0x0b) ^ self.gmul(a[3], 0x0d)
            state[2][c] = self.gmul(a[0], 0x0d) ^ self.gmul(a[1], 0x09) ^ self.gmul(a[2], 0x0e) ^ self.gmul(a[3], 0x0b)
            state[3][c] = self.gmul(a[0], 0x0b) ^ self.gmul(a[1], 0x0d) ^ self.gmul(a[2], 0x09) ^ self.gmul(a[3], 0x0e)
        return state

    def gmul(self, a, b):
        """Galois Field (256) Multiplication of two Bytes"""
        p = 0
        for _ in range(8):
            if b & 1:
                p ^= a
            hi_bit_set = a & 0x80
            a = (a << 1) & 0xFF
            if hi_bit_set:
                a ^= 0x1B
            b >>= 1
        return p

    @property
    def inv_s_box(self):
        return [
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
            0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
            0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
            0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
            0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
            0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
            0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
            0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
            0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
            0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
            0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
            0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
            0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
            0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
            0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
            0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
            0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
        ]


BLOCK_SIZE = 16

def pkcs7_pad(data,  block_size=BLOCK_SIZE):
    pad_len = BLOCK_SIZE - (len(data) % BLOCK_SIZE)
    return data + bytes([pad_len] * pad_len)

def pkcs7_unpad(data: bytes) -> bytes:
    pad_len = data[-1]
    if pad_len < 1 or pad_len > BLOCK_SIZE:
        raise ValueError("Invalid padding")
    # Verify all the padding bytes are correct
    if data[-pad_len:] != bytes([pad_len] * pad_len):
        raise ValueError("Invalid padding")
    return data[:-pad_len]

if __name__ == "__main__":
    key = bytes.fromhex('2b7e151628aed2a6abf7158809cf4f3c')

    plaintext_str = input()
    plaintext_bytes = plaintext_str.encode('utf-8')

    # Pad plaintext properly
    padded_plaintext = pkcs7_pad(plaintext_bytes)

    aes = AES(key)

    # Encrypt block by block
    encrypted = b''
    for i in range(0, len(padded_plaintext), BLOCK_SIZE):
        block = padded_plaintext[i:i+BLOCK_SIZE]
        encrypted += aes.encrypt_block(block)

    print("Ciphertext:", encrypted.hex())

    # Decrypt block by block
    decrypted = b''
    for i in range(0, len(encrypted), BLOCK_SIZE):
        block = encrypted[i:i+BLOCK_SIZE]
        decrypted += aes.decrypt_block(block)

    # Remove padding after decrypting
    decrypted_str = pkcs7_unpad(decrypted).decode('utf-8')
    print("Decrypted:", decrypted_str)


