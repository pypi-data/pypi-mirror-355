from datetime import datetime
from airflow import DAG
from airflow.operators.bash import BashOperator
from sas_airflow_provider.operators.sas_jobexecution import SASJobExecutionOperator

"""
This example dag utilizes another open-source tool available at SAS: ValidateViya (https://github.com/sassoftware/pyviyatools/blob/master/validateviya-manual.md). This tool
runs a swath of tests on a Viya environment, ensuring that everything is running as expected. This DAG is designed to automatically run ValidateViya on a given Viya environment
each day and record the results in a SAS table.

This DAG shows off the power of XComs and Jinja templating when creating DAGS. XComs are designed to send small amounts of data from one Task to another while a DAG runs. Jinja
templating enables a user to have dynamic data inside the parameters for their Operators. By combining Jinja templating and XComs, it is possible to have one Task run based upon
data generated in the Task before. In this example, the data generated by a BashOperator using validateviya is uploaded to a SAS Table using a SASJobExecution Operator.
"""

# DAG
# The dag is scheduled to run each day at 6am UTC (2am EST).
dag = DAG('validate_viya_daily', description='Validates Viya environment on a daily basis',
          schedule_interval='0 6 * * *',
          start_date=datetime(2023, 5, 23), catchup=False)

# Some important variables for all of the BashOperators
endpoint = "https://example.com/"
user = "example_user"
password = "hunter2"

# Each of the BashOperators must first set some important environment variables before they can run.
namespace = "example_env"
envExport = "export GELLOW_NAMESPACE=" + namespace + "; export SAS_CLI_PROFILE=${GELLOW_NAMESPACE}; export SSL_CERT_FILE=~/.certs/${GELLOW_NAMESPACE}_trustedcerts.pem; export REQUESTS_CA_BUNDLE=${SSL_CERT_FILE};"

# Setup pyviyatools
# This is a BashOperator, which executes commands in a Bash shell.
# The following commands are used to set up the environment in order to use validateviya. When the BashOperator is done running, the environment that the code is running is reset.
# This means that each time we run the BashOperator, we must start by exporting the important environment variables neccessary to run validateviya and it's related programs
setup_code = envExport + " cd ~/pyviyatools; python3 setup.py; /opt/sas/viya/home/bin/sas-viya profile init --colors-enabled=true --output=json --sas-endpoint=\"" + endpoint + "\";"
setup = BashOperator(
task_id="setup_pyviyatools",
bash_command=setup_code,
dag=dag,
)

# Validate viya full
# This BashOperator runs validateviya to create a html report of the results. This is saved as a .html file to the ~/pyviyatools folder.
vv_full_code = envExport + " cd ~/pyviyatools; /opt/sas/viya/home/bin/sas-viya auth login -u=" + user + " -p=" + password + "; python3 validateviya.py -o report-full;"
validate_viya_full = BashOperator(
task_id="generate_report",
bash_command=vv_full_code,
dag=dag
)

#Validate viya csv
# This BashOperator runs validateviya to create a csv string of the results. Each row of data is typically delimited by \n, but I use tr to replace all \n characters with spaces,
# allowing for the data to all be contained in one line of output. This is important for moving results from one task to another, as the last line of bash output by a BashOperator
# is pushed to an XCom and is therefore accessible to other tasks.
vv_csv_code = envExport + " cd ~/pyviyatools; /opt/sas/viya/home/bin/sas-viya auth login -u=" + user + " -p=" + password + "; python3 validateviya.py -o csv -s -c csvTests.json | tr -d ' ' | tr '\n' ' '"
validate_viya_csv = BashOperator(
task_id="generate_csv",
bash_command=vv_csv_code,
dag=dag
)

# Push CSV data to SAS table
# This SASJobExecutionOperator gets the results from validate_viya_csv and submits them to a SAS job that's responsible for cleaning up some of the input and then publishing it
# to a table. The parameters field includes the use of templating with {{task_instance.xcom_pull(task_ids='vv_csv_code')}}. Directly before execution of the task, this is evaluated
# and instructs the code to fill in everything between {{}} with the XCom value pushed by the task with the id "generate_csv." Being that all BashOperators push the last line of
# output to an XCom, this will evaluate to the last line of output for the task above.
# Further information on XComs and templating can be found in the Airflow documentation:
# https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/xcoms.html
# https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/operators.html#concepts-jinja-templating
validate_viya_SAS = SASJobExecutionOperator(
task_id='csv_to_SAS',
job_name='/Public/append_validate_data',
parameters={"_input1":"{{task_instance.xcom_pull(task_ids='generate_csv')}}"},
dag=dag
)

# Setup the DAG such that it must setup before running anything else and the csv data must be generated before it is published
setup >> validate_viya_full
setup >> validate_viya_csv >> validate_viya_SAS