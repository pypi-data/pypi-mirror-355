name: Publish to PyPI

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get current version
      id: get_version
      run: |
        echo "current_version=$(grep -Po 'version = "\K[^"]+' pyproject.toml)" >> $GITHUB_OUTPUT

    - name: Check if version exists on PyPI
      id: check_pypi
      run: |
        if pip index versions gemini-code-review-mcp | grep -q "${{ steps.get_version.outputs.current_version }}"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Version ${{ steps.get_version.outputs.current_version }} already exists on PyPI"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Version ${{ steps.get_version.outputs.current_version }} does not exist on PyPI"
        fi

    - name: Build package
      if: steps.check_pypi.outputs.exists == 'false'
      run: python -m build

    - name: Publish to PyPI
      if: steps.check_pypi.outputs.exists == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*

    - name: Create GitHub Release
      if: steps.check_pypi.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ steps.get_version.outputs.current_version }} \
          --title "Release v${{ steps.get_version.outputs.current_version }}" \
          --notes "Changes in this release:
        - See [commit history](https://github.com/${{ github.repository }}/commits/v${{ steps.get_version.outputs.current_version }})" \
          --target master