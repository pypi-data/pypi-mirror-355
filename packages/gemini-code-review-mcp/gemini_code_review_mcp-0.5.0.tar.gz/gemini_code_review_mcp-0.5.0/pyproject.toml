[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "test-env",
  "test_venv",
  "venv",
  "examples",
  "rules",
  ".env*",
  "review-context-*.md",
  "code-review-context-*.md",
  "code-review-comprehensive-feedback-*.md",
  "meta-prompt-*.md"
]

[tool.hatch.build.targets.wheel]
packages = ["src"]
exclude = [
  "test-env",
  "test_venv", 
  "venv",
  "examples", 
  "rules",
  ".env*",
  "review-context-*.md",
  "code-review-context-*.md",
  "code-review-comprehensive-feedback-*.md",
  "meta-prompt-*.md"
]

[project]
name = "gemini-code-review-mcp"
version = "0.5.0"
description = "MCP server for AI-powered code reviews using Google Gemini with contextual awareness"
authors = [
    {name = "Nico Bailon", email = "nico604@pm.me"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastmcp>=0.1.0",
    "google-genai>=0.1.0",
    "python-dotenv>=1.0.0",
    "requests>=2.25.0",
]

[project.urls]
Homepage = "https://github.com/nicobailon/gemini-code-review-mcp"
Repository = "https://github.com/nicobailon/gemini-code-review-mcp"
Issues = "https://github.com/nicobailon/gemini-code-review-mcp/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.0.0",
    "pytest-asyncio>=0.21.0",
    "black",
    "isort",
    "pyright",
    "build",
]
yaml = [
    "PyYAML>=6.0.0",
]

[project.scripts]
# MCP Server
gemini-code-review-mcp = "src.server:main"
# CLI Tools
generate-code-review = "src.cli_main:main"
generate-meta-prompt = "src.meta_prompt_generator:main"
generate-file-context = "src.cli_generate_file_context:main"
gemini-code-review-init = "src.cli.init_command:main"
# Semantic shortcuts (when installed)
code-review = "src.cli_main:main"

[dependency-groups]
dev = [
    "psutil>=7.0.0",
    "pytest>=8.3.5",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "integration: marks tests as integration tests that use real APIs (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
addopts = "-m 'not integration'"  # By default, skip integration tests

[tool.gemini]
# Default configuration for Gemini Code Review
temperature = 0.5
default_prompt = "Conduct a comprehensive code review focusing on code quality, best practices, security, performance, and testing coverage."
default_model = "gemini-1.5-flash"
include_claude_memory = true
include_cursor_rules = false

# Performance settings
enable_cache = true
cache_ttl_seconds = 900  # 15 minutes
