import telebot
from telebot import types
import threading
import time
import os
from .config import BOT_TOKEN, MOUSE_MOVE_STEP, MOUSE_MOVE_ACCELERATED
from .utils import load_json_file, save_json_file, generate_token
from .control import take_screenshot, type_text_smart, press_hotkey, move_mouse, click_mouse, scroll_mouse

bot = telebot.TeleBot(BOT_TOKEN)

users = load_json_file("users_db.json")
access_tokens = load_json_file("access_tokens.json")

def save_all():
    save_json_file("users_db.json", users)
    save_json_file("access_tokens.json", access_tokens)

def get_user_status(user_id):
    user_id = str(user_id)
    return users.get(user_id, {}).get("status", 0)

def set_user_status(user_id, status):
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {"status": status}
    else:
        users[user_id]["status"] = status
    save_all()

def generate_access_token(user_id):
    token = generate_token()
    access_tokens[str(user_id)] = {"token": token, "created_at": time.time()}
    save_all()
    return token

def check_access(user_id):
    user_id = str(user_id)
    token_info = access_tokens.get(user_id)
    if not token_info:
        return False
    if time.time() - token_info.get("created_at", 0) > 600:
        del access_tokens[user_id]
        save_all()
        return False
    return True

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ ---

user_modes = {}  # user_id -> mode ('mouse', 'keyboard', 'hotkeys', None)

def main_menu():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üñ± –ú—ã—à—å", callback_data="mode_mouse"),
        types.InlineKeyboardButton("‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", callback_data="mode_keyboard"),
        types.InlineKeyboardButton("‚ö° –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", callback_data="mode_hotkeys"),
        types.InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data="screenshot")
    )
    return keyboard

def mouse_control_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton("‚¨ÜÔ∏è", callback_data="mouse_up"),
    )
    keyboard.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="mouse_left"),
        types.InlineKeyboardButton("‚¨áÔ∏è", callback_data="mouse_down"),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data="mouse_right"),
    )
    keyboard.add(
        types.InlineKeyboardButton("–õ–µ–≤—ã–π –∫–ª–∏–∫ üñ±", callback_data="click_left"),
        types.InlineKeyboardButton("–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ üñ±", callback_data="click_right"),
        types.InlineKeyboardButton("–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ üñ±", callback_data="click_double"),
    )
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö üîº", callback_data="scroll_up"),
        types.InlineKeyboardButton("–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤–Ω–∏–∑ üîΩ", callback_data="scroll_down"),
    )
    keyboard.add(
        types.InlineKeyboardButton("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    return keyboard

def keyboard_control_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="enter_text"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨Ö", callback_data="main_menu")
    )
    return keyboard

def hotkeys_keyboard():
    # –ü—Ä–∏–º–µ—Ä –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton("Ctrl+C", callback_data="hotkey_ctrl_c"),
        types.InlineKeyboardButton("Ctrl+V", callback_data="hotkey_ctrl_v"),
        types.InlineKeyboardButton("Alt+Tab", callback_data="hotkey_alt_tab"),
    )
    keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨Ö", callback_data="main_menu")
    )
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        status = 2 if not users else 0
        users[user_id] = {"status": status}
        save_all()
    status = get_user_status(user_id)
    greetings = {
        0: "üëã –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        1: "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        2: "üõ† –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    }
    bot.send_message(message.chat.id, greetings.get(status, "–ü—Ä–∏–≤–µ—Ç!"), reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    status = get_user_status(user_id)
    if status == 0:
        bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    if not check_access(user_id):
        bot.answer_callback_query(call.id, "‚õî –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫. –í–≤–µ–¥–∏—Ç–µ /pc –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
        return

    data = call.data

    if data == "main_menu":
        user_modes[user_id] = None
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", call.message.chat.id, call.message.message_id, reply_markup=main_menu())

    elif data == "mode_mouse":
        user_modes[user_id] = "mouse"
        bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é:", call.message.chat.id, call.message.message_id, reply_markup=mouse_control_keyboard())

    elif data.startswith("mouse_") and user_modes.get(user_id) == "mouse":
        step = MOUSE_MOVE_ACCELERATED if "shift" in data else MOUSE_MOVE_STEP
        if data == "mouse_up":
            move_mouse(0, -1, accelerated=False)
        elif data == "mouse_down":
            move_mouse(0, 1, accelerated=False)
        elif data == "mouse_left":
            move_mouse(-1, 0, accelerated=False)
        elif data == "mouse_right":
            move_mouse(1, 0, accelerated=False)
        bot.answer_callback_query(call.id, "–ú—ã—à—å —Å–¥–≤–∏–Ω—É—Ç–∞")
        # –ù–µ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    elif data.startswith("click_") and user_modes.get(user_id) == "mouse":
        if data == "click_left":
            click_mouse('left')
        elif data == "click_right":
            click_mouse('right')
        elif data == "click_double":
            click_mouse('left')
            click_mouse('left')
        bot.answer_callback_query(call.id, "–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")

    elif data == "scroll_up" and user_modes.get(user_id) == "mouse":
        scroll_mouse(100)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö")

    elif data == "scroll_down" and user_modes.get(user_id) == "mouse":
        scroll_mouse(-100)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑")

    elif data == "mode_keyboard":
        user_modes[user_id] = "keyboard"
        bot.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.", call.message.chat.id, call.message.message_id, reply_markup=keyboard_control_keyboard())

    elif data == "enter_text":
        bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç. –û–Ω –±—É–¥–µ—Ç –≤–≤–µ–¥—ë–Ω –Ω–∞ –ü–ö.")
        user_modes[user_id] = "text_input"

    elif user_modes.get(user_id) == "text_input":
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ

        pass

    elif data == "mode_hotkeys":
        user_modes[user_id] = "hotkeys"
        bot.edit_message_text("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:", call.message.chat.id, call.message.message_id, reply_markup=hotkeys_keyboard())

    elif data.startswith("hotkey_") and user_modes.get(user_id) == "hotkeys":
        mapping = {
            "hotkey_ctrl_c": ("ctrl", "c"),
            "hotkey_ctrl_v": ("ctrl", "v"),
            "hotkey_alt_tab": ("alt", "tab"),
        }
        keys = mapping.get(data)
        if keys:
            press_hotkey(*keys)
            bot.answer_callback_query(call.id, f"–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ { '+'.join(keys).upper() } –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

@bot.message_handler(func=lambda m: True)
def message_handler(message):
    user_id = str(message.from_user.id)
    status = get_user_status(user_id)

    if status == 0:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not check_access(user_id):
        bot.reply_to(message, "‚õî –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pc –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
        return

    mode = user_modes.get(user_id)
    if mode == "text_input":
        type_text_smart(message.text)
        bot.send_message(message.chat.id, f"‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω: {message.text}")
        user_modes[user_id] = "keyboard"
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.", reply_markup=main_menu())

@bot.message_handler(commands=['pc'])
def request_pc_access(message):
    user_id = str(message.from_user.id)
    if get_user_status(user_id) == 0:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    token = generate_access_token(user_id)
    bot.send_message(message.chat.id, f"üîë –í–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω):\n<code>{token}</code>", parse_mode='HTML')

@bot.message_handler(commands=['start', 'admin', 'set_status', 'guide'])
def admin_and_others(message):
    # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ, –∏–ª–∏ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    pass

def run_bot():
    print("[BOT] –ó–∞–ø—É—Å–∫...")
    bot.infinity_polling()

class PCControlModule:
    def __init__(self):
        threading.Thread(target=run_bot, daemon=True).start()
        print("[PCControlModule] Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ.")

if __name__ == '__main__':
    run_bot()
