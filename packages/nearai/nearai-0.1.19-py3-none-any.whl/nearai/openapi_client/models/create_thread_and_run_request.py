# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateThreadAndRunRequest(BaseModel):
    """
    CreateThreadAndRunRequest
    """ # noqa: E501
    agent_id: Optional[StrictStr] = None
    assistant_id: Optional[StrictStr] = None
    thread_id: Optional[StrictStr] = None
    new_message: Optional[StrictStr] = None
    record_run: Optional[StrictBool] = None
    tool_resources: Optional[Dict[str, Any]] = None
    user_env_vars: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["agent_id", "assistant_id", "thread_id", "new_message", "record_run", "tool_resources", "user_env_vars"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateThreadAndRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if agent_id (nullable) is None
        # and model_fields_set contains the field
        if self.agent_id is None and "agent_id" in self.model_fields_set:
            _dict['agent_id'] = None

        # set to None if assistant_id (nullable) is None
        # and model_fields_set contains the field
        if self.assistant_id is None and "assistant_id" in self.model_fields_set:
            _dict['assistant_id'] = None

        # set to None if thread_id (nullable) is None
        # and model_fields_set contains the field
        if self.thread_id is None and "thread_id" in self.model_fields_set:
            _dict['thread_id'] = None

        # set to None if new_message (nullable) is None
        # and model_fields_set contains the field
        if self.new_message is None and "new_message" in self.model_fields_set:
            _dict['new_message'] = None

        # set to None if record_run (nullable) is None
        # and model_fields_set contains the field
        if self.record_run is None and "record_run" in self.model_fields_set:
            _dict['record_run'] = None

        # set to None if tool_resources (nullable) is None
        # and model_fields_set contains the field
        if self.tool_resources is None and "tool_resources" in self.model_fields_set:
            _dict['tool_resources'] = None

        # set to None if user_env_vars (nullable) is None
        # and model_fields_set contains the field
        if self.user_env_vars is None and "user_env_vars" in self.model_fields_set:
            _dict['user_env_vars'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateThreadAndRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_id": obj.get("agent_id"),
            "assistant_id": obj.get("assistant_id"),
            "thread_id": obj.get("thread_id"),
            "new_message": obj.get("new_message"),
            "record_run": obj.get("record_run"),
            "tool_resources": obj.get("tool_resources"),
            "user_env_vars": obj.get("user_env_vars")
        })
        return _obj


