# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from snowstorm_client.models.concept_descriptions_result_component import ConceptDescriptionsResultComponent

class TestConceptDescriptionsResultComponent(unittest.TestCase):
    """ConceptDescriptionsResultComponent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConceptDescriptionsResultComponent:
        """Test ConceptDescriptionsResultComponent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConceptDescriptionsResultComponent`
        """
        model = ConceptDescriptionsResultComponent()
        if include_optional:
            return ConceptDescriptionsResultComponent(
                concept_descriptions = [
                    snowstorm_client.models.description_component.Description_Component(
                        internal_id = '', 
                        path = '', 
                        start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted = True, 
                        changed = True, 
                        active = True, 
                        module_id = '01234', 
                        effective_time_i = 56, 
                        released = True, 
                        release_hash = '', 
                        released_effective_time = 56, 
                        description_id = '01234', 
                        term = '', 
                        term_folded = '', 
                        term_len = 56, 
                        tag = '', 
                        concept_id = '', 
                        language_code = '01', 
                        type_id = '01234', 
                        case_significance_id = '01234', 
                        acceptability_map = {
                            'key' : ''
                            }, 
                        type = '', 
                        lang = '', 
                        inactivation_indicator = '', 
                        association_targets = {
                            'key' : [
                                ''
                                ]
                            }, 
                        language_refset_members = snowstorm_client.models.description_component.Description_Component(
                            internal_id = '', 
                            path = '', 
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deleted = True, 
                            changed = True, 
                            active = True, 
                            module_id = '01234', 
                            effective_time_i = 56, 
                            released = True, 
                            release_hash = '', 
                            released_effective_time = 56, 
                            description_id = '01234', 
                            term = '', 
                            term_folded = '', 
                            term_len = 56, 
                            tag = '', 
                            concept_id = '', 
                            language_code = '01', 
                            type_id = '01234', 
                            case_significance_id = '01234', 
                            type = '', 
                            lang = '', 
                            inactivation_indicator = '', 
                            acceptability_map_from_lang_refset_members = {
                                'key' : ''
                                }, 
                            case_significance = '', 
                            effective_time = '', ), 
                        acceptability_map_from_lang_refset_members = {
                            'key' : ''
                            }, 
                        case_significance = '', 
                        effective_time = '', )
                    ]
            )
        else:
            return ConceptDescriptionsResultComponent(
        )
        """

    def testConceptDescriptionsResultComponent(self):
        """Test ConceptDescriptionsResultComponent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
