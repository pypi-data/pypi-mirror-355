# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from snowstorm_client.models.identifier_component import IdentifierComponent

class TestIdentifierComponent(unittest.TestCase):
    """IdentifierComponent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IdentifierComponent:
        """Test IdentifierComponent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IdentifierComponent`
        """
        model = IdentifierComponent()
        if include_optional:
            return IdentifierComponent(
                alternate_identifier = '',
                effective_time = '',
                active = True,
                module_id = '01234',
                identifier_scheme_id = '01234',
                identifier_scheme = snowstorm_client.models.concept_mini_component.ConceptMini_Component(
                    concept_id = '', 
                    active = True, 
                    definition_status = '', 
                    module_id = '', 
                    effective_time = '', 
                    fsn = snowstorm_client.models.term_lang_pojo_component.TermLangPojo_Component(
                        term = '', 
                        lang = '', ), 
                    pt = snowstorm_client.models.term_lang_pojo_component.TermLangPojo_Component(
                        term = '', 
                        lang = '', ), 
                    descendant_count = 56, 
                    is_leaf_inferred = True, 
                    is_leaf_stated = True, 
                    id = '', 
                    definition_status_id = '', 
                    leaf_inferred = snowstorm_client.models.concept_mini_component.ConceptMini_Component(
                        concept_id = '', 
                        active = True, 
                        definition_status = '', 
                        module_id = '', 
                        effective_time = '', 
                        descendant_count = 56, 
                        is_leaf_inferred = True, 
                        is_leaf_stated = True, 
                        id = '', 
                        definition_status_id = '', 
                        leaf_stated = , 
                        extra_fields = {
                            'key' : None
                            }, 
                        id_and_fsn_term = '', ), 
                    leaf_stated = , 
                    extra_fields = {
                        'key' : None
                        }, 
                    id_and_fsn_term = '', ),
                referenced_component_id = '01234',
                released = True,
                released_effective_time = 56,
                internal_id = '',
                path = '',
                start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted = True,
                changed = True,
                effective_time_i = 56,
                release_hash = '',
                referenced_component_snomed_component = snowstorm_client.models.snomed_component_object_component.SnomedComponentObject_Component(
                    internal_id = '', 
                    path = '', 
                    start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted = True, 
                    changed = True, 
                    active = True, 
                    module_id = '01234', 
                    effective_time_i = 56, 
                    released = True, 
                    release_hash = '', 
                    released_effective_time = 56, 
                    effective_time = '', 
                    id = '', ),
                id = '',
                referenced_component = None
            )
        else:
            return IdentifierComponent(
                alternate_identifier = '',
                identifier_scheme_id = '01234',
                referenced_component_id = '01234',
        )
        """

    def testIdentifierComponent(self):
        """Test IdentifierComponent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
