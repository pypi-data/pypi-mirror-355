# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from snowstorm_client.models.coding import Coding
from snowstorm_client.models.snomed_component_object import SnomedComponentObject
from typing import Optional, Set
from typing_extensions import Self

class ReferenceSetMember(BaseModel):
    """
    ReferenceSetMember
    """ # noqa: E501
    internal_id: Optional[StrictStr] = Field(default=None, alias="internalId")
    path: Optional[StrictStr] = None
    start: Optional[datetime] = None
    end: Optional[datetime] = None
    deleted: Optional[StrictBool] = None
    changed: Optional[StrictBool] = None
    active: Optional[StrictBool] = None
    module_id: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=18)]] = Field(default=None, alias="moduleId")
    effective_time_i: Optional[StrictInt] = Field(default=None, alias="effectiveTimeI")
    released: Optional[StrictBool] = None
    release_hash: Optional[StrictStr] = Field(default=None, alias="releaseHash")
    released_effective_time: Optional[StrictInt] = Field(default=None, alias="releasedEffectiveTime")
    member_id: Optional[StrictStr] = Field(default=None, alias="memberId")
    refset_id: Annotated[str, Field(min_length=5, strict=True, max_length=18)] = Field(alias="refsetId")
    referenced_component_id: Annotated[str, Field(min_length=5, strict=True, max_length=18)] = Field(alias="referencedComponentId")
    concept_id: Optional[StrictStr] = Field(default=None, alias="conceptId")
    additional_fields: Optional[Dict[str, StrictStr]] = Field(default=None, alias="additionalFields")
    referenced_component_snomed_component: Optional[SnomedComponentObject] = Field(default=None, alias="referencedComponentSnomedComponent")
    map_target_coding: Optional[Coding] = Field(default=None, alias="mapTargetCoding")
    map_group: Optional[StrictStr] = Field(default=None, alias="mapGroup")
    map_priority: Optional[StrictStr] = Field(default=None, alias="mapPriority")
    referenced_component: Optional[Dict[str, Any]] = Field(default=None, alias="referencedComponent")
    effective_time: Optional[StrictStr] = Field(default=None, alias="effectiveTime")
    __properties: ClassVar[List[str]] = ["internalId", "path", "start", "end", "deleted", "changed", "active", "moduleId", "effectiveTimeI", "released", "releaseHash", "releasedEffectiveTime", "memberId", "refsetId", "referencedComponentId", "conceptId", "additionalFields", "referencedComponentSnomedComponent", "mapTargetCoding", "mapGroup", "mapPriority", "referencedComponent", "effectiveTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReferenceSetMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of referenced_component_snomed_component
        if self.referenced_component_snomed_component:
            _dict['referencedComponentSnomedComponent'] = self.referenced_component_snomed_component.to_dict()
        # override the default output from pydantic by calling `to_dict()` of map_target_coding
        if self.map_target_coding:
            _dict['mapTargetCoding'] = self.map_target_coding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReferenceSetMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "internalId": obj.get("internalId"),
            "path": obj.get("path"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "deleted": obj.get("deleted"),
            "changed": obj.get("changed"),
            "active": obj.get("active"),
            "moduleId": obj.get("moduleId"),
            "effectiveTimeI": obj.get("effectiveTimeI"),
            "released": obj.get("released"),
            "releaseHash": obj.get("releaseHash"),
            "releasedEffectiveTime": obj.get("releasedEffectiveTime"),
            "memberId": obj.get("memberId"),
            "refsetId": obj.get("refsetId"),
            "referencedComponentId": obj.get("referencedComponentId"),
            "conceptId": obj.get("conceptId"),
            "additionalFields": obj.get("additionalFields"),
            "referencedComponentSnomedComponent": SnomedComponentObject.from_dict(obj["referencedComponentSnomedComponent"]) if obj.get("referencedComponentSnomedComponent") is not None else None,
            "mapTargetCoding": Coding.from_dict(obj["mapTargetCoding"]) if obj.get("mapTargetCoding") is not None else None,
            "mapGroup": obj.get("mapGroup"),
            "mapPriority": obj.get("mapPriority"),
            "referencedComponent": obj.get("referencedComponent"),
            "effectiveTime": obj.get("effectiveTime")
        })
        return _obj


