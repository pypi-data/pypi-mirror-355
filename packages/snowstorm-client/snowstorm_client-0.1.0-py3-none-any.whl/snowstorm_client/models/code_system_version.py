# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CodeSystemVersion(BaseModel):
    """
    CodeSystemVersion
    """ # noqa: E501
    id: Optional[StrictStr] = None
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    import_date: Optional[datetime] = Field(default=None, alias="importDate")
    parent_branch_path: Optional[StrictStr] = Field(default=None, alias="parentBranchPath")
    effective_date: Optional[StrictInt] = Field(default=None, alias="effectiveDate")
    version: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    release_package: Optional[StrictStr] = Field(default=None, alias="releasePackage")
    dependant_version_effective_time: Optional[StrictInt] = Field(default=None, alias="dependantVersionEffectiveTime")
    code_system: Optional[CodeSystem] = Field(default=None, alias="codeSystem")
    branch_path: Optional[StrictStr] = Field(default=None, alias="branchPath")
    __properties: ClassVar[List[str]] = ["id", "shortName", "importDate", "parentBranchPath", "effectiveDate", "version", "description", "releasePackage", "dependantVersionEffectiveTime", "codeSystem", "branchPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodeSystemVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of code_system
        if self.code_system:
            _dict['codeSystem'] = self.code_system.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodeSystemVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "shortName": obj.get("shortName"),
            "importDate": obj.get("importDate"),
            "parentBranchPath": obj.get("parentBranchPath"),
            "effectiveDate": obj.get("effectiveDate"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "releasePackage": obj.get("releasePackage"),
            "dependantVersionEffectiveTime": obj.get("dependantVersionEffectiveTime"),
            "codeSystem": CodeSystem.from_dict(obj["codeSystem"]) if obj.get("codeSystem") is not None else None,
            "branchPath": obj.get("branchPath")
        })
        return _obj

from snowstorm_client.models.code_system import CodeSystem
# TODO: Rewrite to not use raise_errors
CodeSystemVersion.model_rebuild(raise_errors=False)

