# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from snowstorm_client.models.concept_mini import ConceptMini
from snowstorm_client.models.pageable_object import PageableObject
from snowstorm_client.models.reference_set_member import ReferenceSetMember
from snowstorm_client.models.sort_object import SortObject
from typing import Optional, Set
from typing_extensions import Self

class RefSetMemberPageWithBucketAggregationsReferenceSetMember(BaseModel):
    """
    RefSetMemberPageWithBucketAggregationsReferenceSetMember
    """ # noqa: E501
    content: Optional[List[ReferenceSetMember]] = None
    pageable: Optional[PageableObject] = None
    member_counts_by_reference_set: Optional[Dict[str, StrictInt]] = Field(default=None, alias="memberCountsByReferenceSet")
    reference_sets: Optional[Dict[str, ConceptMini]] = Field(default=None, alias="referenceSets")
    search_after_array: Optional[List[Dict[str, Any]]] = Field(default=None, alias="searchAfterArray")
    search_after: Optional[StrictStr] = Field(default=None, alias="searchAfter")
    last: Optional[StrictBool] = None
    total_elements: Optional[StrictInt] = Field(default=None, alias="totalElements")
    total_pages: Optional[StrictInt] = Field(default=None, alias="totalPages")
    size: Optional[StrictInt] = None
    number: Optional[StrictInt] = None
    sort: Optional[List[SortObject]] = None
    first: Optional[StrictBool] = None
    number_of_elements: Optional[StrictInt] = Field(default=None, alias="numberOfElements")
    empty: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["content", "pageable", "memberCountsByReferenceSet", "referenceSets", "searchAfterArray", "searchAfter", "last", "totalElements", "totalPages", "size", "number", "sort", "first", "numberOfElements", "empty"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefSetMemberPageWithBucketAggregationsReferenceSetMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item_content in self.content:
                if _item_content:
                    _items.append(_item_content.to_dict())
            _dict['content'] = _items
        # override the default output from pydantic by calling `to_dict()` of pageable
        if self.pageable:
            _dict['pageable'] = self.pageable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in reference_sets (dict)
        _field_dict = {}
        if self.reference_sets:
            for _key_reference_sets in self.reference_sets:
                if self.reference_sets[_key_reference_sets]:
                    _field_dict[_key_reference_sets] = self.reference_sets[_key_reference_sets].to_dict()
            _dict['referenceSets'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefSetMemberPageWithBucketAggregationsReferenceSetMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": [ReferenceSetMember.from_dict(_item) for _item in obj["content"]] if obj.get("content") is not None else None,
            "pageable": PageableObject.from_dict(obj["pageable"]) if obj.get("pageable") is not None else None,
            "memberCountsByReferenceSet": obj.get("memberCountsByReferenceSet"),
            "referenceSets": dict(
                (_k, ConceptMini.from_dict(_v))
                for _k, _v in obj["referenceSets"].items()
            )
            if obj.get("referenceSets") is not None
            else None,
            "searchAfterArray": obj.get("searchAfterArray"),
            "searchAfter": obj.get("searchAfter"),
            "last": obj.get("last"),
            "totalElements": obj.get("totalElements"),
            "totalPages": obj.get("totalPages"),
            "size": obj.get("size"),
            "number": obj.get("number"),
            "sort": [SortObject.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "first": obj.get("first"),
            "numberOfElements": obj.get("numberOfElements"),
            "empty": obj.get("empty")
        })
        return _obj


