# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Description(BaseModel):
    """
    Description
    """ # noqa: E501
    internal_id: Optional[StrictStr] = Field(default=None, alias="internalId")
    path: Optional[StrictStr] = None
    start: Optional[datetime] = None
    end: Optional[datetime] = None
    deleted: Optional[StrictBool] = None
    changed: Optional[StrictBool] = None
    active: Optional[StrictBool] = None
    module_id: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=18)]] = Field(default=None, alias="moduleId")
    effective_time_i: Optional[StrictInt] = Field(default=None, alias="effectiveTimeI")
    released: Optional[StrictBool] = None
    release_hash: Optional[StrictStr] = Field(default=None, alias="releaseHash")
    released_effective_time: Optional[StrictInt] = Field(default=None, alias="releasedEffectiveTime")
    description_id: Optional[Annotated[str, Field(min_length=5, strict=True, max_length=18)]] = Field(default=None, alias="descriptionId")
    term: StrictStr
    term_folded: Optional[StrictStr] = Field(default=None, alias="termFolded")
    term_len: Optional[StrictInt] = Field(default=None, alias="termLen")
    tag: Optional[StrictStr] = None
    concept_id: Optional[StrictStr] = Field(default=None, alias="conceptId")
    language_code: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(alias="languageCode")
    type_id: Annotated[str, Field(min_length=5, strict=True, max_length=18)] = Field(alias="typeId")
    case_significance_id: Annotated[str, Field(min_length=5, strict=True, max_length=18)] = Field(alias="caseSignificanceId")
    acceptability_map: Optional[Dict[str, StrictStr]] = Field(default=None, alias="acceptabilityMap")
    type: Optional[StrictStr] = None
    lang: Optional[StrictStr] = None
    inactivation_indicator: Optional[StrictStr] = Field(default=None, alias="inactivationIndicator")
    association_targets: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="associationTargets")
    language_refset_members: Optional[Description] = Field(default=None, alias="languageRefsetMembers")
    acceptability_map_from_lang_refset_members: Optional[Dict[str, StrictStr]] = Field(default=None, alias="acceptabilityMapFromLangRefsetMembers")
    case_significance: Optional[StrictStr] = Field(default=None, alias="caseSignificance")
    effective_time: Optional[StrictStr] = Field(default=None, alias="effectiveTime")
    __properties: ClassVar[List[str]] = ["internalId", "path", "start", "end", "deleted", "changed", "active", "moduleId", "effectiveTimeI", "released", "releaseHash", "releasedEffectiveTime", "descriptionId", "term", "termFolded", "termLen", "tag", "conceptId", "languageCode", "typeId", "caseSignificanceId", "acceptabilityMap", "type", "lang", "inactivationIndicator", "associationTargets", "languageRefsetMembers", "acceptabilityMapFromLangRefsetMembers", "caseSignificance", "effectiveTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Description from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of language_refset_members
        if self.language_refset_members:
            _dict['languageRefsetMembers'] = self.language_refset_members.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Description from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "internalId": obj.get("internalId"),
            "path": obj.get("path"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "deleted": obj.get("deleted"),
            "changed": obj.get("changed"),
            "active": obj.get("active"),
            "moduleId": obj.get("moduleId"),
            "effectiveTimeI": obj.get("effectiveTimeI"),
            "released": obj.get("released"),
            "releaseHash": obj.get("releaseHash"),
            "releasedEffectiveTime": obj.get("releasedEffectiveTime"),
            "descriptionId": obj.get("descriptionId"),
            "term": obj.get("term"),
            "termFolded": obj.get("termFolded"),
            "termLen": obj.get("termLen"),
            "tag": obj.get("tag"),
            "conceptId": obj.get("conceptId"),
            "languageCode": obj.get("languageCode"),
            "typeId": obj.get("typeId"),
            "caseSignificanceId": obj.get("caseSignificanceId"),
            "acceptabilityMap": obj.get("acceptabilityMap"),
            "type": obj.get("type"),
            "lang": obj.get("lang"),
            "inactivationIndicator": obj.get("inactivationIndicator"),
            "associationTargets": obj.get("associationTargets"),
            "languageRefsetMembers": Description.from_dict(obj["languageRefsetMembers"]) if obj.get("languageRefsetMembers") is not None else None,
            "acceptabilityMapFromLangRefsetMembers": obj.get("acceptabilityMapFromLangRefsetMembers"),
            "caseSignificance": obj.get("caseSignificance"),
            "effectiveTime": obj.get("effectiveTime")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Description.model_rebuild(raise_errors=False)

