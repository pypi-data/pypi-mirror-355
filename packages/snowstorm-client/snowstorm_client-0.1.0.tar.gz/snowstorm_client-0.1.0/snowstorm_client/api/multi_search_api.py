# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from snowstorm_client.models.items_page_browser_description_search_result_component import ItemsPageBrowserDescriptionSearchResultComponent
from snowstorm_client.models.items_page_concept_mini_component import ItemsPageConceptMiniComponent
from snowstorm_client.models.page_browser_description_search_result_component import PageBrowserDescriptionSearchResultComponent

from snowstorm_client.api_client import ApiClient, RequestSerialized
from snowstorm_client.api_response import ApiResponse
from snowstorm_client.rest import RESTResponseType


class MultiSearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_concepts1(
        self,
        concept_ids: Optional[List[StrictStr]] = None,
        active: Optional[StrictBool] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsPageConceptMiniComponent:
        """Search concepts across multiple Code Systems.


        :param concept_ids:
        :type concept_ids: List[str]
        :param active:
        :type active: bool
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_concepts1_serialize(
            concept_ids=concept_ids,
            active=active,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsPageConceptMiniComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_concepts1_with_http_info(
        self,
        concept_ids: Optional[List[StrictStr]] = None,
        active: Optional[StrictBool] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsPageConceptMiniComponent]:
        """Search concepts across multiple Code Systems.


        :param concept_ids:
        :type concept_ids: List[str]
        :param active:
        :type active: bool
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_concepts1_serialize(
            concept_ids=concept_ids,
            active=active,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsPageConceptMiniComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_concepts1_without_preload_content(
        self,
        concept_ids: Optional[List[StrictStr]] = None,
        active: Optional[StrictBool] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search concepts across multiple Code Systems.


        :param concept_ids:
        :type concept_ids: List[str]
        :param active:
        :type active: bool
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_concepts1_serialize(
            concept_ids=concept_ids,
            active=active,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsPageConceptMiniComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_concepts1_serialize(
        self,
        concept_ids,
        active,
        offset,
        limit,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'conceptIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if concept_ids is not None:
            
            _query_params.append(('conceptIds', concept_ids))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multisearch/concepts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_descriptions1(
        self,
        term: StrictStr,
        active: Optional[StrictBool] = None,
        module: Optional[List[StrictStr]] = None,
        ecl: Optional[StrictStr] = None,
        language: Annotated[Optional[List[StrictStr]], Field(description="Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.")] = None,
        type: Annotated[Optional[List[StrictInt]], Field(description="Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.")] = None,
        concept_active: Optional[StrictBool] = None,
        content_scope: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsPageBrowserDescriptionSearchResultComponent:
        """find_descriptions1

        Search descriptions across multiple Code Systems.

        :param term: (required)
        :type term: str
        :param active:
        :type active: bool
        :param module:
        :type module: List[str]
        :param ecl:
        :type ecl: str
        :param language: Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.
        :type language: List[str]
        :param type: Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.
        :type type: List[int]
        :param concept_active:
        :type concept_active: bool
        :param content_scope:
        :type content_scope: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_descriptions1_serialize(
            term=term,
            active=active,
            module=module,
            ecl=ecl,
            language=language,
            type=type,
            concept_active=concept_active,
            content_scope=content_scope,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsPageBrowserDescriptionSearchResultComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_descriptions1_with_http_info(
        self,
        term: StrictStr,
        active: Optional[StrictBool] = None,
        module: Optional[List[StrictStr]] = None,
        ecl: Optional[StrictStr] = None,
        language: Annotated[Optional[List[StrictStr]], Field(description="Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.")] = None,
        type: Annotated[Optional[List[StrictInt]], Field(description="Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.")] = None,
        concept_active: Optional[StrictBool] = None,
        content_scope: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsPageBrowserDescriptionSearchResultComponent]:
        """find_descriptions1

        Search descriptions across multiple Code Systems.

        :param term: (required)
        :type term: str
        :param active:
        :type active: bool
        :param module:
        :type module: List[str]
        :param ecl:
        :type ecl: str
        :param language: Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.
        :type language: List[str]
        :param type: Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.
        :type type: List[int]
        :param concept_active:
        :type concept_active: bool
        :param content_scope:
        :type content_scope: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_descriptions1_serialize(
            term=term,
            active=active,
            module=module,
            ecl=ecl,
            language=language,
            type=type,
            concept_active=concept_active,
            content_scope=content_scope,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsPageBrowserDescriptionSearchResultComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_descriptions1_without_preload_content(
        self,
        term: StrictStr,
        active: Optional[StrictBool] = None,
        module: Optional[List[StrictStr]] = None,
        ecl: Optional[StrictStr] = None,
        language: Annotated[Optional[List[StrictStr]], Field(description="Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.")] = None,
        type: Annotated[Optional[List[StrictInt]], Field(description="Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.")] = None,
        concept_active: Optional[StrictBool] = None,
        content_scope: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """find_descriptions1

        Search descriptions across multiple Code Systems.

        :param term: (required)
        :type term: str
        :param active:
        :type active: bool
        :param module:
        :type module: List[str]
        :param ecl:
        :type ecl: str
        :param language: Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.
        :type language: List[str]
        :param type: Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.
        :type type: List[int]
        :param concept_active:
        :type concept_active: bool
        :param content_scope:
        :type content_scope: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_descriptions1_serialize(
            term=term,
            active=active,
            module=module,
            ecl=ecl,
            language=language,
            type=type,
            concept_active=concept_active,
            content_scope=content_scope,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsPageBrowserDescriptionSearchResultComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_descriptions1_serialize(
        self,
        term,
        active,
        module,
        ecl,
        language,
        type,
        concept_active,
        content_scope,
        offset,
        limit,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'module': 'multi',
            'language': 'multi',
            'type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if term is not None:
            
            _query_params.append(('term', term))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if module is not None:
            
            _query_params.append(('module', module))
            
        if ecl is not None:
            
            _query_params.append(('ecl', ecl))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if concept_active is not None:
            
            _query_params.append(('conceptActive', concept_active))
            
        if content_scope is not None:
            
            _query_params.append(('contentScope', content_scope))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multisearch/descriptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_descriptions_reference_sets(
        self,
        term: StrictStr,
        active: Optional[StrictBool] = None,
        module: Optional[List[StrictStr]] = None,
        language: Annotated[Optional[List[StrictStr]], Field(description="Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.")] = None,
        type: Annotated[Optional[List[StrictInt]], Field(description="Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.")] = None,
        concept_active: Optional[StrictBool] = None,
        content_scope: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PageBrowserDescriptionSearchResultComponent:
        """Search descriptions across multiple Code Systems returning reference set membership bucket.


        :param term: (required)
        :type term: str
        :param active:
        :type active: bool
        :param module:
        :type module: List[str]
        :param language: Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.
        :type language: List[str]
        :param type: Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.
        :type type: List[int]
        :param concept_active:
        :type concept_active: bool
        :param content_scope:
        :type content_scope: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_descriptions_reference_sets_serialize(
            term=term,
            active=active,
            module=module,
            language=language,
            type=type,
            concept_active=concept_active,
            content_scope=content_scope,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageBrowserDescriptionSearchResultComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_descriptions_reference_sets_with_http_info(
        self,
        term: StrictStr,
        active: Optional[StrictBool] = None,
        module: Optional[List[StrictStr]] = None,
        language: Annotated[Optional[List[StrictStr]], Field(description="Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.")] = None,
        type: Annotated[Optional[List[StrictInt]], Field(description="Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.")] = None,
        concept_active: Optional[StrictBool] = None,
        content_scope: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PageBrowserDescriptionSearchResultComponent]:
        """Search descriptions across multiple Code Systems returning reference set membership bucket.


        :param term: (required)
        :type term: str
        :param active:
        :type active: bool
        :param module:
        :type module: List[str]
        :param language: Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.
        :type language: List[str]
        :param type: Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.
        :type type: List[int]
        :param concept_active:
        :type concept_active: bool
        :param content_scope:
        :type content_scope: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_descriptions_reference_sets_serialize(
            term=term,
            active=active,
            module=module,
            language=language,
            type=type,
            concept_active=concept_active,
            content_scope=content_scope,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageBrowserDescriptionSearchResultComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_descriptions_reference_sets_without_preload_content(
        self,
        term: StrictStr,
        active: Optional[StrictBool] = None,
        module: Optional[List[StrictStr]] = None,
        language: Annotated[Optional[List[StrictStr]], Field(description="Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.")] = None,
        type: Annotated[Optional[List[StrictInt]], Field(description="Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.")] = None,
        concept_active: Optional[StrictBool] = None,
        content_scope: Optional[StrictStr] = None,
        offset: Optional[StrictInt] = None,
        limit: Optional[StrictInt] = None,
        accept_language: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search descriptions across multiple Code Systems returning reference set membership bucket.


        :param term: (required)
        :type term: str
        :param active:
        :type active: bool
        :param module:
        :type module: List[str]
        :param language: Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.
        :type language: List[str]
        :param type: Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.
        :type type: List[int]
        :param concept_active:
        :type concept_active: bool
        :param content_scope:
        :type content_scope: str
        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param accept_language:
        :type accept_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_descriptions_reference_sets_serialize(
            term=term,
            active=active,
            module=module,
            language=language,
            type=type,
            concept_active=concept_active,
            content_scope=content_scope,
            offset=offset,
            limit=limit,
            accept_language=accept_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageBrowserDescriptionSearchResultComponent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_descriptions_reference_sets_serialize(
        self,
        term,
        active,
        module,
        language,
        type,
        concept_active,
        content_scope,
        offset,
        limit,
        accept_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'module': 'multi',
            'language': 'multi',
            'type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if term is not None:
            
            _query_params.append(('term', term))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if module is not None:
            
            _query_params.append(('module', module))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if concept_active is not None:
            
            _query_params.append(('conceptActive', concept_active))
            
        if content_scope is not None:
            
            _query_params.append(('contentScope', content_scope))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multisearch/descriptions/referencesets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


