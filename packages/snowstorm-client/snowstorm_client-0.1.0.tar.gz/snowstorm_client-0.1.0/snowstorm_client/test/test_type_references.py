# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from snowstorm_client.models.type_references import TypeReferences

class TestTypeReferences(unittest.TestCase):
    """TypeReferences unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TypeReferences:
        """Test TypeReferences
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TypeReferences`
        """
        model = TypeReferences()
        if include_optional:
            return TypeReferences(
                reference_type = snowstorm_client.models.concept_mini.ConceptMini(
                    concept_id = '', 
                    active = True, 
                    definition_status = '', 
                    module_id = '', 
                    effective_time = '', 
                    fsn = snowstorm_client.models.term_lang_pojo.TermLangPojo(
                        term = '', 
                        lang = '', ), 
                    pt = snowstorm_client.models.term_lang_pojo.TermLangPojo(
                        term = '', 
                        lang = '', ), 
                    descendant_count = 56, 
                    is_leaf_inferred = True, 
                    is_leaf_stated = True, 
                    id = '', 
                    definition_status_id = '', 
                    leaf_inferred = snowstorm_client.models.concept_mini.ConceptMini(
                        concept_id = '', 
                        active = True, 
                        definition_status = '', 
                        module_id = '', 
                        effective_time = '', 
                        descendant_count = 56, 
                        is_leaf_inferred = True, 
                        is_leaf_stated = True, 
                        id = '', 
                        definition_status_id = '', 
                        leaf_stated = , 
                        extra_fields = {
                            'key' : None
                            }, 
                        id_and_fsn_term = '', ), 
                    leaf_stated = , 
                    extra_fields = {
                        'key' : None
                        }, 
                    id_and_fsn_term = '', ),
                referencing_concepts = [
                    snowstorm_client.models.concept_mini.ConceptMini(
                        concept_id = '', 
                        active = True, 
                        definition_status = '', 
                        module_id = '', 
                        effective_time = '', 
                        fsn = snowstorm_client.models.term_lang_pojo.TermLangPojo(
                            term = '', 
                            lang = '', ), 
                        pt = snowstorm_client.models.term_lang_pojo.TermLangPojo(
                            term = '', 
                            lang = '', ), 
                        descendant_count = 56, 
                        is_leaf_inferred = True, 
                        is_leaf_stated = True, 
                        id = '', 
                        definition_status_id = '', 
                        leaf_inferred = snowstorm_client.models.concept_mini.ConceptMini(
                            concept_id = '', 
                            active = True, 
                            definition_status = '', 
                            module_id = '', 
                            effective_time = '', 
                            descendant_count = 56, 
                            is_leaf_inferred = True, 
                            is_leaf_stated = True, 
                            id = '', 
                            definition_status_id = '', 
                            leaf_stated = , 
                            extra_fields = {
                                'key' : None
                                }, 
                            id_and_fsn_term = '', ), 
                        leaf_stated = , 
                        extra_fields = {
                            'key' : None
                            }, 
                        id_and_fsn_term = '', )
                    ]
            )
        else:
            return TypeReferences(
        )
        """

    def testTypeReferences(self):
        """Test TypeReferences"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
