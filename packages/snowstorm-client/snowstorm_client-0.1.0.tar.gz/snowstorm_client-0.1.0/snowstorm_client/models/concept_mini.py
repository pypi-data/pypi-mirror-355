# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from snowstorm_client.models.term_lang_pojo import TermLangPojo
from typing import Optional, Set
from typing_extensions import Self

class ConceptMini(BaseModel):
    """
    ConceptMini
    """ # noqa: E501
    concept_id: Optional[StrictStr] = Field(default=None, alias="conceptId")
    active: Optional[StrictBool] = None
    definition_status: Optional[StrictStr] = Field(default=None, alias="definitionStatus")
    module_id: Optional[StrictStr] = Field(default=None, alias="moduleId")
    effective_time: Optional[StrictStr] = Field(default=None, alias="effectiveTime")
    fsn: Optional[TermLangPojo] = None
    pt: Optional[TermLangPojo] = None
    descendant_count: Optional[StrictInt] = Field(default=None, alias="descendantCount")
    is_leaf_inferred: Optional[StrictBool] = Field(default=None, alias="isLeafInferred")
    is_leaf_stated: Optional[StrictBool] = Field(default=None, alias="isLeafStated")
    id: Optional[StrictStr] = None
    definition_status_id: Optional[StrictStr] = Field(default=None, alias="definitionStatusId")
    leaf_inferred: Optional[ConceptMini] = Field(default=None, alias="leafInferred")
    leaf_stated: Optional[ConceptMini] = Field(default=None, alias="leafStated")
    extra_fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, alias="extraFields")
    id_and_fsn_term: Optional[StrictStr] = Field(default=None, alias="idAndFsnTerm")
    __properties: ClassVar[List[str]] = ["conceptId", "active", "definitionStatus", "moduleId", "effectiveTime", "fsn", "pt", "descendantCount", "isLeafInferred", "isLeafStated", "id", "definitionStatusId", "leafInferred", "leafStated", "extraFields", "idAndFsnTerm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConceptMini from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fsn
        if self.fsn:
            _dict['fsn'] = self.fsn.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pt
        if self.pt:
            _dict['pt'] = self.pt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leaf_inferred
        if self.leaf_inferred:
            _dict['leafInferred'] = self.leaf_inferred.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leaf_stated
        if self.leaf_stated:
            _dict['leafStated'] = self.leaf_stated.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConceptMini from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conceptId": obj.get("conceptId"),
            "active": obj.get("active"),
            "definitionStatus": obj.get("definitionStatus"),
            "moduleId": obj.get("moduleId"),
            "effectiveTime": obj.get("effectiveTime"),
            "fsn": TermLangPojo.from_dict(obj["fsn"]) if obj.get("fsn") is not None else None,
            "pt": TermLangPojo.from_dict(obj["pt"]) if obj.get("pt") is not None else None,
            "descendantCount": obj.get("descendantCount"),
            "isLeafInferred": obj.get("isLeafInferred"),
            "isLeafStated": obj.get("isLeafStated"),
            "id": obj.get("id"),
            "definitionStatusId": obj.get("definitionStatusId"),
            "leafInferred": ConceptMini.from_dict(obj["leafInferred"]) if obj.get("leafInferred") is not None else None,
            "leafStated": ConceptMini.from_dict(obj["leafStated"]) if obj.get("leafStated") is not None else None,
            "extraFields": obj.get("extraFields"),
            "idAndFsnTerm": obj.get("idAndFsnTerm")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ConceptMini.model_rebuild(raise_errors=False)

