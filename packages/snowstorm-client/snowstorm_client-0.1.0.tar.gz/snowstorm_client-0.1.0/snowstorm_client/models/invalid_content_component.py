# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from snowstorm_client.models.component_component import ComponentComponent
from typing import Optional, Set
from typing_extensions import Self

class InvalidContentComponent(BaseModel):
    """
    InvalidContentComponent
    """ # noqa: E501
    rule_id: Optional[StrictStr] = Field(default=None, alias="ruleId")
    concept_id: Optional[StrictStr] = Field(default=None, alias="conceptId")
    concept_fsn: Optional[StrictStr] = Field(default=None, alias="conceptFsn")
    component: Optional[ComponentComponent] = None
    message: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    ignore_published_check: Optional[StrictBool] = Field(default=None, alias="ignorePublishedCheck")
    published: Optional[StrictBool] = None
    component_id: Optional[StrictStr] = Field(default=None, alias="componentId")
    __properties: ClassVar[List[str]] = ["ruleId", "conceptId", "conceptFsn", "component", "message", "severity", "ignorePublishedCheck", "published", "componentId"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR', 'WARNING']):
            raise ValueError("must be one of enum values ('ERROR', 'WARNING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvalidContentComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of component
        if self.component:
            _dict['component'] = self.component.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvalidContentComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ruleId": obj.get("ruleId"),
            "conceptId": obj.get("conceptId"),
            "conceptFsn": obj.get("conceptFsn"),
            "component": ComponentComponent.from_dict(obj["component"]) if obj.get("component") is not None else None,
            "message": obj.get("message"),
            "severity": obj.get("severity"),
            "ignorePublishedCheck": obj.get("ignorePublishedCheck"),
            "published": obj.get("published"),
            "componentId": obj.get("componentId")
        })
        return _obj


