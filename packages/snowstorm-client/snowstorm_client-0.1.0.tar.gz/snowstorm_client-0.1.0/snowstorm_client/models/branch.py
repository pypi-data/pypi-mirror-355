# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from snowstorm_client.models.metadata import Metadata
from typing import Optional, Set
from typing_extensions import Self

class Branch(BaseModel):
    """
    Branch
    """ # noqa: E501
    internal_id: Optional[StrictStr] = Field(default=None, alias="internalId")
    path: Optional[StrictStr] = None
    start: Optional[datetime] = None
    end: Optional[datetime] = None
    deleted: Optional[StrictBool] = None
    base: Optional[datetime] = None
    head: Optional[datetime] = None
    creation: Optional[datetime] = None
    last_promotion: Optional[datetime] = Field(default=None, alias="lastPromotion")
    locked: Optional[StrictBool] = None
    contains_content: Optional[StrictBool] = Field(default=None, alias="containsContent")
    versions_replaced: Optional[Dict[str, List[StrictStr]]] = Field(default=None, alias="versionsReplaced")
    metadata_internal: Optional[Dict[str, StrictStr]] = Field(default=None, alias="metadataInternal")
    metadata: Optional[Metadata] = None
    state: Optional[StrictStr] = None
    head_timestamp: Optional[StrictInt] = Field(default=None, alias="headTimestamp")
    base_timestamp: Optional[StrictInt] = Field(default=None, alias="baseTimestamp")
    creation_timestamp: Optional[StrictInt] = Field(default=None, alias="creationTimestamp")
    versions_replaced_counts: Optional[Dict[str, StrictInt]] = Field(default=None, alias="versionsReplacedCounts")
    __properties: ClassVar[List[str]] = ["internalId", "path", "start", "end", "deleted", "base", "head", "creation", "lastPromotion", "locked", "containsContent", "versionsReplaced", "metadataInternal", "metadata", "state", "headTimestamp", "baseTimestamp", "creationTimestamp", "versionsReplacedCounts"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UP_TO_DATE', 'FORWARD', 'BEHIND', 'DIVERGED']):
            raise ValueError("must be one of enum values ('UP_TO_DATE', 'FORWARD', 'BEHIND', 'DIVERGED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Branch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Branch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "internalId": obj.get("internalId"),
            "path": obj.get("path"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "deleted": obj.get("deleted"),
            "base": obj.get("base"),
            "head": obj.get("head"),
            "creation": obj.get("creation"),
            "lastPromotion": obj.get("lastPromotion"),
            "locked": obj.get("locked"),
            "containsContent": obj.get("containsContent"),
            "versionsReplaced": obj.get("versionsReplaced"),
            "metadataInternal": obj.get("metadataInternal"),
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "state": obj.get("state"),
            "headTimestamp": obj.get("headTimestamp"),
            "baseTimestamp": obj.get("baseTimestamp"),
            "creationTimestamp": obj.get("creationTimestamp"),
            "versionsReplacedCounts": obj.get("versionsReplacedCounts")
        })
        return _obj


