[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"


[project]
name = "bottom"
version = "3.0.0"
description = "asyncio-based rfc2812-compliant IRC Client"
readme = "README.md"
requires-python = ">=3.12"
authors = [{name="numberoverzero"}]
license = "MIT"
license-files = ["LICENSE"]
classifiers = [
    "Development Status :: 4 - Beta",
]

[tool.poetry.dependencies]
python = ">=3.12"


[dependency-groups]
test = [
    "coverage==7.8.2",
    "pytest==8.4.0",
    "pytest-asyncio==1.0.0",
]
lint = [
    "ruff==0.11.13",
    "ty==0.0.1a8",
]
docs = [
    "sphinx==8.2.3",
    "sphinx-rtd-theme==3.0.2",
]
dist = [
    "build==1.2.2",
    "twine==6.1.0"
]
dev = [
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "docs"},
    {include-group = "dist"},
]

[tool.pyright]
ignore = [
    # expected failure - written against bottom 2.2.0
    "examples/migration/v2.2.0.py"
]

[tool.ruff]
line-length = 120
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",

    # expected failure - written against bottom 2.2.0
    "examples/migration/v2.2.0.py",
    # non-standard comment formatting for clarity of fixes
    "examples/migration/v3.0.0.py",
]

[tool.ruff.lint]
select = [
    "F", "E", "I", "ANN", "RUF",
]
ignore = [
    "E501",  # formatter handles this best effort, don't warn on lines too long
]

[tool.pytest.ini_options]
# `make test` also clears .pytest_cache on every run
addopts = "-p no:cacheprovider"
# https://pytest-asyncio.readthedocs.io/en/latest/concepts.html#auto-mode
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@t.overload",
]

[tool.ruff.lint.isort]
known-third-party = ["bottom"]

[tool.ruff.lint.per-file-ignores]
# Ignore missing type annotations in tests
"conftest.py" = ["ANN"]
"test_*.py" = ["ANN", "RUF012"]

"v3.0.0.py" = ["E402"]

[tool.ruff.lint.flake8-annotations]
# we take **kwargs: t.Any in a few places because we pass those values through str.format()
# and don't really care what type they are.  users can pass custom objects that implement a custom __str__
allow-star-arg-any = true
