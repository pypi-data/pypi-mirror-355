# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

"""
Agent Connect Protocol

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.2
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    ValidationError,
    field_validator,
    model_serializer,
)
from typing_extensions import Self

from agntcy_acp.acp_v0.models.custom_run_result_update import CustomRunResultUpdate
from agntcy_acp.acp_v0.models.value_run_error_update import ValueRunErrorUpdate
from agntcy_acp.acp_v0.models.value_run_interrupt_update import ValueRunInterruptUpdate
from agntcy_acp.acp_v0.models.value_run_result_update import ValueRunResultUpdate

STREAMEVENTPAYLOAD_ONE_OF_SCHEMAS = [
    "CustomRunResultUpdate",
    "ValueRunErrorUpdate",
    "ValueRunInterruptUpdate",
    "ValueRunResultUpdate",
]


class StreamEventPayload(BaseModel):
    """
    A serialized JSON data structure carried in the SSE event data field. The event can carry either a full `ValueRunResultUpdate`, if streaming mode is `values` or an `CustomRunResultUpdate` if streaming mode is `custom`
    """

    # data type: ValueRunResultUpdate
    oneof_schema_1_validator: Optional[ValueRunResultUpdate] = None
    # data type: CustomRunResultUpdate
    oneof_schema_2_validator: Optional[CustomRunResultUpdate] = None
    # data type: ValueRunInterruptUpdate
    oneof_schema_3_validator: Optional[ValueRunInterruptUpdate] = None
    # data type: ValueRunErrorUpdate
    oneof_schema_4_validator: Optional[ValueRunErrorUpdate] = None
    actual_instance: Optional[
        Union[
            CustomRunResultUpdate,
            ValueRunErrorUpdate,
            ValueRunInterruptUpdate,
            ValueRunResultUpdate,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "CustomRunResultUpdate",
        "ValueRunErrorUpdate",
        "ValueRunInterruptUpdate",
        "ValueRunResultUpdate",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        _ = StreamEventPayload.model_construct()
        error_messages = []
        match = 0
        # validate data type: ValueRunResultUpdate
        if not isinstance(v, ValueRunResultUpdate):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ValueRunResultUpdate`"
            )
        else:
            match += 1
        # validate data type: CustomRunResultUpdate
        if not isinstance(v, CustomRunResultUpdate):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CustomRunResultUpdate`"
            )
        else:
            match += 1
        # validate data type: ValueRunInterruptUpdate
        if not isinstance(v, ValueRunInterruptUpdate):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ValueRunInterruptUpdate`"
            )
        else:
            match += 1
        # validate data type: ValueRunErrorUpdate
        if not isinstance(v, ValueRunErrorUpdate):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `ValueRunErrorUpdate`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in StreamEventPayload with oneOf schemas: CustomRunResultUpdate, ValueRunErrorUpdate, ValueRunInterruptUpdate, ValueRunResultUpdate. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in StreamEventPayload with oneOf schemas: CustomRunResultUpdate, ValueRunErrorUpdate, ValueRunInterruptUpdate, ValueRunResultUpdate. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ValueRunResultUpdate
        try:
            instance.actual_instance = ValueRunResultUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomRunResultUpdate
        try:
            instance.actual_instance = CustomRunResultUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueRunInterruptUpdate
        try:
            instance.actual_instance = ValueRunInterruptUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueRunErrorUpdate
        try:
            instance.actual_instance = ValueRunErrorUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into StreamEventPayload with oneOf schemas: CustomRunResultUpdate, ValueRunErrorUpdate, ValueRunInterruptUpdate, ValueRunResultUpdate. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into StreamEventPayload with oneOf schemas: CustomRunResultUpdate, ValueRunErrorUpdate, ValueRunInterruptUpdate, ValueRunResultUpdate. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
            self.actual_instance.to_json
        ):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    @model_serializer()
    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            CustomRunResultUpdate,
            ValueRunErrorUpdate,
            ValueRunInterruptUpdate,
            ValueRunResultUpdate,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
            self.actual_instance.to_dict
        ):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
