# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyte._protos.workflow import state_service_pb2 as workflow_dot_state__service__pb2


class StateServiceStub(object):
    """provides an interface for managing the state of actions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Store = channel.unary_unary(
                '/cloudidl.workflow.StateService/Store',
                request_serializer=workflow_dot_state__service__pb2.StoreRequest.SerializeToString,
                response_deserializer=workflow_dot_state__service__pb2.StoreResponse.FromString,
                )
        self.Load = channel.unary_unary(
                '/cloudidl.workflow.StateService/Load',
                request_serializer=workflow_dot_state__service__pb2.LoadRequest.SerializeToString,
                response_deserializer=workflow_dot_state__service__pb2.LoadResponse.FromString,
                )
        self.Watch = channel.unary_stream(
                '/cloudidl.workflow.StateService/Watch',
                request_serializer=workflow_dot_state__service__pb2.WatchRequest.SerializeToString,
                response_deserializer=workflow_dot_state__service__pb2.WatchResponse.FromString,
                )


class StateServiceServicer(object):
    """provides an interface for managing the state of actions.
    """

    def Store(self, request, context):
        """store the state of an action.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """load the state of an action.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=workflow_dot_state__service__pb2.StoreRequest.FromString,
                    response_serializer=workflow_dot_state__service__pb2.StoreResponse.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=workflow_dot_state__service__pb2.LoadRequest.FromString,
                    response_serializer=workflow_dot_state__service__pb2.LoadResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=workflow_dot_state__service__pb2.WatchRequest.FromString,
                    response_serializer=workflow_dot_state__service__pb2.WatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloudidl.workflow.StateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StateService(object):
    """provides an interface for managing the state of actions.
    """

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cloudidl.workflow.StateService/Store',
            workflow_dot_state__service__pb2.StoreRequest.SerializeToString,
            workflow_dot_state__service__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cloudidl.workflow.StateService/Load',
            workflow_dot_state__service__pb2.LoadRequest.SerializeToString,
            workflow_dot_state__service__pb2.LoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cloudidl.workflow.StateService/Watch',
            workflow_dot_state__service__pb2.WatchRequest.SerializeToString,
            workflow_dot_state__service__pb2.WatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
