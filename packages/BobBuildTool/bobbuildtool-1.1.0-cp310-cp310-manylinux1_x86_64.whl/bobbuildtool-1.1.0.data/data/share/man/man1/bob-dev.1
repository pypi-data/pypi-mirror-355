.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "BOB-DEV" "1" "Jun 16, 2025" "1.1.0" "Bob"
.SH NAME
bob-dev \- Bob develop mode build
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
.sp
.EX
bob dev [\-h] [\-\-destination DEST] [\-j [JOBS]] [\-k] [\-f] [\-n] [\-p]
        [\-\-without\-provided] [\-A | \-\-audit] [\-b | \-B | \-\-normal]
        [\-\-clean | \-\-incremental] [\-\-always\-checkout RE] [\-\-resume]
        [\-q] [\-v] [\-\-no\-logfiles] [\-D DEFINES] [\-c CONFIGFILE]
        [\-lc LAYERCONFIG] [\-e NAME] [\-E] [\-M META] [\-\-upload]
        [\-\-link\-deps] [\-\-no\-link\-deps] [\-\-download MODE]
        [\-\-download\-layer MODE] [\-\-shared | \-\-no\-shared]
        [\-\-install | \-\-no\-install]
        [\-\-sandbox | \-\-slim\-sandbox | \-\-dev\-sandbox | \-\-strict\-sandbox | \-\-no\-sandbox]
        [\-\-clean\-checkout] [\-\-attic | \-\-no\-attic]
        PACKAGE [PACKAGE ...]
.EE
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
The \fIbob dev\fP command is building packages locally in develop mode. This mode
is intended to be used by developers to incrementally build the packages. Its
defaults are tuned to support active development on source code by keeping a
stable directory structure and minimize the edit\-compile turnaround time.
.SH DEFAULT OPTIONS
.sp
By default \fIbob dev\fP works in the \fBdev\fP subdirectory of the project root
directory. The source\-, build\- and package\-directories are kept in separate
hierarchies (\fBdev/src\fP, \fBdev/build\fP and \fBdev/dist\fP) to allow easy
indexing of the involved sources by IDEs. It is possible to change these paths
by means of a plugin but it is advised to keep the top level structure.
.sp
In contrast to \fIbob build\fP the following options take precedence. They can be
overridden individually by their inverse switches:
.INDENT 0.0
.IP \(bu 2
\fB\-\-download=deps\fP
.IP \(bu 2
\fB\-\-incremental\fP
.IP \(bu 2
\fB\-\-no\-sandbox\fP
.UNINDENT
.SH SOURCE CODE CHECKOUT
.sp
The source workspaces are updated incrementally as good as possible even across
recipe changes. This works quite well e.g. for git repositories. It could fail
silently on certain some recipes, though. On URL\-SCMs the downloaded file can
be tracked by Bob. But if an archive is extracted Bob cannot reliably know
which files were coming from the archive. If the archive changes and files
vanish they will still be kept in the workspace.
.sp
If a binary archive is used Bob will try to skip the checkout of sources if
possible. This will work only if matching binary artifacts are available for
the current state of the recipes and their configuration. Though this will
typically speed up the build it can actually make working on the source code
difficult because not all involved sources are checked out.
.sp
There are a number of options to force the checkout of sources is such an
environment:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Use the \fB\-\-always\-checkout\fP option. If you\(aqre typically working on some
particular packages then this option can force the checkout of these
sources. It can be set in \fIdefault.yaml\fP so that it does not need to be
specified every time again.
.IP \(bu 2
Make a dedicated build of selected packages. Because of \fB\-\-download=deps\fP
the specified package will always be built from source.
.IP \(bu 2
Use \fB\-\-checkout\-only\fP to fetch the sources of a package and all its
dependencies.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In any case Bob will use the sources once they were checked out. Bob will also
update them in subsequent builds.
.SH BUILD TREE LOCATION
.sp
The build can be done directly in the project root directory or in a separate
directory. To build outside of the project directory the build\-tree must first
be initialized with \fI\%bob init\fP\&. Any number of build
trees may refer to the same project. Inside the external build\-tree there may
be a dedicated \fBdefault.yaml\fP, overriding settings from the project.
.SH SANDBOXING
.sp
Sandboxing allows to execute the build steps in ephemeral containers. The
feature is currently available on Linux only. There are different aspects to
sandboxing:
.INDENT 0.0
.IP 1. 3
Isolating from the host environment. By using a project defined sandbox
image, the build environment is made independent of the host Linux
distribution.
.IP 2. 3
Controlling the accessible project paths. Only declared dependencies are
accessible read\-only. The build workspace is the only writable path (despite
\fB/tmp\fP). All other project paths are not not accessible at all.
.IP 3. 3
Providing stable execution paths. Sometimes the build path is leaking into
the created binaries. Inside the sandbox environment, the paths can be made
reproducible.
.UNINDENT
.sp
Using \fB\-\-no\-sandbox\fP will not use any sandboxing features and all build steps
are executed without any isolation on the build host. The \fB\-\-sandbox\fP option
will provide partial isolation only if a sandbox image is available for a package.
Inside the sandbox image all paths are stable, i.e. independent of the
workspace path. As a light\-weight alternative, the \fB\-\-slim\-sandbox\fP option
will always provide isolation but an available sandbox image is not used and
all workspace paths are retained. Likewise, the \fB\-\-dev\-sandbox\fP option will
also provide full isolation but an available sandbox image is used. The
\fB\-\-strict\-sandbox\fP option further uses stable paths consistently.
.SH OPTIONS
.INDENT 0.0
.TP
.B \fB\-\-always\-checkout RE\fP
Always checkout packages that match the regular expression pattern \fBRE\fP\&.
The option may be given more than once. In this case all patterns will be
checked.
.sp
Bob may skip the checkout of packages where a correct binary artifact can
be downloaded from an archive. While this can dramatically decrease the
build time of large projects it can hamper actually changing and rebuilding
the packages with modifications. Use this option to instruct Bob to always
checkout the sources of the packages that you may want to modify.
.sp
This option will just make sure that the sources of matching packages are
checked out. Bob will still try to find matching binary artifacts to skip
the actual compilation of these packages. See the \fB\-\-download\fP and
\fB\-\-download\-layer\fP option to control what is built and what is downloaded.
.TP
.B \fB\-\-attic\fP
Move checkout workspace to attic if inline SCM switching is not possible.
(Default)
.TP
.B \fB\-\-audit\fP
Generate an audit trail when building.
.sp
This is the default unless the user changed it in \fBdefault.yaml\fP\&.
.TP
.B \fB\-\-clean\fP
Do clean builds by clearing the build directory before executing the build
commands. It will \fInot\fP clean all build results (e.g. like \fBmake clean\fP)
but rather make sure that no old build artifacts are in the workspace when
a package is rebuilt. To actually force a rebuild (even though nothing has
changed) use \fB\-f\fP\&.
.sp
This is the default for release mode builds. See \fB\-\-incremental\fP for the
inverse option.
.TP
.B \fB\-\-clean\-checkout\fP
Do a clean checkout if SCM state is unclean.
.sp
Bob will check all SCMs for local changes at the start of a checkout. If a
SCM checkout is tainted (e.g. dirty, switched branch, unpushed commits,
\&...) Bob will move it into the attic and do a fresh checkout.
.sp
Use this option if you are not sure about the state of the source code. You
can also use \(aq\fI\%bob status\fP\(aq to check the state
without changing it.
.TP
.B \fB\-\-destination DEST\fP
Destination of build result (will be overwritten!)
.sp
All build results are copied recursively into the given folder. Colliding
files will be overwritten but other existing files or directories are kept.
Unless \fB\-\-without\-provided\fP is given using this option will implicitly
enable \fB\-\-with\-provided\fP to build and copy all provided packages of the
built package(s).
.TP
.B \fB\-\-dev\-sandbox\fP
Enable development sandboxing.
.sp
Always build packages in an isolated environment where only declared
dependencies are visible. If a sandbox image is available, it is used.
Otherwise the host paths are made read\-only.
.TP
.B \fB\-\-download MODE\fP
Download from binary archive (yes, no, deps, forced, forced\-deps, packages)
.INDENT 7.0
.TP
.B no
build given module and it\(aqs dependencies from sources
.TP
.B yes
download given module, if download fails \- build it from sources
(default for release mode)
.TP
.B forced
like \(aqyes\(aq above, but fail if any download fails
.TP
.B deps
download dependencies of given module and build the module
afterwards. If downloading of any dependency fails \- build it
from sources (default for develop mode)
.TP
.B forced\-deps
like \(aqdeps\(aq above, but fail if any download fails
.TP
.B forced\-fallback
combination of forced and forced\-deps modes: if forced fails fall back to
forced\-deps
.TP
.B packages=<packages regex>
download modules that match a given regular expression, build all other.
.UNINDENT
.TP
.B \fB\-\-download\-layer MODE\fP
Download from binary archive for layer (yes, no, forced)
.sp
Acts like \fB\-\-download\fP but only for the modules of the layer that match a
given regular expression (\fB\-\-download\fP option will be overwritten for
matching modules).
Can be used multiple times (if regex is used also multiple times the last mode wins).
.INDENT 7.0
.TP
.B no=<layer regex>
build modules of a layer that match a given regular expression from sources
.TP
.B yes=<layer regex>
download modules of a layer that match a given regular expression, if download fails \- build it from sources
.TP
.B forced=<layer regex>
like \(aqyes\(aq above, but fail if any download fails
.UNINDENT
.TP
.B \fB\-\-incremental\fP
Reuse build directory for incremental builds.
.sp
This is the inverse option to \fB\-\-clean\fP\&. Build workspaces will be reused
as long as their recipes were not changed. If the recipe did change Bob
will still do a clean build automatically.
.TP
.B \fB\-\-install\fP
Install shared packages. A shared location must have been configured so
that Bob knows where to put the package. This is the default.
.TP
.B \fB\-\-link\-deps\fP
Create symlinks to dependencies next to workspace.
.TP
.B \fB\-\-no\-install\fP
Do not install shared packages if a shared location is configured.
.TP
.B \fB\-\-no\-sandbox\fP
Disable sandboxing
.TP
.B \fB\-\-no\-shared\fP
Do not use shared packages even if they are available.
.TP
.B \fB\-\-resume\fP
Resume build where it was previously interrupted.
.sp
All packages that were built in the previous invocation of Bob are not
checked again. In particular changes to the source code of these packages
are not considered. Use this option to quickly resume the build if it
failed and the error has been corrected in the failing package.
.TP
.B \fB\-\-sandbox\fP
Enable partial sandboxing.
.sp
Build packages in an ephemeral container if a sandbox image is available
for the package. Inside the sandbox, stable execution paths are used. In
absence of a sandbox image, no isolation is performed.
.TP
.B \fB\-\-shared\fP
Use shared packages if they are available. This is the default.
.TP
.B \fB\-\-slim\-sandbox\fP
Enable slim sandboxing.
.sp
Build packages in an isolated mount namespace. Most of the host paths
are available read\-only. Other workspaces are hidden when building a
package unless they are a declared dependency. An optionally available
sandbox image is \fInot\fP used.
.TP
.B \fB\-\-strict\-sandbox\fP
Enable strict sandboxing.
.sp
Always build packages in an isolated environment where only declared
dependencies are visible. If a sandbox image is available, it is used.
Otherwise the host paths are made read\-only. The build path is always
a reproducible, stable path.
.TP
.B \fB\-\-upload\fP
Upload to binary archive
.TP
.B \fB\-A, \-\-no\-audit\fP
Do not generate an audit trail.
.sp
The generation of the audit trail is usually barely noticeable. But if a
large number of repositories is checked out it can add a significant
overhead nonetheless. This option suppresses the generation of the audit
trail.
.sp
Note that it is not possible to upload such built artifacts to a binary
archive because vital information is missing. It is also not possible to
install shared packages that were built without audit trail for the same
reason.
.TP
.B \fB\-B, \-\-checkout\-only\fP
Don\(aqt build, just check out sources
.TP
.B \fB\-D VAR=VALUE\fP
Override default or set environment variable.
.sp
Sets the variable \fBVAR\fP to \fBVALUE\fP\&. This overrides the value possibly
set by \fBdefault.yaml\fP, config files passed by \fB\-c\fP or any file that was
included by either of these files.
.TP
.B \fB\-E\fP
Preserve whole environment.
.sp
Normally only variables configured in the whitelist are passed unchanged
from the environment. With this option all environment variables that are
set while invoking Bob are kept. Use with care as this might affect some
packages whose recipes are not robust.
.TP
.B \fB\-M VAR=VALUE\fP
Assign the meta variable \fBVAR\fP to the given value in the audit trail.
The variable can later be matched by \fI\%bob archive\fP as
\fBmeta.VAR\fP to select artifacts built by this project. Variables that are
defined by Bob itself (e.g. \fBmeta.bob\fP) cannot be redifined!
.TP
.B \fB\-b, \-\-build\-only\fP
Don\(aqt checkout, just build and package. Checkout scripts whose
\fI\%checkoutUpdateIf\fP property was evaluated as
true will still be run.
.sp
If the sources of a package that needs to be built are missing then Bob
will still check them out. This option just prevents updates of existing
source workspaces that are fetched from remote locations. A notable
exception is the \fBimport\fP SCM which will still update the workspace even
if this option is present.
.TP
.B \fB\-c CONFIGFILE\fP
Use additional configuration file.
.sp
The \fB\&.yaml\fP suffix is appended automatically and the configuration file
is searched relative to the project root directory unless an absolute path
is given. Bob will parse these user configuration files after
\fIdefault.yaml\fP\&. They are using the same schema.
.sp
This option can be given multiple times. The files will be parsed in the
order as they appeared on the command line.
.TP
.B \fB\-e NAME\fP
Preserve environment variable.
.sp
Unless \fB\-E\fP this allows the fine grained addition of single environment
variables to the whitelist.
.TP
.B \fB\-f, \-\-force\fP
Force execution of all build steps.
.sp
Usually Bob decides if a build step or any of its input has changed and
will skip the execution of it if this is not the case. With this option Bob
not use that optimization and will execute all build steps.
.TP
.B \fB\-j, \-\-jobs\fP
Specifies the number of jobs to run simultaneously.
.sp
Any checkout/build/package step that needs to be executed are counted as a
job. Downloads and uploads of binary artifacts are separate jobs too. If a
job fails the other currently running jobs are still finished before Bob
returns. No new jobs are scheduled, though, unless the \fB\-k\fP option is
given (see below).
.sp
If the \-j option is given without an argument, Bob will run as many jobs as
there are processors on the machine.
.TP
.B \fB\-k, \-\-keep\-going\fP
Continue  as much as possible after an error.
.sp
While the package that failed to build and all the packages that depend on
it cannot be built either, the other dependencies are still processed.
Normally Bob stops on the first error that is encountered.
.TP
.B \fB\-lc LAYERCONFIG\fP
Use additional layer configuration file.
.sp
This is special kind of configuration file to control the layers checkout. Only
\fBlayersWhitelist\fP and \fBlayersScmOverrides\fP are supported. Layers are
updated automatically unless \fB\-\-build\-only\fP is given too.
.sp
The \fB\&.yaml\fP suffix is appended automatically and the configuration file
is searched relative to the project root directory unless an absolute path
is given.
.TP
.B \fB\-\-no\-attic\fP
Do not move checkout workspace to attic if inline SCM switching is not possible.
Instead a build error is issued.
.TP
.B \fB\-n, \-\-no\-deps\fP
Don\(aqt build dependencies.
.sp
Only builds the package that was given on the command line. Bob will not
check if the dependencies of that package are available and if they are
up\-to\-date.
.TP
.B \fB\-\-no\-link\-deps\fP
Do not create symlinks to dependencies next to workspace.
.TP
.B \fB\-\-no\-logfiles\fP
Don\(aqt write a logfile. Without this bob is creating a logfile in the
current workspace. Because of the pipe\-usage many tools like gcc,
ls, git detect they are not running on a tty and disable output
coloring. Disable the logfile generation to get the colored output
back.
.TP
.B \fB\-p, \-\-with\-provided\fP
Build provided dependencies too. In combination with \fB\-\-destination\fP this
is the default. In any other case \fB\-\-without\-provided\fP is default.
.TP
.B \fB\-q, \-\-quiet\fP
Decrease verbosity (may be specified multiple times)
.TP
.B \fB\-v, \-\-verbose\fP
Increase verbosity (may be specified multiple times)
.TP
.B \fB\-\-without\-provided\fP
Build just the named packages without their provided dependencies. This is
the default unless the \fB\-\-destination\fP option is given too.
.UNINDENT
.SH SEE ALSO
.sp
\fI\%bobpaths(7)\fP \fI\%bob\-status(1)\fP
\fI\%bob\-init(1)\fP
.SH AUTHOR
Jan Klötzke
.SH COPYRIGHT
2016-2025, The BobBuildTool Contributors
.\" Generated by docutils manpage writer.
.
