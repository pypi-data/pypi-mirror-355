"""
{{ description }}

This MCP server provides {{ backend_type }} integration capabilities.
Generated by MCP Quick Setup Tool.
"""

import asyncio
import logging
from typing import Any, Dict, List, Optional

from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import Tool, Resource, TextContent, CallToolResult
{% for import_line in imports %}
{{ import_line }}
{% endfor %}

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize MCP server
server = Server("{{ project_name }}")

{{ init_code }}

{{ tools_code }}

{{ resources_code }}

async def main():
    """Main server entry point."""
    logger.info("Starting {{ project_name }} MCP server...")
    
    try:
        # Start the server
        async with stdio_server() as (read_stream, write_stream):
            await server.run(read_stream, write_stream, server.create_initialization_options())
    except KeyboardInterrupt:
        logger.info("Server stopped by user")
    except Exception as e:
        logger.error(f"Server error: {e}")
    finally:
        {{ cleanup_code or "pass" }}

if __name__ == "__main__":
    asyncio.run(main())